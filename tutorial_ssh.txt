
Статьи
=====================

1)
SSH. Авторизация через ключ
---------------------------
http://adw0rd.com/2011/8/2/ssh-auth-key/
Блог от Эдварда


2)
создание ssh
==================
https://webhamster.ru/site/page/index/articles/comp/171

Настройка SSH-ключей в Linux
----------------------------
В операционной системе Linux вначале нужно заглянуть в каталог ~/.ssh.
Если там есть файлы id_rsa и id_rsa.pub то это и есть SSH-ключи.
Если такого каталога или таких файлов нет, то ключи нужно сгенерировать. Даем команду:

ssh-keygen -t rsa -C 'myemail@mail.ru'

Вместо myemail@mail.ru нужно указать свой email. В процессе генерации ключа у вас
спросят куда положить файлы, в ответ просто нажимаем Enter. При запросе пароля
просто нажимаем Enter. После генерации, в каталоге ~/.ssh должны появиться файлы
id_rsa и id_rsa.pub, они нам пригодятся в дальнейшем.

ryndin@ubu:~/my_docs$ ssh-keygen -t rsa -C 'ryndin@i.ua'
Generating public/private rsa key pair.
Enter file in which to save the key (/home/ryndin/.ssh/id_rsa): 
Created directory '/home/ryndin/.ssh'.
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/ryndin/.ssh/id_rsa.
Your public key has been saved in /home/ryndin/.ssh/id_rsa.pub.


Регистрация на GitHub.com
-------------------------
Теперь всё готово для регистрации. Переходим на стартовую страницу GitHub.com.
Интерфейс немного замороченный, поэтому приведу пару скриншотов где что нажимать.
Дизайн и верстку могут в любой момент сменить, так что описываю логику действий на данный момент.

В верхнем меню находим пункт "Pricing and Signup" и нажимаем на него:
Откроется страница выбора тарифного плана. Выбираем бесплатный аккаунт
"Create a free account":
Далее появится страница регистрации, на которой надо ввести имя пользователя,
свой настоящий email и задать пароль. После регистрации сразу попадаем на личную страничку.

Установка SSH-ключа в GitHub
----------------------------
Сразу после регистрации необходимо прописать в системе GutHub свой публичный ключ
шифрования (открытый SSH-ключ). Для добавления ключа, надо в правом верхнем углу
нажать "Account Settings":

В открывшемся окне нужно кликнуть на пункт меню "SSH Public Keys", и нажать
"Add Another Public Key". Появится два поля - название ключа (Title) и содержимое ключа (Key).
В поле Title можно написать название компьютера, на котором сгенерирован
публичный ключ. Можно писать по-русски.

В поле Key надо вставить содержимое файла id_rsa.pub. Помните, в каком каталоге
они находятся? Переходим в этот каталог, открываем любым текстовым редактором
файл id_rsa.pub (именно с расширением .pub, не перепутайте). Выделяем весь текст,
копируем, и вставляем на странице GitHub в поле Key.

После добавления ключа, компьютер может соединяться с GitHub через программу git,
и никаких ошибок не должно возникать.


Работа с репозитарием на GitHub через программу Git
---------------------------------------------------
Начиная с этого момента, пляски вокруг web-интерфейса GitHub можно считать
законченными. Далее можно работать только используя программу git.

Вначале нужно сделать небольшую настройку программы git: указать локальной системе
git имя пользователя и email. Это делается следующими командами, которые можно
выполнить, находясь в любом каталоге:

git config --global user.name "YourFullName"
git config --global user.email myemail@mail.ru

где вместо YourFullName нужно написать свое имя, а вместо myemail@mail.ru - свой email.
Эти значения используются для логина на GitHub. Поэтому на месте YourFullName нужно
указать ваш логин на GitHub-е, а на месте myemail@mail.ru нужно указать email, который
вы вводили при генерации ключей шифрования.

После этих настроек, можно заливать свои файлы в репозитарий. 
Переходим в каталог со своим проектом, и даем команды:

git init
git add .
git commit -a -m 'first commit'
git remote add origin git@github.com:username/reponame.git
git push -u origin master

После этих команд на сервере GitHub образуется копии файлов того каталога,
в котором были выполнены данные команды. Далее можно уже делать коммиты,
заливки на сервер GitHub изменений, считывания изменений с сервера.
Но это уже совсем другая история.

 


