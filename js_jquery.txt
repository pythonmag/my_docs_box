jQuery - Библиотека JacaScript
===================



$(document).ready(function(){
initJournal();
});




Документация
=============
1)
http://jquery.com/
2)
http://jqueryui.com/


jQuery Tutorial
================
https://www.w3schools.com/jquery/default.asp



jQuery
=================
https://ru.wikipedia.org/wiki/JQuery
-----------------
...jQuery — библиотека JavaScript, фокусирующаяся на взаимодействии JavaScript и HTML.
Библиотека jQuery помогает легко получать доступ к любому элементу DOM, обращаться к
атрибутам и содержимому элементов DOM, манипулировать ими.
Также библиотека jQuery предоставляет удобный API для работы с AJAX.



Интерактивные мануалы
=====================

2)
jQuery - Русская документация
---------------------
там вся теоретическая база, описанны спримерами все методы, супер !
ttps://jquery-docs.ru/     (но переведено не все)

3)
Шпаргалка jQuery / все функции и селекторы jQuery (переведено все)
------------------
http://jquery.page2page.ru      

4)
Туториал
--------------------
Getting started with jQuery (tutorial) - Beau teaches JavaScript
--------------------
https://www.youtube.com/watch?v=KhtEmR2A1Fw



JQuery UI
====================
https://ru.wikipedia.org/wiki/JQuery_UI
http://jqueryui.com/
--------------------
jQuery UI — библиотека JavaScript с открытым исходным кодом для создания насыщенного
пользовательского интерфейса в веб-приложениях, часть проекта jQuery.
Построена поверх главной библиотеки jQuery и предоставляет разработчику упрощенный доступ
к её функциям взаимодействия, анимации и эффектов, а также набор виджетов.



Bootstrap 3 Datepicker 
======================
Виджет для Выбра Даты в Календаре
----------------------
http://eonasdan.github.io/bootstrap-datetimepicker/
----------------------
install source:
    Minimal Requirements:
        jQuery
        Moment.js
        Bootstrap.js (transition and collapse are required if you're not using the full Bootstrap)
        Bootstrap Datepicker script
        Bootstrap CSS
        Bootstrap Datepicker CSS
-----------------------
пример (с локализпацией):
<div class="container">
    <div class="row">
        <div class='col-sm-6'>
            <div class="form-group">
                <div class='input-group date' id='datetimepicker2'>     // идентификатор
                    <input type='text' class="form-control" />
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </div>
        </div>

        <script type="text/javascript">                             // скрипт виджета
            $(function () {
                $('#datetimepicker2').datetimepicker({
                    locale: 'ru'
                });
            });
        </script>

    </div>
</div>



jQuery Form Plugin
===================
Форма становится ajax-формой  

-------------------
http://malsup.com/jquery/form/
http://malsup.com/jquery/form/#api
------------------

пример:
------------------
<html> 
<head> 
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.js"></script> 
    <script src="http://malsup.github.com/jquery.form.js"></script>     // ресурс 
    <script> 
        // wait for the DOM to be loaded 
        $(document).ready(function() { 
            // bind 'myForm' and provide a simple callback function 
            $('#myForm').ajaxForm(function() {                          // ajax-submit
                alert("Thank you for your comment!"); 
            }); 
        }); 
    </script> 
</head>



jQuery Cookie
===================

Плагин для работы с Кукки
Заполняет Кукки на стороне Клиента
------------------

http://plugins.jquery.com/cookie/
------------------

туториал
------------------
https://github.com/carhartl/jquery-cookie

    


Теория JQuery
==================
краткое толковое объяснение за 1 час
---------------------------
https://www.youtube.com/watch?v=KmTK8kub_gw

    в 95% случаев используется чистый jQuery
    JS ипользуются только общие правила, назначение переменных, основные события и пр.
    Проще библиотеку(файл) jQuery скачать файликом и поместить локально в проект.
    http://jquery.com -- все там

    jQuery - Библиотека-Надстройка для JS
    --------------------
    Обеспечивает совместимость кода JS с любыми баузерами.

    Пример jQuery
    ----------------------
    знак долара, це jQuery - функція пошуку елемента на сторінці
    за даним селектором

    $("div.test").add("p.quote").addClass("blue").slideDown("slow");
        или лучше
    jQuery("div.test").add("p.quote").addClass("blue").slideDown("slow");

        0) используем бибилотеку jquery   $
	    1) нашли тег div с классом test   ("div.test")
	    2) в него добавили тег параграфа с классом quote   .add("p.quote")
	    3) для параграфа добавили еще класс blue   .addClass("blue")
	    4) добавили эффект развертывания вниз медленно  .slideDown("slow")
        Указанные к коде методы - это ве методы jQuery
    jQury - весь состоит из методов, их дофига, они легче чем чистый JS


    
вот внешняя ссылка на Гугле
===========================
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>



вот все библиотеки под jQuery / Angular / React / на Гугле -- там список
=============================
https://developers.google.com/speed/libraries/#jquery



Библиотеки jQuery
=================
	ссылки на Скрипт и Ресурсы
    --------------------------
	http://www.w3schools.com/jquery/jquery_get_started.asp

    <head>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    </head>
    ---------------------------


	в этом ресурсе есть все, и сылки и выбор серверов, и стаб версии
    --------------------------
	http://jquery.com/download/#jquery-39-s-cdn-provided-by-maxcdn


    https://developers.google.com/speed/libraries/#jquery   -- ссылки на ресурсы
	
	ссылки на скачку
    ----------------
	http://jquery.com/download/#jquery-2-x
	http://jquery.com/download/#jquery-1-x
	http://jqueryui.com/download/

    http://jquery.com/	
	http://jqueryui.com/

================

Остановился тут:
http://learn.javascript.ru/function-declaration-expression#bad-conditional-declaration




Ресурсы Мануалы jQuery
======================
    http://jquery.page2page.ru      // Шпаргалка jQuery / все функции и селекторы jQuery
    http://api.jquery.com           // Полная документация по jQuery
    http://www.w3schools.com/jquery/default.asp         // лучший мануал на Английском
    https://jquery-docs.ru        // русская документация по jquery (переведено не все)    

    
    http://anton.shevchuk.name/jquery-book 
    -------------------------
    реальная Книга по jQuery на русском  -- листать на сайте
        
    jQuery для начинающих Часть 1
    ----------------------   
    http://anton.shevchuk.name/javascript/jquery-for-beginners  --  №1

    jQuery + AJAX + (Google Search API || Yahoo Search API)
    -----------------------------------
    http://anton.shevchuk.name/javascript/jquery-and-google-search-api-or-yahoo-search-api-yahoo-search-api/	
  



============================ Краткий Курс по jQuery =================================
http://jquery.page2page.ru/index.php5/%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B2_jQuery


Шаблон действий:
сначала находите один или несколько элементов страницы, а затем выполняете над ними
некоторые действия, такие как скрытие, изменение размеров, положения, прозрачности и.т.д.

Автор jQuery разработал свою библиотеку таким образом, что наиболее общие задачи становятся
тривиальными. 
Например, вот так, с помощью функции $() из библиотеки, можно находить элементы на странице
по различным параметрам:
$("div")	            // вернет все div-элементы на странице.
$(".someBlock")         // вернет все элементы с классом someBlock.
$("#content")           // 	вернет элемент с идентификатором content.
$("#content2 div.someBlock")    // вернет div-элементы с классом someBlock, которые
                                находятся внутри элемента с идентификатором content2.
$("div:odd")         //	вернет div-элементы, находящиеся на странице под нечетными номерами.
$("[value = 5]")        // 	вернет все элементы (Теги) с атрибутом value, равным 5.


jQuery() или $()
=========================
ссылка на подробную статью
--------------------------
http://jquery.page2page.ru/index.php5/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F_jQuery


$() позволяет привязать всю функциональность jQuery к уже существующим объектам
DOM-элементов:
    // найдем элемент с идентификатором some_id, средствами обычного javascript
    var el = document.getElementById("some_id");        // чистый JS - переменная
    // установим у этого элемента новое значение css-свойства margin
    $(el).css("margin", "5px");                         // чистый jquery


Начало работы Скрипта (кода)
=====================
Прежде чем запускать js-скрипт, необходимо быть уверенным,
что часть страницы, с которой этот скрипт будет работать уже загружена.

$(document).ready( function(){
    // вызов нужных функций скрипта
});


Функция jQuery() / $() позволяет:
    1) производить поиск элементов на странице,
    2) создавать новые элементы по заданному HTML тексту, а так же кое что еще.
    3) Возвращает объект jQuery. 
    Объект jQuery — это javascript-объект, который содержит коллекцию некоторых элементов
страницы, а так же обладает множеством методов для работы с ними.


Пример довольно сложной функции     // js + jquery
-------------------------
$(function() {
        //Зададим функцию, которая будет выполнена в момент готовности объектной модели документа

    jqElements = $("div");
        //Получим объект jQuery представляющий div-элементы на странице    
  
    domElement = elements.get(0);       -- чистый JS
        //Получим DOM-объект первого div-элемента 
  
    jqElement = $(domElement);  
        //по имеющимуся объекту DOM создадим объект jQuery, который его представляет      

    newElement = $("<p>Новый-преновый параграф</p>");
        //Создадим объект jQuery по html-тексту

    jqElement.append(newElement);       -- чистый JS
        //Поместим новый элемент в конец первого div-элемента на странице
});
-------------------------


объект jQuery       -- вся работа функции через объекты
-------------------
$("div")            //	вернет все div-элементы на странице (объект jQuery).
$(".someBlock")     //	вернет все элементы с классом someBlock.    (объект jQuery).
$("#content")	    // вернет элемент с идентификатором content.
$("#content2 div.someBlock")    // 	вернет div-элементы с классом someBlock, которые
                    находятся внутри элемента с идентификатором content2.
$("div:odd")        // вернет элементы, находящиеся на странице под нечетными номерами.
$("#content2 div.someBlock")    //	вернет div-элементы с классом someBlock, которые
                    находятся внутри элемента с идентификатором content2.
$("[value = 5]")    //	вернет все элементы с атрибутом value, равным 5.
$("div", document)	// вернет все div-элементы внутри основного документа.
$("div", frames[0].document)    //	вернет все div-элементы внутри первого фрейма на
                    странице.
$("div", $(".block"))       // вернет все div-элементы, находящиеся внутри элементов с
            классом block (обычно, для этого лучше подойдет конструкция $(".block div")).


Цепочки методов над объектами jquery
====================
Важной особенностью большинства методов jQuery, является возможность связывать их в цепочки.
Методы, манипулирующие элементами документа, обычно возвращают эти объекты для дальнейшего
использования!
Эти цепочки могут состоять из гораздо большего числа методов.
Для удобочитаемости, цепочки часто пишут "в столбик":

$("div")                    // найдем все div-элементы
    .parent()               // найдем их родительские элементы
    .css("heigth", "10px")  // установим последним высоту в 10 пикселей
    .fadeTo(0, 0.5)         // установим им (родителям div'ов) прозрачность в 50%
    .addClass("divOwner");  // добавим им же класс divOwner



Список функций jQuery
Работа с набором элементов объекта jQuery   -- примеры
==========================
$("div").parent()       // вернет родительские элементы всех div-ов. (опять же Объект)
$("div").children()     // вернет дочерние элементы всех div-ов.
$("#someId").next()     // вернет элемент, лежащий сразу после someId.
$("div").prev()         // вернет элементы, лежащие перед div'ами.
$("div").eq(i)          // вернет div-элемент, с индексом i в наборе.
$("div").get(i)         // вернет DOM-объект div'а, с индексом i.
$("div").get()          // вернет массив DOM-объеков всех div-ов.
$("div").size()         // вернет размер набора (количествово div-ов).



Селекторы
==================
Селекторами называют строчные выражения, с помощью которых задаются условия поиска элементов
DOM на странице. Вы можете находить интересующие вас элементы, используя выражения в стиле
CSS 1-3, в дополнении с некоторыми другими возможностями. Селекторы позволяют находить
элементы по различным признакам: значению атрибутов, содержимому элементов, родительским
элементам, дочерним элементам, порядковым номерам, ну и конечно по именам классов,
идентификаторов и/или тегов.

Список селекторов
-----------------
Базовые
-----------------

("*")       // Соответствует всем элементам.
пример:
    $("*")          //	вернет все элементы на странице
    $("div *")      //	вернет все элементы, находящиеся внутри div-элементов на странице.
    $(".rightBlock *")      //	вернет все элементы, находящиеся внутри элементов с классом
                             rightBlock
    $('ul:last *').addClass("result");
                    // для всех объектов (столбцов) последнего элемента списка добавит класс 
    $("div").html($("*").length);   // посчитает количество (длинну массива) элементов 


.className      // Соответствует всем элементам страницы с классом className.
                Селектор по классу является одним из наиболее востребуемых средств jQuery.

примеры:
    $('.someBlock')
	вернет все элементы с классом someBlock.
    $('div.someBlock')
	вернет все div-элементы с классом someBlock.
    $('div.someBlock:odd')
	вернет все нечетные div-элементы с классом someBlock.
    $('#content2 div.someBlock')
	вернет div-элементы с классом someBlock, которые находятся внутри элемента с
    идентификатором content2.
Для поиска элементов по классу, библиотека jQuery использует нативную javascript-функцию
getElementsByClassName() (если ее поддерживает браузер).    

    Один элемент страницы может обладать несколькими классами одновременно.
    Найти такой элемент можно по любому из классов.

    Чтобы найти элемент, который обладает двумя (или более) классами одновременно,
    нужно перечислить их без пробела:
    <script>
    var leftBoxElements = $('.leftBox.commentBox');  // 2 класса в элементе тега
    </script>


#idName     // Соответствует элементу с идентификатором idName. Селектор по идентификатору
            является одним из наиболее востребованных средств jQuery.
пример:
    $('#someId')
    возвратит элемент (один) с идентификатором someId.
    $('#someId div')
	вернет все div-элементы, находящиеся внутри элемента с идентификатором someId.
    $('#luna').css('border','3px solid red');
    к элементу по id применяет стили css
Для поиска элемента по идентификатору jQuery использует нативную javascript функцию
document.getElementById(), из за этого поиск выполняется очень быстро.


Комбинированные селекторы
-------------------------

("first, second, ...")      // Соответствует элементам, удовлетворяющим хотя бы одному
                            из селекторов (first, second, ...).
пример (и/и):
    $('div, span')
	вернет все div и span элементы.
    $('div, .lBlock, #footer')
	вернет набор из div-элементов, элементов с классом lBlock и элемента
    с идентификатором footer.
Для объединения результатов работы разных селекторов можно так же воспользоваться методом .add():
    // использование add оправдано например случае
    $("div")                    // найдем все div-элементы
        .css("color", "red")    // установим div'ам красный цвет текста
        .add(".lBox")           // добавим в набор элементы с классом lBox
        .fadeTo(0, 0.5);        // установим прозрачность в 50% всем div'ам и элементам
                                класса lBox


("outer inner")     // (снаружи/внутри) Соответствует элементам удовлетворяющим селектору
                    inner, которые являются потомками (лежат внутри) элементов,
                    удовлетворяющих селектору outer. В отличии от дочернего селектора
                    (outer > inner), с помощью которого производится поиск элементов только
                    на первом уровне вложенности в outer, нисходящий селектор задает поиск
                    на всех уровнях вложенности.
примеры:
    $('div span')
	вернет все span-элементы, которые лежат внутри элементов div.
    $('div .lBlock .line')
	вернет элементы с классом line, лежащие в элементах класса lBlock, которые в свою
    очередь находятся внутри div-элементов.
    $('#foot *')	вернет все элементы, лежащие внутри элемента с идентификатором foot.
    $('ul:eq(1) *').addClass('result');
    вернет с добавлением класса на все элементы (ячейки) 2 строки в списке


("parent > child")  // Соответствует элементам, удовлетворяющим селектору child, которые
                    при этом являются дочерними (т.е. находятся на первом уровне
                    вложенности) для элементов, удовлетворяющих селектору parent. (В
                    отличие от него, селектор (E F) позволяет искать элементы на всех
                    уровнях вложенности).
примеры:
    $('div > span')	
    вернет все span-элементы, которые лежат непосредственно внутри div-элементов.
    $('div > .lBlock')
	вернет элементы с классом lBlock. которые лежат непосредственно внутри div-элементов.


("prev + next")     // Соответствует элементам, удовлетворяющим селектору next и
             расположены непосредственно за элементами, удовлетворяющими селектору prev.
примеры:
    $('div + span')
	вернет span-элементы, которые расположены непосредственно за div-элементами.
    $('div + .lBlock')
	вернет элементы с классом lBlock, которые расположены непосредственно за div-элементами.
    $('#foot + *')
	вернет элемент, находящийся за элементом с идентификатором foot.
Помимо селектора ("prev + next") существует еще ("prev ~ next"). Он возвращает не только
непосредственные элементы, расположенные после prev, а все элементы, расположенные после
prev. 


("prev ~ next")     // Соответствует тем элементам, удовлетворяющим селектору next, которые
                    расположены после элементов, удовлетворяющих селектору prev.
примеры:
    $('div ~ span')
	вернет все span-элементы, которые следуют за div-элементами.
    $('div ~ .lBlock')
	вернет элементы с классом lBlock, которые следуют за div-элементами.
    $('#foot ~ *')
	вернет элементы, следующие за элементом с идентификатором foot.


Селекторы по атрибутам
----------------------

[attributeName]     // Соответствует всем элементам, которые имеют атрибут attributeName.
                    При этом, не важно, какие им заданы значения.
примеры:
    $('[title]')
	вернет все элементы, содержащие атрибут title
    $('div [title]')
	вернет все элементы с атрибутом title, которые находятся внутри div-элементов
    $('div[title]')
	вернет все div-элементы с атрибутом title (наличие пробела между селекторами имеет значение!)
    $('div[title]:first')
	вернет первый div-элемент, содержащий атрибут title
Все элементы, которые имеют аттрибут id будут обведены красной рамкой:
$('[id]').css('border', '3px solid red');


[attribute = value]     // Соответствует всем элементам с атрибутом attribute равным value.
        Если value состоит из нескольких слов, между которыми есть пробелы, то нужно
        заключать value в кавычки. Если value не содержит пробелов — кавычки не обязательны.
примеры:
    $('[cellspacing = 5]')
	вернет все элементы (очевидно таблицы), с параметром cellspacing равным 5.
    $('[class = content]')
	вернет все элементы, с классом content (См замечание 1).
    $('[title = "два слова"]')
	вернет массив всех элементов с атрибутом title равным "два слова". Отметим, что если
    значение атрибута содержит более одного слова, то необходимо использовать кавычки.
Все элементы, которые имеют подсказку (аттрибут title) с текстом "Не влезай - убьет"
будут окрашены в желтый цвет с красными рамками:
$('[title="Не влезай - убьет"]')
  .css({'border':'3px solid red', 'background-color': '#ffcc00'});


[attribute != value]    // Соответствует всем элементам, у которых значение атрибута
        attribute не равно value. Если value состоит из нескольких слов, между которыми
        есть пробелы, то нужно заключать value в кавычки. Если value не содержит пробелов —
        кавычки не обязательны.
примеры:
    $('[cellspacing != 5]')
	вернет все элементы (очевидно таблиц), с параметром cellspacing не равным 5
    $('[class != bomb]')
	вернет все элементы, классы которых не равны bomb
    $('[title != "два слова"]')
	вернет все элементы с атрибутом title, не равным строке "два слова". Обратите внимание,
    что если значение атрибута содержит более одного слова, то необходимо использовать
    кавычки.
// сузим круг поиска до всех элементов с классом some-hint
// и уже среди них найдем те элементы, у которых title не равен строке 'не задано'
$( '.some-hint' ).filter( '[title!="не задано"' );
//
Добиться такого же результата можно с помощью метода .not()
$( '.some-hint' ).not( '[title="не задано"' );


[attribute ^= value]    // Соответствует всем элементам, у которых значение атрибута
        attribute начинается с value. Если value состоит из нескольких слов, между которыми
        есть пробелы, то нужно заключать value в кавычки. Если value не содержит пробелов —
        кавычки не обязательны.
примеры:
    $('[class ^= pre]')
	вернет все элементы с классами, начинающимися с pre (например prevulcanization).
    $('[class ^= pre]:not(div)')
	вернет все элементы с классами, начинающимися с pre и при этом не являющихся
    div-элементами.
$('[value ^= "мазерфакер"]').after( '<b> — Прекратите сквернословить!</b>' );


[attribute $= value]    // Соответствует всем элементам, у которых значение атрибута
        attribute заканчивается на value. Если value состоит из нескольких слов, между
        которыми есть пробелы, то нужно заключать value в кавычки. Если value не содержит
        пробелов — кавычки не обязательны.
примеры:
    $('[class $= box]')
	вернет все элементы с классами, заканчивающимися на box (например litebox).
    $('[class $= box]:parent')
	вернет все элементы, которые имеют потомков с классами, заканчивающимися на box.
$('[name $= "green"]').val( "Экологически чистый объект" ).addClass("noGMO")


[attribute *= value]    // Соответствует всем элементам, у которых значение атрибута
        attribute содержит value. Если value состоит из нескольких слов, между которыми
        есть пробелы, то нужно заключать value в кавычки. Если value не содержит пробелов —
        кавычки не обязательны.
примеры:
    $('[class *= "_"]')
	вернет все элементы с названиями классов, содержащими подчеркивание (например a_class).
    $('[class *= "_"]:hidden')
	вернет все невидимые элементы, у которых названия классов, содержат подчеркивание.
$('[name *= "man"]').val( 'Текстовое поле для настоящих мужчин' ).addClass( 'mans' );


[attribute ~= value]    // Соответствует всем элементам с атрибутом attribute, содержащим
        слово value (именно слово, а не просто подстроку. То есть вхождение value должно
        содержать с обоих сторон разделители: пробелы или начало/конец строки).
        Если value состоит из нескольких слов, между которыми есть пробелы, то нужно
        заключать value в кавычки. Если value не содержит пробелов — кавычки не обязательны.
примеры:
    $('[value ~= "веб"]')
	вернет все элементs, у которых значение атрибута value содержит слово 'веб'.
    $('[value ~= "веб"]:last')
	вернет последний элемент, у которого значение атрибута value содержит слово 'веб'.
$('[value ~= аметисовый]').css('background-color', '#9966cc');


[ first ][ second ][...     // Соответствует элементам, удовлетворяющим всем заданным
                            условиям на атрибуты (first, second, ...).
примеры:
    $('[id][name = "man"]')
	вернет все элементы, у которых задан id, а атрибут name равен 'man'.
    $('[id][name = "man"][value != "linda"]')
	вернет все элементы, у которых задан id, атрибут name равен 'man' и value не равно 'linda'.


Простые фильтры
-----------------

someSelector:focus  // Соответствует тому из выбранных с помощью селектора someSelector
                    элементов, который находится в фокусе.
примеры:
    $("input:focus")
	вернет input-элемент, находящийся в фокусе.
    $("input[type='text']:focus")
	вернет текстовое поле ввода, находящееся в фокусе.
Замечание: не стоит использовать :focus без предваряющего его селектора (т.е. просто
$(":focus")), это равносильно $("*:focus"), а селектор "*" является наиболее "медленным"
из селекторов


someSelector:first  // Соответствует первому элементу, из всех выбранных с помощью
                    селектора someSelector. Эквивалентен селектору :eq(0).
примеры:
    $('div:first')
	вернет первый div-элемент на странице.
    $('.lBox:first')
	вернет первый элемент с классом lBox.
    $('div[title]:first')
	вернет первый div-элемент содержащий атрибут title.
для улучшения производительности рекомендуется в начале сузить круг искомых элементов, 
и уже среди них выбрать первый элемент, воспользовавшись методом .filter():
    $( '.some-hint' ).filter( ':first' );
    $('.village .man:first').css('border', '3px solid red');


someSelector:last   // Соответствует последнему элементу, из всех выбранных с помощью
                    селектора someSelector.
примеры:
    $('div:last')
	вернет последний div-элемент на странице.
    $('.lBox:last')
	вернет последний элемент с классом lBox.
    $('div[title]:last')
	вернет последний div-элемент содержащий атрибут title.
для улучшения производительности рекомендуется в начале сузить круг искомых элементов,
и уже среди них выбрать последний элемент, воспользовавшись методом .filter():
    $( '.some-hint' ).filter( ':last' );
    $('.village .man:last').css('border', '3px solid red');


someSelector:eq(index)      // Соответствует элементу, занимающему позицию под номером
                index, среди уже выбранных с помощью селектора someSelector элементов.
                Нумерация элементов начинается с 0.
Начиная с jQuery-1.8, можно выбирать элементы с конца, указывая отрицательный index. -1
— последний элемент, -2 — предпоследний и т. д. Отметим, что одноименный метод — .eq()
может принимать отрицательные значения во всех версиях jQuery.
примеры:
    $('div:eq(0)')
	вернет первый div-элемент на странице.
    $('div:eq(-1)')
	вернет последний div-элемент на странице (будет работать начиная с jQuery-1.8).
    $('div p:eq(1)')
	вернет второй параграф, лежащий внутри div-элемента на странице.
    $('div p.box:eq(1)')
	вернет второй параграф с классом box, лежащий внутри div-элемента на странице.    
вместо селектора :eq() более эффективно будет использовать одноименный метод .eq():
$('someSelectors').eq(index);


:not(selector)      // Исключает элементы удовлетворяющие селектору selector из найденных
                    элементов.
    $('div:not(.lBox)')
	вернет все div-элементы, кроме тех, которые принадлежат классу lBox.
    $('div:not(#bigBang)')
	вернет все div-элементы, кроме элемента с идентификатором bigBang.
    $('input[id]:not([type=text])')
	вернет все input-элементы с заданным идентификатором, кроме текстовых полей.
Метод .not() выполняет то же самое, что и рассматриваемый селектор, и чаще всего, при
его использовании, код получается более читаемым, чем при использовании селектора :not().
    $('.rissole:not(:has(.fly))').css('border', '3px solid red');


:even       // Соответствует элементам с четными номерами позиций, в наборе выбранных
        элементов.(вариант с нечетными — :odd). Поскольку счет элементов начинается с
        0, :even будет соответствовать первому, третьему и т. д. элементам.
пример:
    $('.lBox:even')	вернет все четные элементы, с классом lBox.
для улучшения производительности рекомендуется в начале найти базовые элементы, и уже к этому набору применить фильтрующую функцию .filter() с этим селектором:
    $( '.some-hint' ).filter( ':even' );
    
    $("#list .item:even").append(" четный!").css("background-color", "#cceecc");
    $("#list .item:odd").append(" нечетный!").css("background-color", "#eeeeee");


:odd    // Соответствует элементам с нечетными номерами позиций, в наборе выбранных
        элементов. (вариант с четными — :even). Поскольку счет элементов начинается с
        0, :odd будет соответствовать второму, четвертому и т. д. элементам.
пример:
    $(".lBox:odd")
	вернет все нечетные элементы, принадлежащие классу lBox.
для улучшения производительности рекомендуется в начале найти базовые элементы, и уже к
этому набору применить фильтрующую функцию .filter() с этим селектором:
    $( '.some-hint' ).filter( ':odd' );


:gt(n)      // Фильтрует набор выбранных элементов, оставляя только те, индекс которых
            превышает n. Не забывайте, что индексирование начинается с 0.
индекс внутри селектора :gt(n) может быть задан отрицательным числом. В этом случае он
будет рассматриваться как порядковый номер с конца: -1 — последний элемент, -2 —
предпоследний и т. д.
примеры:
    $('.lBox:gt(3)')
	вернет все элементы, принадлежащие классу lBox, кроме первых четырех.
    $('.lBox:gt(-3)')
	вернет последние два элемента с классом lBox.
Оптимизация:
    // не самый быстрый вариант
    $( '.some-hint:gt( 5 )' );
    // эффективнее будет
    $( '.some-hint' ).slice( 5 );


:lt(n)      // Фильтрует набор выбранных элементов, оставляя только те, индекс которых
            меньше n. Не забывайте, что индексирование начинается с 0.
Начиная с jQuery-1.8 индекс внутри селектора :lt(n) может быть задан отрицательным числом.
В этом случае он будет рассматриваться как порядковый номер с конца: -1 — последний
элемент, -2 — предпоследний и т. д.
примеры:
    $('.lBox:lt(3)')	вернет первые три элемента (с индексами 0, 1, 2) с классом lBox.
    $('.lBox:lt(-3)')	вернет все элементы с классом lBox, кроме последних трех.
но:
    // не самый быстрый вариант
    $( '.some-hint:lt( 5 )' );
    // эффективнее будет
    $( '.some-hint' ).slice( 0, 5 );


:header     // Соответствует элементам, которые являются заголовками (h1, h2, ...).
Примеры использования:
    $('.lBox:header')	вернет все элементы класса lBox, которые являются заголовками.
    $('.lBox :header')	вернет все заголовки, находящиеся внутри элементов класса lBox.
    Этот пример подчеркивает то, что наличие пробела перед фильтрами существенно.
для улучшения производительности рекомендуется в начале сузить круг искомых элементов
(по классу например), и уже среди них искать заголовки с помощью .filter():
    // сузим круг поиска заголовков, до всех элементов с классом some-hint
    // и уже среди них найдем элементы, являющиеся заголовками
    $( '.some-hint' ).filter( ':header' );


:animated       // Соответствует элементам, которые в данный момент участвуют в анимации.
Примеры использования:
    $('.lBox:animated')
	вернет все элементы класса lBox, которые в данный момент участвуют в анимации.
    $('div.lBox:animated')
	вернет все div-элементы класса lBox, которые в данный момент участвуют в анимации.
но оптимальнее:
    // сузим круг поиска анимированных элементов до всех элементов с классом some-hint
    // и уже среди них найдем анимированные в данный момент элементы
    $( '.some-hint' ).filter( ':animated' );


:hidden     // Соответствует всем скрытым элементам страницы. Элемент считается скрытым в
            следующих случаях:
    - Его css-свойство display равно none
    - Он является элементом формы с type="hidden"
    - Его высота или ширина равна 0
    - Он находится внутри невидимого элемента и поэтому тоже невидим на странице.
Примеры использования:
    $('.lBox:hidden')	вернет все невидимые элементы класса lBox.
    $('.lBox :hidden')	вернет все невидимые элементы, которые лежат внутри элементов
    класса lBox. Этот пример подчеркивает то, что наличие пробела перед фильтрами существенно.
но оптимальнее:
    // сузим круг поиска скрытых элементов до всех элементов с классом some-hint
    // и уже среди них найдем скрытые в данный момент элементы
    $( '.some-hint' ).filter( ':hidden' );


:visible    // Соответствует всем видимым элементам страницы. Элемент считается невидимым
            в следующих случаях:
    - Его css-свойство display равно none
    - Он является элементом формы с type="hidden"
    - Его высота или ширина равна 0
    - Он находится внутри невидимого элемента и поэтому тоже невидим на странице.
Примеры использования:
    $(".lBox:visible")	вернет все видимые элементы класса lBox.
    $(".lBox :visible")	вернет все видимые элементы, которые лежат внутри элементов класса
        lBox. Этот пример подчеркивает то, что наличие пробела перед фильтрами существенно.


:lang(language)     // Соответствует элементам, в которых указан подходящий язык
                    содержимого. В параметре language указывается код языка. 
Если указать в селекторе, например английский язык — en, то будут найдены все элементы, в
которых указан английский язык, а так же его подвиды, например американский английский
 — en-us. Подобным образом дела будут обстоять и с другими языками.
Примеры использования:
    $('div:lang(en-us)')
	вернет все элементы в которых указан американский английский язык.
    $('a:lang(en)').css('border-bottom', '3px dotted green');


:root   // Соответствует корневому элементу в документе. В HTML-документе, такой элемент
        всегда html.


Фильтры по содержимому
=======================

:contains(text)     // Соответствует элементам, которые содержат строку text.
                    Чувствителен к регистру.
Примеры использования:
    $('div:contains("Петр")')
	вернет все div-элементы, внутри которых найдется строка Петр.
С помощью селектора :contains(text), элемент будет выбран как в случае если строка text
присутствует непосредственно внутри него, так и в случае, если она находится внутри одного
из его потомков.
    $('div:contains("мистер")').css('border', '1px solid red');


:empty      // Соответствует элементам, которые не содержат текста и других элементов.
            Наличие одного только пробела уже считается текстом
Примеры использования:
    $('div:empty')	    // вернет все пустые div-элементы.
    $('td:empty')       // выберет пусую ячейку таблицы
    .text('Пусто')      // добавит в нее текст
    .css('background', 'rgb(255,220,200)');     // изменит css свойтсва


:has(selector)      // Соответствует элементам, которые обладают потомками,
                    удовлетворяющими селектору selector.
Примеры использования:
    $('div:has(p)')
	вернет div-элементы, внутри которых есть элементы с тегом p.
    $('#content div:has(p)')
	вернет div-элементы, находящиеся внутри элемента с идентификатором content и внутри
    которых есть элементы с тегом p.
но:
    // не самый быстрый вариант
    $( '.some-hint:has(a)' );
    // эффективнее будет
    $( '.some-hint' ).has( 'a' );


:parent     // Соответствует всем непустым элементам. Наличие одного только пробела уже
            будет считается наличием содержимого.
Примеры использования:
    $("div:parent")
	вернет все непустые div-элементы.
но:
    // не самый быстрый вариант
    $( '.some-hint:parent' );
    // эффективнее будет
    $( '.some-hint' ).filter(':parent');






пока тут остановился, потом продолжу:
http://jquery.page2page.ru/index.php5/%D0%AD%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%D1%8B_%D1%81_%D0%B8%D0%BD%D0%B4%D0%B5%D0%BA%D1%81%D0%BE%D0%BC_%D0%BF%D0%BE%D1%81%D0%BB%D0%B5_n







Список функций
=====================
Перемещения по дереву DOM   / вернее выборка массива объектов ?
--------------------

!!!!!
Вообще, для того, чтобы к элементам можно было применять методы библиотеки jQuery,
они должны находиться в так называемом объекте jQuery, именно его возвращает функция $().
!!!!!


.children()     // Возвращает все дочерние элементы выбранных элементов. 
                При необходимости, можно указать селектор selector для фильтрации результата.
пример:
    $("div").children(".bigBlock")
	вернет элементы класса bigBlock, которые лежат непосредственно внутри div-элементов.


.closest()      // Для каждого из выбранных элементов, closest() будет искать ближайший
                подходящий элемент из числа следующих: сам выбранный элемент, его родитель,
                его прародитель, и так далее, до начало дерева DOM. 
пример:
    $("#lBlock").closest("div")	
    будет искать первый div-элемент среди элемента с id = lBlock и всех его предков.


.find()         // Осуществляет поиск элементов внутри уже выбранных элементов.
                Метод имеет три вариант использования:
пример:
    .find(selector)         (1)
    .find(jQuery object)    (2)
    .find(element)          (3)
    $("div").find("span")                   (1)
        вернет все элементы span, находящиеся внутри div-элементов.
    $("div").find(".bigBlock")              (2)
    	вернет все элементы с классом bigBlock, находящиеся внутри div-элементов.
    $("div").find( $(".bigBlock") )         (3)
        вернет все элементы с классом bigBlock, находящиеся внутри div-элементов.


.next()         // Осуществляет поиск элементов, лежащих непосредственно после заданных
                элементов (по одному для каждого из заданных).
пример:
    $("div").next()
	вернет элементы, которые находятся непосредственно после div-элементов на странице.
    $("div").next(".bigBlock")
	вернет элементы класса bigBlock, которые находятся непосредственно после div-элементов.


.nextAll()      // Осуществляет поиск всех элементов, лежащих после заданных элементов.
пример:
    $("div").nextAll()
	вернет элементы, которые находятся после div-элементов на странице.
    $("div").nextAll(".bigBlock")
	вернет элементы класса bigBlock, которые находятся после div-элементов.
    $("#lArea").nextAll(".lBlock")
	вернет элементы класса lBlock, которые находятся после элемента с идентификатором lArea.


.nextUntil()    // Осуществляет поиск всех элементов, лежащих начиная от одних заданных
                элементов и заканчивая другими. 
пример:
    $("div").nextUntil(".lBlock")
	вернет элементы, которые находятся после каждого div-элемента на странице,
    но не дальше первого элемента с классом lBlock.


.offsetParent()     // Возвращает ближайшего предка (т.е. из числа: родитель, прародитель,
                    и так далее, до начало дерева DOM), у которого задан тип
                    позиционирования (position равен relative или absolute или fixed).
                    Элементы с заданным позиционированием играют особую роль, поскольку
                    именно относительно них происходит позиционирование всех элементов
                    внутри.
пример:
Метод не имеет параметров.


.parent()       // Осуществляет поиск родительских элементов всех заданных элементов.
пример:
    $("#block").parent()
    вернет родителя элемента с идентификатором block.
    $("div").parent()
	вернет родительские элементы всех div-ов.
    $("div").parent(".lBlock")
	вернет элементы класса lBlock, которые являются родительскими для div-элементов
    на странице.


.parents()      // Осуществляет поиск всех предков выбранных элементов, то есть, не только
                прямых родителей, но и прародителей, прапрародителей и так далее, до начало
                дерева DOM.
пример:
    $("#block").parents()
    вернет всех предков элемента, имеющего идентификатор block.
    $("div").parents()
	вернет всех предков для div-элементов на странице.
    $("div").parents(".lBlock")
	вернет всех предков класса lBlock, для div-элементов на странице.


.parentsUntil()     // Осуществляет поиск всех предков у выбранных элементов (то есть, не
                    только прямых родителей, но и прародителей, прапрародителей и так далее,
                    до начало дерева DOM), вплоть до определенного элемента. 
пример:
    $("#block").parentsUntil(".lBlock")
	вернет всех предков элемента, имеющего идентификатор block, вплоть до элемента
    с классом lBlock.


.prev()         // Для каждого из выбранных элементов находит предшествующий ему элемент
                (но только если он лежит на том же уровне иерархии DOM).
пример:
    $("div").prev()
	вернет элементы, которые находятся непосредственно перед div-элементами на странице.
    $("div").prev(".bigBlock")
	вернет элементы класса bigBlock, которые находятся непосредственно перед div-элементами.


.prevAll()      // Осуществляет поиск всех элементов, лежащих перед заданными элементами.
пример:
    $("div").prevAll()
	вернет элементы, которые находятся перед div-элементами на странице.
    $("div").prevAll(".bigBlock")
	вернет элементы класса bigBlock, которые находятся перед div-элементами.
    $("#lArea").prevAll(".lBlock")
	вернет элементы класса lBlock, которые находятся перед элементом с идентификатором lArea.


.prevUntil()    // Осуществляет поиск всех элементов, лежащих начиная от одних заданных
                элементов и заканчивая другими. 
пример:
    $("div").prevUntil(".lBlock")
	найдет элементы, которые находятся перед каждым div-элементом на странице, но не дальше
    элемента с классом lBlock.


.siblings()     // Осуществляет поиск элементов, являющихся соседними для выбранных
                элементов (под соседними понимаются элементы, которые имеют общего
                родителя). При этом, сами выбранные элементы в результат не включаются.
пример:
    $("#block").siblings()
	найдет элементы, которые имеют общего родителя, с элементом, обладающим идентификатором
    block.
    $(".lBlock").siblings()
	найдет элементы, которые имеют общих родителей, с элементами класса lBlock
    $(".lBlock").siblings(".cont")
	найдет элементы класса cont, которые имеют общих родителей, с элементами класса lBlock



Фильтрация набора Элементов
===========================

.eq()       // Возвращает элемент, идущий под заданным номером в наборе выбранных элементов.

    Отметим различия методов get(i) и eq(i). Первый возвращает непосредственно DOM-объект
    элемента, идущего под номером i в наборе (кстати, нумерация начинается с 0).
    К такому элементу вы не сможете применить методы jQuery, зато сможете применить
    стандартные javascript методы. Метод eq(i) наоборот, возвращает i-й элемент в таком
    виде, что к нему можно применять методы jQuery.
пример:
    $("div").eq(0)	
    вернет первый div-элемент на странице.
    $("div").eq(-1)
	вернет последний div-элемент на странице.
    $("div.lBlock").eq(5)
	вернет шестой по счету div-элемент с классом lBlock.


.filter()       // Фильтрует набор выбранных элементов.
пример:
    $("div").filter(".lBlock")
    вернет div-элементы с классом lBlock.
    $("div").filter(filterDivs)
	вернет div-элементы, "одобренные" функцией filterDivs.
    Эта функция вызывается отдельно, для каждого из выбранных элементов.
    Если она возвращает true, то текущий элемент будет включен в конечный результат.
    Сами элементы доступны в функции, в переменной this, а их порядковые номера в наборе —
    в переменной index.


.first()        // Возвращает первый элемент из всех выбранных. Эквивалентно .eq(0)
пример:
    $("div").first()
	вернет первый div-элемент на странице.
    $("div.bigBlock").first()
	вернет первый div-элемент с классом bigBlock.


.has()      // Фильтрует набор выбранных элементов, оставляя только те, которые имеют
            определенных потомков. Метод имеет два варианта использования.
пример:
    
    $("div").has("p")
    вернет div-элементы, внутри которых есть элементы p (параграфы).
    $("div").has(".lBlock")
	вернет div-элементы, внутри которых есть элементы с классом lBlock.
    $(.lBlock).has("div")
	вернет с классом lBlock, внутри которых есть div-элементы.
    

.is()       // Проверяет, соответствует ли хотя бы один из выбранных элементов определенному
            условию (оно зависит от заданного параметра: если задан селектор, то условием
            будет соответствие селектору; если задан объект jQuery, то условие — наличие в
            нем выбранных элементов; при передаче в .is() элемента DOM, будет проверяться
            его наличие среди выбранных элементов; и наконец если указать в качестве
            параметра функцию, то проверка условия будет возложена на нее). Возвращает
            значение типа boolean (true или false). Метод имеет четыре варианта
            использования.      //  true/false
пример:
    .is(selector)       (true/false)
    Проверяет, удовлетворяет ли заданному селектору хотя бы один из выбранных элементов.
    .is(jQuery object)
    Проверяет, есть ли среди выбранных элементов, хотя бы один из элементов заданного
    объекта jQuery.
    .is(elem)
    Проверяет, есть ли среди выбранных элементов, элемент elem (задается объектом
    DOM-элемента).
    .is(function(index))
    для каждого из выбранных элементов, будет вызываться заданная функция. В качестве
    параметра, она будет получать номер позиции элемента в в наборе, сам элемент будет
    доступен в переменной this. Функция должна возвращать true или false. Если хотя бы на
    одном из выбранных элементов будет возвращено значение true, то .is() тоже вернет true.
    Иначе, метод .is() возвратит false
    $("div").is(".lBlock")
	проверит, имеется ли на странице div-элемент(ы) с классом lBlock.
    $(".lBlock").is("#area")
	проверит, имеется ли среди элементов с классом lBlock, элементы с идентификатором area.

Логические примеры:
    // проверяет, соответствие хотя бы одного div-элемента заданному селектору
    if($("div").is("selector"))
    // проверяет, соответствие всех div-элементов заданному селектору
    if(!$("div").is(":not(selector)"))


.last()     // Возвращает последний элемент из всех выбранных. Эквивалентно .eq(-1).
пример:
    $("div").last()	
    вернет последний div-элемент на странице.
    $("div.bigBlock").last()
	вернет последний div-элемент с классом bigBlock.


.not()      // Фильтрует набор выбранных элементов, исключая из него определенные элементы. 
пример:
    $("div").not(".bigBlock")
	вернет div-элементы не имеющие класса bigBlock.
    $("div.bigBlock").not("#area")
	вернет div-элементы класса bigBlock, без идентификатора area.


.slice()    // Фильтрует набор выбранных элементов, оставляя только те элементы, чьи индексы
            лежат в определенной области (например от 0 до 5).  --   срезы
    Возвращает элементы с индексами от start до end, если последний задан или до конца, если
    параметр end опущен. Элементы с индексом start включаются в результат, а end нет
    (т.е. .slice(3,5) вернет элементы, идущие под номером 3 и 4, элемент с номером 5 включен
    не будет). Кроме этого, параметры могут быть заданы в форме отрицательных чисел, в таком
    случае, отсчет элементов идет с конца набора: -1 – последний элемент, -2 – предпоследний
    элемент и т.д.
пример:
    $("div").slice(3)
	вернет все div-элементы, начиная с четвертого (с индексами 3, 4, ...).
    $("div").slice(3, 5)
    вернет div-элементы с индексами 3 и 4.
    $("div").slice(-4, -2)
	вернет div-элементы, идущие четвертым и третьим с конца.
    $("div").slice(-2)
	вернет предпоследний и последний div-элементы на странице.


Обход набора Элементов
======================
.each()     // Выполняет заданную функцию для каждого из выбранных элементов в отдельности.
            Это дает возможность обрабатывать выбранные элементы отдельно друг от друга. 
            .each(callback(index, domElement))

    Рассмотрим отдельно метод .each(), предназначенный для поэлементной обработки набора.
    В качестве параметра, этот метод принимает пользовательскую функцию, которая будет
    автоматически вызвана, для каждого элемента набора.

    В отличие от схожего метода .map(), который возвращает заново сформированный набор
    различных элементов и объектов, метод .each() возвращает исходный набор элементов.

пример:
    var heights = [];       // переменная, которая будет хранить высоты элементов
    $("div").each(function(indx, element) {
        heights.push($(element).height());
    });
    // в итоге, в переменную heights будут помещены значения высот всех div-элементов    

    Нужно отметить, что переменная this, внутри функции callback, будет хранить то же самое
    значение, что и второй параметр domElement, который в нее передается. Таким образом,
    предыдущий пример мог выглядеть следующим образом:
    
    var heights = [];     // переменная, которая будет хранить высоты элементов
    $("div").each(function(indx) {
        heights.push($(this).height());
    });
    // в итоге, в переменную heights будут помещены значения высот всех div-элементов


Это пока сложно! :)
.map()      // Выполняет заданную функцию для каждого из выбранных элементов в отдельности.
            Значения, полученные в результате выполнения этой функции образуют новый набор в
            виде объекта jQuery, именно его и возвращает метод map
            .map(callback(index, domElement))
            Выполняет функцию callback для каждого из выбранных элементов. В callback
            передаются 2 параметра: номер элемента в наборе и сам элемент 
            (в виде объекта DOM).
    Обычно, объект jQuery представляет группу элементов страницы, однако, метод map
    возвращает объект jQuery, включающий в себя величины любых типов javascript: объектов,
    строк, чисел, функций и.т.д. Применение стандартных методов к такому нестандартно
    укомплектованному объекту может вызвать ошибки выполнения, поэтому надежнее будет
    конвертировать его в массив, например с помощью метода .get().
пример:
    Найдем классы всех div-элементов на странице:
    var classes = $("div").map(function(indx, element){
        return $(element).attr("class");
    });

    в результате, переменной classes будет присвоен объект jQuery, содержащий список всех
    классов у div-элементов. Однако, поскольку объект jQuery плохо подходит для хранения
    чего-либо, кроме элементов страницы, правильнее будет конвертировать его в массив:
    var arr = classes.get();

    В следующем примере, найдем предков второго уровня у всех элементов с классом box (т.е.
    родителей их родителей):
    var nonno = $(".box").map(function(indx, element){
        return $(element).parent().parent();
    });
    Поскольку результатом работы функции будет список элементов страницы, конвертировать
    его в массив не нужно.



Другие методы для объектов jQuery
====================

.add()      // Добавляет заданные элементы в уже существующий набор элементов.
пример:
    .add(selector)
    Добавляемые элементы ищутся на странице с помощью заданного селектора selector.
    .add(elements)
    Добавляемые элементы задаются одним или несколькими (массивом) DOM-элементами.
    .add(html)
    Добавляемые элементы задаются html-текстом.
    .add(selector, context)
    Добавляемые элементы ищутся на странице с помощью заданного селектора selector,
    внутри области, заданной параметром context. Область поиска может быть задана
    DOM-элементом, jQuery-объектом или объектом документа.

    $("div")                    // найдем все div-элементы
        .css("color", "red")    // установим div'ам красный цвет текста
        .add(".lBox")           // добавим в набор элементы с классом lBox (jQuery объект)
        .fadeTo(0, 0.5);        
                        // установим прозрачность в 50% всем div'ам и элементам класса lBox


.andSelf()  // Добавляет элементы из предыдущего набора, к текущему (речь идет об одной
            цепочке методов). Под предыдущим набором подразумевается набор элементов,
            который можно получить с помощью метода .end(). 
пример:
    $("div")            // найдем все div-элементы  (объект №1)
        .parent()       // найдем все родительские элементы у div'ов (объект №2)
        .andSelf();     // добавим к родительским элементам, div-элементы
                        (к Объекту №2 добавлен Объект №1)

    $("div")                    // найдем все div-элементы
        .css("color", "red")    // установим div'ам красный цвет текста
        .parent()               // найдем все родительские элементы у div'ов
        .andSelf()              // объединим родительские элементы с div'ами
        .fadeTo(0, 0.5);        // установим прозрачность в 50% всем div'ам и их родителям


.contents()     // Возвращает все дочерние элементы выбранных элементов, а так же текстовое
                содержимое. 
        
                В отличие от схожего метода .children(), в этом методе, в результат будут
                включены блоки текста, лежащие непосредственно внутри выбранных элементов.
                Например, для страницы, содержащей следующий html-текст
пример:
    Например, для страницы, содержащей следующий html-текст
    <div class="text">
        Текст в начале
        <p>
            Текст в параграфе
        </p>
    Текст в конце
    </div>

    эти два метода вернут различный результат:
    $(".text").children().each(function(){
    alert($(this).text());
    });
        // в результате, на экране появится одно сообщение: "Текст в параграфе"
 
    $(".text").contents().each(function(){
    alert($(this).text());
    });
        // в результате, на экране появится три сообщения: "Текст в начале", 
        "Текст в параграфе", "Текст в конце"


.end()      // Возвращает предыдущий набор элементов в текущей цепочке методов. 
пример:
    $("div")                        // найдем все div-элементы
        .css("border", "1px solid red")         // установим div'ам красные рамки
        .parent()                               // найдем все родительские элементы у div'ов
        .css("heigth", "10px").fadeTo(0, 0.5)   
                                    // произведем манипуляции с родительскими элементами
        .end()                      // вернемся обратно к набору div-элементов
        .find(".lBox")              // найдем внутри div'ов элементы с классом lBox
        .css("color", "green");     // установим зеленый цвет шрифта элементам класса lBox







Все селекторы тут:
====================
Селекторами называют строчные выражения, с помощью которых задаются условия поиска
элементов DOM на странице.
http://jquery.page2page.ru/index.php5/%D0%A1%D0%B5%D0%BB%D0%B5%D0%BA%D1%82%D0%BE%D1%80%D1%8B


Все эффекты тут:
===================
http://jquery.page2page.ru/index.php5/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82%D1%8B



Все Манипуляции (действия) тут:
=====================
http://jquery.page2page.ru/index.php5/%D0%9C%D0%B0%D0%BD%D0%B8%D0%BF%D1%83%D0%BB%D1%8F%D1%86%D0%B8%D0%B8



AngularJS
==================


Ссылка на библиотеку (как jQuery)
--------------------    
    https://developers.google.com/speed/libraries/#angularjs

    https://ajax.googleapis.com/ajax/libs/angularjs/1.5.8/angular.min.js

    https://angularjs.org   -- там инфо об всех библиотеках JS
==================    



Концепуции ООП JS
-----------------
	http://javascript.ru/tutorial/object/inheritance

Python vs JS
	змінні в Javascript оголошуються ключовим словом var; в Python їх оголошувати
	не потрібно взагалі;
	в Python є змінні булеанівські True i False, в Javascript - true i false;
	ключове слово, яке позначає порожнє значення у Python позначається як None; в Javascript
	маємо два позначення: undefined i null;
	в Javascript є лише тип списку[]; в Python також є незмінні списки кортежі();
	те, що в Python декларується як тип даних словник, в Javascript є об’єктом
	в мові Python функція декларується ключовим словом def; в Javascript - function;
	ключове слово в ООП мови Python - self в Javascript мові перетворюється у this;
	ООП в двох мовах кардинально різні; в Javascript є підхід так званих прототипів;


A tour of the differences between JavaScript and Python
-------------------------
Фундаментальная статья о Различиях и собенностях JS vs Python
	https://blog.glyphobet.net/essay/2557


Код на Javascript зазвичай вставляється на сторінку з допомогою спеціальних тегів “script”
в заголовку сторінки (тег “head”), або перед закриваючим тегом “body”.
Знайшовши даний тег на сторінці, браузер піде на сервер за даною йому адресою в тезі, 
отримає файл, відкриє і спробує запустити код всередині нього.


Javascript код зазвичай виконує три функції:
=======================
	1) слідкує за змінами на сторінці та діями користувача;	   (События Event)
	2) відправляє запити на сервер;								(AJAX)
	3) оновлює елементи на веб-сторінці.						(DOM HTML)


События за которыми следит и реагирует JS:
===================
	1) onchange: 	HTML елемент зазнав змін;
	2) onclick: 	користувач клацнув мишкою по елементу;
	3) onmouseover: 	курсор мишки наведено над елементом;
	4) onmouseout: 	курсор мишки забрано з елемента;
	5) onkeydown: 	користувач натиснув клавішу;
	6) onload: 	браузер закінчив завантажувати елемент; це може бути сторінка, фрейм,
		зовнішній файл чи зображення.


Мониторинг Событий - 2 способа:
------------------
	1) Атрибут в Тэг необходимого элемента
	2) внешне через Функцию JS addEventListener;
	    Пример:
	    через document ми доступаємось до API роботи із
	    елементами на сторінці; в даному прикладі ми шукаємо
	    елемент з id="my-link" і навішуємо йому обробник кліка;
	    var mylink = document.getElementById('my-link');
	    mylink.addEventListener('click',
		function(event) {
			alert('my-link clicked!');
		    }
	    );


DOM (Document Object Model, Об’єктна Модель Документа)
JS имеет доступ к HTML/DOM через Глобальную переменную <document> 
==========================
Коли браузер завантажує HTML код сторінки, він формує ієрархічне дерево об’єктів,
що відповідає HTML структурі документа.
/ Пример чистого JS:
	var apple = document.getElementById('apple');
	apple.style.display = 'none';	
	    через documet методом "Взять элемент по id=apple" изменили стил элемента на невидимый.


Элементы Браузера (не DOM) к которым есть доступ JS:
BOM (Browser Object Model, Об’єктна Модель Браузера).
=========================
	1) screen: 	робочий екран браузера;
	2) location: 	об’єкт, що відповідає за адресу поточної сторінки;
	3) history: 	історія навігації користувача в інтернеті;
	4) window: 	вікно браузера.



AJAX - Асинхронный Запрос на Сервер с помощью JS через файл XML (JSON, HTML, текст)
==================
Дослідвно AJAX розшифровується як Асинхронний Javascript та XML. Javascript - керує логікою
і робить запит на сервер, а XML - це формат передач даних. Хоча XML вже давно не є єдиним
форматом передачі даних. Окрім нього використовують JSON, HTML, Javascript код та простий текст.

JSON - це словник або список із даними.

Вот Хорошая Логика Javascript з хорошим AJAX підходом в работе:
	1) динамічно валідувати кожне поле форми ще до відправки на сервер;
	2) якщо дані некоректні, не постити форму, а вказати на помилки;
	3) якщо дані коректні, зробити запит на сервер із заповненими даними;
	4) в той час як іде запит потрібно заблокувати кнопки і поля на формі, щоб уникнути
		 подальших змін;
	5) також показати індикатор, що запит в процесі;
	6) коли прийшли дані від сервера - обробити їх і, якщо пост форми був успішно оброблений
		на сервері, показати повідомлення з результатом;
	7) також очистити форму;
	8) якщо не успішно - вказати на помилки і не очищати поля форми;
	9) в будь-якому випадку потрібно також заховати індикатор того, що запит в процесі,
		адже він уже закінчився;
	10) також знову активувати кнопки і поля форми.



Bootstrap Datepicker -- Виджет Календаря для Форм плагін 
====================
http://eonasdan.github.io/bootstrap-datetimepicker/
	$('#datetimepicker').data("DateTimePicker").FUNCTION()


jQuery Form Plugin -- Для динамизации Форм  
=====================
	http://malsup.com/jquery/form/


jQuery Cookie	-- Для управления cookies в Браузере 
=====================
Данный плагин позволить динамизовать Выпадайку объектов (их Селект) по id. которое сохранится в cookies
	http://plugins.jquery.com/cookie/



Методы Дебагинга кода JS jQuery
======================
1) в html коде: 
	<script>
	a = 5;
	b = 6;
	c = a + b;
	console.log(c);			// выведет строку с результатом
	</script> 

2) в html коде:
	<p id="demo"></p>		// выведет параграф с результатом
	<script>
	var x = 15 * 5;
	debugger;
	document.getElementById("demo").innerHTML = x;
	</script>

3) Firefox Firebug


Django имеет минимально необходимый набор для работы через AJAX
=======================
1) request.is_ajax():	метод на об’єкті запиту, який повертає True для запитів типу AJAX;
		даний метод працює на базі спеціального заголовка, який браузер відсилає на сервер
		у випадку запиту через Javascript код;
2) json:	Python бібліотека, з допомогою якої будемо перетворювали Python дані у JSON
		 формат перед відправкою на клієнт;
3) django.core.serializers.json:	 перетворювач даних з бази в JSON формат.
4) django.http.JsonResponse: 	об’єкт відповіді, що правильно і з правильними заголовками
		 надішле на клієнт JSON дані.

Django умеет и это хорошо - и пока этого достаточно:
-------------------------
	1) відрізняти звичайні запити від AJAX запитів;
	2) правильно форматувати AJAX відповіді;
	3) розбирати дані на сервері під час AJAX запиту.



Кастомные конструкции jQuery в проекте:
============================
Тестовый код для проверки срабатывания (и правильного подключения) Кода JS (файл <name>.js)
--------------------------------------
// функция на примере действий над чекбоксами
// функция jQuery($) выбирает/возвращает все объекты на странице с классом <.day-box>
// тегом<input> которые имею тип <checkbox>
// функция $ отслеживает событие <click>-нажатие кнопки и вызывает модальное окно<alert>
// с сообщением<test>

	function initJournal () {
		$('.day-box input[type='checkbox']').click(function(event){
		alert('test');
		})
	}


// Но функция инициализации<initJournal> срабатывает только при условии готовности структуры
// документа(DOM) на странице
	$(document).ready(finction(){
		initJournal();
	});



стр.422 учебника Код отправки ajax запроса на Сервер - позже по готовности описать тут
---------------------
$.ajax ...



Плагин jQuery Cookie
====================
Это билиотека для JS которая облегчает работу с cookie - позволяет управлять или, удалать, 
добавлять на стороне Клиента и Сервера

Библиотека скачивается как файл js. Расположу ее в static папке с js файлами.
-----------------------
http://plugins.jquery.com/cookie/

Итересует файл 
v1.4.1/jquery.cookie.js


Скачать можно по разному например просто архив потом распаковать потом перетянуть в папку или так:
$ wget https://raw.githubusercontent.com/carhartl/jquery-cookie/v1.4.1/jquery.cookie.js
// из репозитория создателя библиотеки


Документация и Файлы в репозитории Автора библиотеки
------------
https://github.com/carhartl/jquery-cookie#usage


итого в конце тега body в базовом шаблоне уже есть Библиотеки JS
-----------------------
<!--Scripts-->
    <!-- jQuery library -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js"></script>
    <!--jQuery Cookie Plugin-->
    <script src="{% static 'js/jquery.cookie.js' %}"></script>
    <!-- Latest compiled JavaScript -->
    <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
<!--End Scripts-->



UDEMY
JQUERY
=================
Jquery работает с объектами ДОМ, с Событиями и с AJAX

простой пример в чем суть
(идентичные конструкции)
------------------
var divs = $('div');

var divs = document.querySelectorAll('div');
------------------
some_object.style.borderWidth = '20px';

$(some-element).css('border-width', '20px');


универсальной инструмент активации Функций
(когда все загрузилось)
------------------
$(document).ready(function(){//some code});


простой пример - Изменение CSS свойств
------------------
var items_list = $('li')            // объект выборка всех элементов Списка

var params = {'color': 'green', 'background': 'yellow'}        // набор свойств

items_list.css(params)              // переназначение css свойтсв - сразу сработало




