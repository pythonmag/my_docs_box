
// Это начало

<script type ="text/javascript">
	alert("Hello World!");		            
    // инструкция
	document.write("Hello World Again!");
</script>
    // Блок Скрип для выполнения Кода JS


"Ryndin".length	
    // метод - выдает длинну строки (6)


// This is a comment that the computer will ignore.
    // # комментарии в джаваскрипт



confirm('This is an example of using JS to create some \
	interaction on a website. Click OK to continue!');
    // Выдает Уведомление  в отдельном окне
	// выдает Всплывалку с надписью и на выбор 2 кнопки Отмена/ОК, что выдает false/true
	// обрати внимание на точку запятая в конце оператора



prompt("What is the Best Business in the World??");
    // выдает Форму Строки для ввода данных
	// Как input в питоне: выдает Всплывайку для ввода данных
	// с написью и два выбора Отмена/ОК, в итоге null/"data"



Есть 3 основных вида значений / числа(1,2,3,..) / строки("строка") / булевые (да/нет)

"I am Happy!"	
    // это Строка то есть заключаем в кавычки, числа просто пишем

"I am Happy!".length
    // на выходе Число, как количество символов

"I'm coding like a champ".length > 10		// true
"I'm coding like a champ".length < 10		// false
	// Булиевые значения: true/false



console.log(2*5);
console.log("Hello");
	// Печатание, Комп выдает на экран значение, которые мы его спросили
	


// Операторы Сравнения значений
    >       // больше
    <       // меньше
    <=      // меньше или равно
    >=      // больше или равно
    ===     // интересно        // равно (== в JS не использовать!!!)
    !==     // не равно



Упражнение   // все true
console.log("Xiao Hui".length < 122);
console.log("Goody Donaldson".length > 8);
console.log(8*2 === 16);



    // Так задается цикл (if) и выполнение в {} 
if ("Shenchenko".length >= 7) {
    console.log("You have a long name!");	    // print out
    }
---------------
if (инструкция-условие) {
    инструкция-действие;	    // print out
    }



    // Так задается цикл (if/else) и выполнение в {} 
if ("full".length<10) {
    console.log("Let's go down the first road!");
    }
else {
    // What should we do if the condition is false? Fill in here:
    console.log("Let`s drive more!!");
    }


console.log(14 % 3);		// 2
console.log(99 % 8);		// 3
console.log(11 % 3);		// 2
    // Вывод на экран остатка деления (модуля)



if(100 % 4 === 0) {
    console.log("The first number is even");
    } 
else  {
    console.log("The first number is odd");
    }
    // Проверка кратности значений (если деление по модулю дает 0)



"hello".substring(0, 2);		// выдаст "he"
    // как Срез/Слайс в питоне, 
        выдает часть строки не включая последний элемент


console.log("January".substring(0,3));	    	// Jan
console.log("Melbourne is great".substring(0,12));	    // пробелы тоже символы
console.log("Hamburgers".substring(3));			// 2й границы нет так что срез до конца строки
    // печатает Срез Строки




var myName = "Leng";
var myAge = 30;
var isOdd = true;
    // Объявляем переменную - Даем ей имя - Даем ей значение

var myAge = 39;
console.log(myAge);
    // Задали переменную и ее значение
    // Распечатали значение переменной



// Контрольная и Задачки
--------------------------
var myWord = "Good".length*3
if (myWord > 10) {
    console.log("I finished my first course!");
    }
else {
    console.log("Shue that is big string?");
    }


// Игра
// Check if the user is ready to play!
--------------------
confirm("Do you like to play??");       // True - код читается дальше
var age = prompt("What`s your age");    // ввод с экрана (как input) и присваивание
if (age < 13) {
    console.log("OK, But you too small");
    }
else {
    console.log("OK, Let`s Play!");
    }

console.log("You are at a Justin Bieber concert, and you hear this lyric 'Lace my shoes off, start racing.'");
console.log("Suddenly, Bieber stops and says, 'Who wants to race me?'");

var userAnswer = prompt("Do you want to race Bieber on stage?");
if (userAnswer === "yes") {
        console.log("You and Bieber start racing. It's neck and neck! You win by a shoelace!");
        }
else {
        console.log("Oh no! Bieber shakes his head and sings 'I set a pace, so I can race without pacing.'");
     }

  
var feedback = prompt("Please, rate my game number from 0 to 10")
if (feedback > 8) {
        console.log("Thank you! We should race at the next concert!");
        }
else   {
        console.log("I'll keep practicing coding and racing.");
        }


var speed = 65;
    
if (speed > 80) {
	сonsole.log("Slow down");
    } 
else {
	console.log("Drive safe");
    }
-----------------------------



Функции (как классы в Питоне)
-------------------------------
// This is what a function looks like:

var divideByThree = function (number) {     // создана Переменная как Функция от Числа
    var val = number / 3;
    console.log(val);       		// 2 

    console.log();			        // Выдаст на печать пустую строку
    console.log(divideByThree);		// выдаст на печать что это [Function]
};

divideByThree(6);		        // 2 // Задаем значение для выполнения функции (инструкции)
    // Это Основная концепция Работы Функций
-----------------------------------


Упраждения
----------
var greeting = function (name) {
    console.log("Great to see you," + " " + name);	// конкатинация
};
greeting("Yurii")


var foodDemand = function(food) {
    console.log("I want to eat" + "  " + food)
    };
foodDemand("meet");

var calculate = function (number) {	// Все через переменные: тут функция через переменую
    var val = number * 10;			// тут просто переменая для функции
    console.log(val);
};

calculate(254)
----------



Оператор return и наследование функций
==================
var timesTwo = function(number) {
    return number * 2;		// сам в себя возвращает новое значение
};
------------------
Оператор return по окончании выполенния Функции возвращает значение Функции,
которое Функция получила в результате выполнения операций с входящим параметром.



Пример
------------
var timesTwo = function(number) {
    var namber2 = 2;
    return number * namber2;
};

var newNumber = timesTwo(10);
console.log(newNumber);             // Итоговое значение == 20

> var newNumber = timesTwo();       // У Функции пустое входящее значение
undefined
> console.log(newNumber);
NaN
    // То есть новая Переменная в итоге получило значение от выполненной Функции
--------------


// Пример наследования функций и ввода(prompt) значения
var quarter = function(number) { 
    return number/4;
    };

if (quarter(prompt("number ? ...")) % 3 === 0 ) 
	{ 
    	console.log("The statement is true");
    	}
else 	
	{ 
    	console.log("The statement is false");
    	}



Несколько входных параметров в Функции
----------------------------
так задаются 2 и более прараметров для функций
var perimeterBox = function(length, width) {
    return (length*2)+(width*2);
    };
perimeterBox(15,20)		// 70 (30+40)
-------------------



Глобальные и Локальные Переменные
---------------------- 
var my_number = 7; //this has global scope

var timesTwo = function(number) {
    var my_number = number * 2;		// Это мы задали локальную переменную, работает только внутри функции(переменной)
    console.log("Inside the function my_number is: ");
    console.log(my_number);		// 14       -- Локальная переменная внутри Функции
}; 

timesTwo(7);                    // задали Параметр для Функции
console.log("----------");
console.log("Outside the function my_number is: ");
console.log(my_number);			// 7    -- Глобальная переменная - Сама по себе
-----------------------



Вызов через глобальную переменную
----------------------
var nameString = function(name) {
	return "Hi, I am" + " " + name;
	};
console.log(nameString("Yurii"));


// Цикл внутри функции, функция срабатывает и выводит резултаты при трех исходных параметрах
var sleepCheck = function(numHours) {
    if (numHours >= 8) 
        {
        return "You're getting plenty of sleep! Maybe even too much!";
        }
    else 
        {
        return "Get some more shut eye!";
        }
};

console.log(sleepCheck(10));
console.log("------");
console.log(sleepCheck(5));
console.log("------");
console.log(sleepCheck(8));



ИГРА Камень/Ножницы/Бумага
-----------------------
Начальный Код Игры
------------------
var userChoice = prompt("Do you choose rock, paper or scissors?");

computerChoice = Math.random();
console.log(computerChoice);

if (computerChoice < 0.33) {
    computerChoice = "Rock";
    }
else if (computerChoice <= 0.67) {
    computerChoice = "Paper";
    }
else {
    computerChoice = "Scissors";
    }

console.log("===========");
console.log("Your Choice:  " + userChoice);
console.log("Choice Computer:  " + computerChoice);


Конечный Код Игры
-----------------
var userChoice = prompt("Do you choose rock, paper or scissors?");
if (userChoice !== "rock" && userChoice !== "paper" && userChoice !== "scissors") {
    userChoice = "rock";
    console.log("Its Rock");
    }				// Если от юзера пустая строка то назначаем значение

var computerChoice = Math.random();	// Комп генерирует число
if (computerChoice < 0.34) {
	computerChoice = "rock";
    }
else if(computerChoice <= 0.67) {
	computerChoice = "paper";
    } 
else {
	computerChoice = "scissors";
    };

console.log("User: " + userChoice);    
console.log("Computer: " + computerChoice);

var compare = function(choice1, choice2)	// Сравниваем два значения 
{
    if (choice1 === choice2) {
        return "The result is a tie!";
        }
        
    else if (choice1 === "rock") {
        
        if (choice2 === "scissors") {
            return "rock wins"
            }
        else {
            return "paper wins"
            }
        }
    
    else if (choice1 === "paper") {
        
        if (choice2 === "rock") {
            return "paper wins"
            }
        else {
            return "scissors wins"
            }
        }
};

compare(userChoice, computerChoice);	// Связка, которая берет 2 значения и вносит в функцию
-----------------------------------



Цикл for
====================
Все что в внутри for() - условия которые выполняются
Чудестный счетчик, печатает значения построчно от 1 до 5
------------------
for (var counter = 1; counter < 6; counter++) {
	console.log(counter);
}

for (var i = 5; i < 11; i = i + 1){	        // точно такой счетчик
	console.log(i);
}

Счетчик - шаг 5 единиц
--------------
for (var i = 5; i < 51; i+=5) {
	console.log(i);
}

цикл вниз
---------
for (var i = 10; i >= 0; i-=1) {
	console.log(i);
}

for (var i = 10; i >= 0; i--) {		    // то же
	console.log(i);
}

for (var i=100; i>0; i-=5) {
    console.log(i);
}
---------------



array - Массивы
===============
var junk = ["my", "name", 22, 33];
console.log(junk);


Выборка по индексу (от 0)
------------------
var junkData = ["Eddie Murphy", 49, "peanuts", 31];
console.log(junkData[3]);


Так делаем выборку из массива, задаем цикл печати с каждым элементом
------------------
var cities = ["Melbourne", "Amman", "Helsinki", "NYC", "Tokio", "Paris"];

for (var i = 0; i < cities.length; i++) {
    console.log("I would like to visit " + cities[i]);
}


распечатает подряд все элементы списка
------------------
var names = ["Jekky", "Arny", "Silva", "Antonio", "Chack"];
for (var i=0; i < names.length; i++) 
    {
    console.log("I know someone called " + names[i]);



распечатает много раз только третий элемент списка
---------------------
var names = ["Jekky", "Arny", "Silva", "Antonio", "Chack"];
for (var i=0; i < names.length; i++) 
    {
    console.log("I know someone called " + names[2]);
    }


Очень важно!!
--------------
var myArray = ['hello', 'world'];
myArray[0];    // equals 'hello'

var myName = 'Eric';
myName[0];    // equals 'E'


Упражнение
----------------
Применяем 2 цикла. 1й - чтобы пройтись по всем знакам строки и найти Нужную букву
2й - чтобы записать в массив последовательность букв по длинне начального слова

text = "Blah blah blah blah blah blah Fric \
blah blah blah Fric blah blah Fric blah blah \
blah blah blah blah blah Fric";

var myName = "Fric";
var hits = [];

// Look for "E" in the text
for(var i = 0; i < text.length; i++) {
	if (text[i] === "F") {
		// If we find it, add characters up to
		// the length of my name to the array
		for(var j = i; j < (myName.length + i); j++) {
			hits.push(text[j]);
		}
	}
}

if (hits.length === 0) {
	console.log("Your name wasn't found!");
} else {
	console.log(hits);
}
----------------------


Цикл While
===================
'While' Loops in JavaScript


Шаблон цикла while
Обычный Счетчик
--------------
count = 0;

var loop = function() {
	while(count < 3) {
		//Your code goes here!
		console.log("I'm looping!");            // Результат будет - 3 раза вывод Строки
		count++;
		}
};

loop();             // вызов / запуск функции без входного параметра
--------------


Цикл  Do / While
================

Шаблон
----------------
var loopCondition = true;

do {
	console.log("I'm gonna stop looping 'cause my condition is " + loopCondition + "!");	
    } 
    while (loopCondition);



Упражнение "Дракон"
==================
var slaying = true;

var youHit = Math.floor(Math.random() * 2);
    
var damageThisRound = Math.floor(Math.random()*5 + 1);
    
var totalDamage = 0;


while(slaying){
     
    if(youHit){
        console.log("You hit! " + damageThisRound + " damage.");
        totalDamage += damageThisRound;
        
        if(totalDamage>=4){
            console.log("since the dragon's dead, the slaying is over");
            slaying = false;
        }
        else{
            youHit = Math.floor(Math.random() * 2);
        }
    }
    
    else {
        console.log("You missed! You died");
    }
    
    slaying = false;
}
-------------------




NaN / isNan / Not a Number
=========================
Проверка значения что не Число
------------------------------
var isEven = function(number){
    if (number % 2 === 0){
    return true;
    }
    else if (isNaN(number)){
    return "This is not a number";
    }
    else {
    return false;
    }
};

> isEven("zzz");
'This is not a number'
> isEven(14587);
false
> isEven(14584);
true
--------------------------



Циклы WILE / FOR  еще раз
==========================
var total = 1;
while (total < 25) {
    console.log(total);
    total ++;
}

console.log("===============")

for (var i = 1; i < 11; i++) {
    // Prints numbers 1 - 10
    console.log(i);
}
---------------------------



SWITCH / CASE / BREAK / DEFAULT       
Выбор / Случай (вариант) / Прекращение выполнения Кода / По умолчанию
=========================
var lunch = prompt("What do you want for lunch?","Type your lunch choice here");

switch(lunch){
  case 'sandwich':
    console.log("Sure thing! One sandwich, coming up.");
    break;
  case 'soup':
    console.log("Got it! Tomato's my favorite.");
    break;
  case 'salad':
    console.log("Sounds good! How about a caesar salad?");
    break;
  case 'pie':
    console.log("Pie's not a meal!");
    break;
  default:
    console.log("Huh! I'm not sure what " + lunch + " is. How does a sandwich sound?");
-------------------------



Вариант оператора switch / case / break / default
====================
var candy = prompt("What's your favorite candy?","Type your favorite candy here.");

switch(candy) {
  case 'licorice':
    console.log("Gross!");
    break;
  case 'gum':
    console.log("I like gum!");
    break;
  case 'beets':
    console.log("...is that even a candy?");
    break;
  // Add your code here!
  case "cake":
      console.log("... and black tea!");
      break;
  default:
    console.log("Not this item in my menu!");
    break;
 
}
------------------------------



Мой код на упражнение со  SWITCH
==================
var foo = prompt("what is your gender?", "male? female? or child?");

switch (foo) {
    case ('male'):
        console.log("you are a strong and brave!");
        break;
        
    case ('female'):
        console.log("you are a butty and sexy!");
        break;
        
    case ('child'):
        console.log("you are a funny and speedy!");
        break;
        
    default:
        console.log("not idea?!");
        break;
}
-------------------------------



Logical operators. JavaScript has three:
====================
 and (&&), 
or (||), 
and not (!).


Упражнение
------------------
var iLoveJavaScript = true;
var iLoveLearning = true;

if(iLoveJavaScript && iLoveLearning) {
// if iLoveJavaScript AND iLoveLearning:
  console.log("Awesome! Let's keep learning!");

} else if( !(iLoveJavaScript || iLoveLearning) ) {
  // if NOT iLoveJavaScript OR iLoveLearning:
  console.log("Let's see if we can change your mind.");

} else {
  console.log("You only like one but not the other? We'll work on it.");
}
------------------------


Logic AND / &&
=================
true && true;    // => true
true && false;   // => false
false && true;   // => false
false && false;  // => false
если обе переменные есть true


Logic OR /  ||
=================
true || true;     // => true
true || false;    // => true
false || true;    // => true
false || false;   // => false
если хотя бы одна переменная есть true

Упражнение
----------------
var tired = true;
var bored = false;

var nap = function() {
   if (tired===true || bored===true) {
    return true;
  }
  else {
      return false;
      }
};
--------------------------
завершается ретурном тру если хотябы одна переменная тру



Logic NOT /  !
=================
!true;   // => false
!false;  // => true

Упражнение
--------------------
var programming = false;

var happy = function() {
  // Add your if/else statement here!
  if (programming !== true) {
      return true;
      }
  else {
      return false;
      }
};
-----------------
завершается Тру если переменная Не Тру

Learned about the logical operators and (&&), or (||), and not (!)




toUpperCase() / .toLowerCase()
==============================
Встроенные функции Форматирования строки
Приводит все символы в Заглавные / Маленькие буквы

var user = prompt("What time is it now?(HH:mm format)").toUpperCase();
-----------------



Arrays and Objects in JS
========================

Упражнение на Цикл с Массивом
--------------------
var languages = ["HTML", "CSS", "JavaScript", "Python", "Ruby"];

for (item = 0; item < languages.length; item++) {
    console.log(languages[item]);
    }
---------------------



ОБЪКТЫ в JS
Похоже что это Словарь(python)
но в JS это Объект
======================
Заполнен последним элементом как Функций
которая берет параметры из Этогоже (this) Словаря
-----------------------
var phonebookEntry = {};

phonebookEntry.name = 'Oxnard Montalvo';
phonebookEntry.number = '(555) 555-5555';
phonebookEntry.phone = function() {
  console.log('Calling ' + this.name + ' at ' + this.number + '...');
};

phonebookEntry.phone();
-----------------------


Вид Объекта (ключ:значение)
-----------------
var myObj = {
    type: 'fancy',
    disposition: 'sunny'
};

var emptyObj = {};
------------------



Объект - Создание через Конструктор Объекта
======================
var me = new Object();

me.name = "Yurii";
me.age = 40;
me.myWife = "Elena";

console.log(me)
-------------------
принт
{ name: 'Yurii', age: 40, myWife: 'Elena' }
-------------------



Пример - опять Массив
---------------------
myArray = [1976, false, "yurii", { name:"Lena", data:1978} ];

console.log(myArray);
--------------------




Комплексное Задание с Объектами, Массивам и Функциями
-------------------
var friends = {};

friends.bill = {
  firstName: "Bill",
  lastName: "Gates",
  number: "(206) 555-5555",
  address: ['One Microsoft Way','Redmond','WA','98052']
};

friends.steve = {
  firstName: "Steve",
  lastName: "Jobs",
  number: "(408) 555-5555",
  address: ['1 Infinite Loop','Cupertino','CA','95014']
};

var list = function(obj) {      // Функция принимает параметр Объекта и выдает этот Параметр
  for(var prop in obj) {
    console.log(prop);
  }
};

var search = function(name) {   // Функция принимает своиство Параметра Объекта и выдает
                                // по условию совпадения имени Параметра - весь Параметор 
  for(var prop in friends) {
    if(friends[prop].firstName === name) {
      console.log(friends[prop]);
      return friends[prop];
    }
  }
};

list(friends);
search("Steve");
---------------------
В принципе все понятно, но надо быть внимательным



Альтернативный Способ заполнения Контента Объектов
Через Правило Конструктора Объекта
Синтаксис гораздо понятнее чем когда много скобок и вложенностей!!!
=====================
var friends = new Object();

friends.bill = new Object();
friends.steve = new Object();

friends.bill.firstName = "Bill";
friends.bill.lastName = "Reevz";
friends.bill.number = 40;
friends.bill.address = ["Zap", "Avenu", 25];

friends.steve.firstName = "Steve";
friends.steve.lastName = "Cruiz";
friends.steve.number = 50;
friends.steve.address = ["Dnepr", "Street", 44];

console.log(friends)
--------------------
{ bill: 
   { firstName: 'Bill',
     lastName: 'Reevz',
     number: 40,
     address: [ 'Zap', 'Avenu', 25 ] },
  steve: 
   { firstName: 'Steve',
     lastName: 'Cruiz',
     number: 50,
     address: [ 'Dnepr', 'Street', 44 ] }
 }
undefined
----------------------


Пример Концепция множественного выбора Числа
========================
for (i=1; i<=20; i++) {
    if ( (i%3===0) && (i%5===0) ) {
        console.log("FizzBuzz");
    }
    
    else if (i%3==0) {
        console.log("Fizz");
    }

    else if (i%5==0) {
        console.log("Buzz");
    }

    else {
        console.log(i);
    }

};
------------------------
1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
FizzBuzz
16
17
Fizz
19
Buzz
--------------------------




Метод Вытягивания значений из объекта в Глобальную переменнную
==============================
var bob = {
  name: "Bob Smith",
  age: 30
};

var susan = {
  name: "Susan Jordan",
  age: 25
};

// here we save Bob's information
var name1 = bob.name;
var age1 = bob.age;

//Susan
var name2 = susan.name;
var age2 = susan.age;
---------------------



Метод Вытягивания Атрибутов(свойств) Объектов
=================
var dog = {
  species: "greyhound",
  weight: 60,
  age: 4
};

var species = dog["species"];

var weight = dog["weight"];
var age = dog["age"];
---------------------




Пример 2 Метода, которые сохранятся в Объекте как Логика, и потом используются
========================
var bob = new Object();
bob.age = 17;
// this time we have added a method, setAge
bob.setAge = function (newAge){
  bob.age = newAge;
};

bob.getYearOfBirth = function () {
  return 2014 - bob.age;
};

console.log(bob.getYearOfBirth());
------------------
Первая Логика принимает в Объект возраст Объекта
Вторая Логика расчет и вывод года рождения Объекта
Выведет Год Рождения Боба как расчет




This - Метод
=====================
var setAge = function (newAge) {
  this.age = newAge;
};

var bob = new Object();
bob.age = 30;

bob.setAge = setAge;
  
// change bob's age to 50 here
bob.setAge(50);
----------------------
Создаем Метод который меняет значение Свойства в Объекте в котором этот метод Сохранен (This)
Сохранили Метод в Объект
Передали методу Входной параметр и Метод сработал внутри Объекта (This)
----------------------



This - Расширенные возможности Метода
=========================
var square = new Object();
square.sideLength = 6;
square.calcPerimeter = function() {
  return this.sideLength * 4;
};
// help us define an area method here
square.calcArea = function() {
    return this.sideLength*this.sideLength;
    };

var p = square.calcPerimeter();
var a = square.calcArea();
-------------------------
Создаем Объект с Методами рабоыт через this + return
передача Метода во внешнюю переменую возвращает Ей значение метода
------------------------




Конструктор Заполненный свойствами / Именнованная Функция:
====================

function Person(name,age) {
  this.name = name;
  this.age = age;
}

var bob = new Person("Bob Smith", 30);
var susan = new Person("Susan Jordan", 25);
var george = new Person("George Washington", 275);
---------------------
К новым Объектам применяем Заполненный свойствами Конструктор, 
Назначая значения этих свойств
---------------------



Конструктор и Наследник
=======================
function Rectangle(height, width) {
  this.height = height;
  this.width = width;
  
  this.calcArea = function() {
      return this.height * this.width;
  };
  // put our perimeter function here!
  this.calcPerimeter = function() {
      return this.height*2 + this.width*2;
  };
}

var rex = new Rectangle(7,3);
var area = rex.calcArea();
var perimeter = rex.calcPerimeter();

console.log(area);
console.log(perimeter);
----------------------
Создается Наследник который перенимает Методы Конструктора и тут вводятся значения
параметров.
У наследника вызываются Методы, которые пинимают заданные Наследнику значения
----------------------



Объекты и Массивы - тоже как и Строки могут заполняться Массивами
============================
// Our person constructor
function Person (name, age) {
    this.name = name;
    this.age = age;
}

// Now we can make an array of people
var family = new Array();
family[0] = new Person("alice", 40);
family[1] = new Person("bob", 42);
family[2] = new Person("michelle", 8);
// add the last family member, "timmy", who is 6 years old
family[3] = new Person("timmy", 6);
----------------------
> family
[ Person { name: 'alice', age: 40 },
  Person { name: 'bob', age: 42 },
  Person { name: 'michelle', age: 8 },
  Person { name: 'timmy', age: 6 } ]
----------------------
Переменная как Массив заполняется объектами Массива через методы Конструктора
----------------------



Цикл For Loop в Конструторе
==========================
// Our Person constructor
function Person(name, age) {
    this.name = name;
    this.age = age;
};

// Now we can make an array of people
var family = new Array();
// var family = [];
family[0] = new Person("alice", 40);
family[1] = new Person("bob", 42);
family[2] = new Person("michelle", 8);
family[3] = new Person("timmy", 6);

// loop through our new array
for (var pers in family) {
    console.log( family[pers].name);
};
---------------------------
Вообще все понятно, но не сразу, как в Питоне
---------------------------




Упражнение
=====================
// Our person constructor
function Person (name, age) {
    this.name = name;
    this.age = age;
}

// We can make a function which takes persons as arguments
// This one computes the difference in ages between two people
var ageDifference = function(person1, person2) {
    return person1.age - person2.age;
}

var alice = new Person("Alice", 30);
var billy = new Person("Billy", 25);

// get the difference in age between alice and billy using our function
var diff = ageDifference(alice, billy)
console.log(diff);
---------------------




Конструктор Создания Объекта уже с Параметрами (принимает значения)
====================
// 3 lines required to make harry_potter
var harry_potter = new Object();
harry_potter.pages = 350;
harry_potter.author = "J.K. Rowling";

// A custom constructor for book
function Book (pages, author) {
    this.pages = pages;
    this.author = author;
}

var the_hobbit = new Book(320, "J.R.R. Tolkien")
---------------------




Функция как Контейнер Двух Расчетных Методов (один входной Параметр)
=======================
function Circle (radius) {
    this.radius = radius;
    this.area = function () {
        return Math.PI * this.radius * this.radius;
        
    };
    // define a perimeter method here
    this.perimeter = function () {
        return (Math.PI * this.radius)*2;
        };
};
-----------------------



Упражнение с Массивами - Вглубь Структуры
Извлекаем контактный телефон Марии
======================
var bob = {
    firstName: "Bob",
    lastName: "Jones",
    phoneNumber: "(650) 777-7777",
    email: "bob.jones@example.com"
};

var mary = {
    firstName: "Mary",
    lastName: "Jones",
    phoneNumber: "(650) 888-8888",
    email: "mary.jones@example.com"
};

var contacts = [];
contacts[0] = bob;
contacts[1] = mary;

console.log(contacts[1].phoneNumber)
--------------------
> (650) 888-8888
------------------




Еще Упражнение - Вглубь массивов
=======================
var bob = {
    firstName: "Bob",
    lastName: "Jones",
    phoneNumber: "(650) 777-7777",
    email: "bob.jones@example.com"
};

var mary = {
    firstName: "Mary",
    lastName: "Johnson",
    phoneNumber: "(650) 888-8888",
    email: "mary.johnson@example.com"
};

var contacts = [bob, mary];

// printPerson added here
function printPerson (person) {
    console.log(person.firstName + " " + person.lastName)
    };
    
printPerson(contacts[0]);
console.log("============")
printPerson(contacts[1]);
---------------------------
Элементы из Массивов Вызываем по Порядковому номеру, а свойства уже по .Имени





Упражнение Комплекстное с Циклами и Конструктора Функций
=======================
Созданные Функции вызываются сколько угодно раз
Массывы обрабатываются по Индексам
Индексы Массовов удобно использовать в Циклах
Добавление Объекта в Массив через Функцию-Конструктор Объекта / Индекс (последний) по длинне Массива (.length)
-----------------------
var bob = {
    firstName: "Bob",
    lastName: "Jones",
    phoneNumber: "(650) 777-7777",
    email: "bob.jones@example.com"
};

var mary = {
    firstName: "Mary",
    lastName: "Johnson",
    phoneNumber: "(650) 888-8888",
    email: "mary.johnson@example.com"
};

var contacts = [bob, mary];

function printPerson(person) {
    console.log(person.firstName + " " + person.lastName);
    console.log("===============endFoo")
}

function add(firstName, lastName, phoneNumber, email) {
    contacts[contacts.length] = {
        firstName: firstName,
        lastName: lastName,
        phoneNumber: phoneNumber,
        email: email
    };
};

function list() {
	var contactsLength = contacts.length;
	for (var i = 0; i < contactsLength; i++) {
		printPerson(contacts[i]);
	}
}

/*Create a search function
then call it passing "Jones"*/

function search(name) {
    var contactsLength = contacts.length;
    for (var i = 0; i < contactsLength; i++) {
        if (contacts[i].lastName === name) {
            printPerson(contacts[i]);
            };
        };
    };
    

search("Jones");
add("Yurii", "Ryndin", "555-5555", "admin@admin.com");
list();
-----------------------
> результат
Bob Jones               // нашел по Фамилии
===============endFoo
Bob Jones               // Вывел Все имена Массива (с учетом Добавленного Объекта)
===============endFoo
Mary Johnson            ...
===============endFoo
Yurii Ryndin            ...
===============endFoo
-----------------------
Это было Комплексное упражнение на всю тему Урока
-----------------------



this в Конструткторе тоже объявляет Переменную - как и var
=====================
function Person(job, married) {
    this.job = job;
    this.married = married;
    // add a "speak" method to Person!
    this.speak = function() {
        console.log("Hello!")
        };
}

var user = new Person("Codecademy Student",false);
user.speak();
---------------------
так правельнее новая функция в Конструкторе
---------------------
var james = {
    job: "programmer",
    married: false,
    speak: function(word) {
        console.log("Hello, I am feeling " + word);
        }
};

james.speak("great");
james.speak("just okay");
---------------------



this - это Очень Важно!
======================
var james = {
    job: "programmer",
    married: false,
    sayJob: function() {
        // complete this method
        console.log("Hi, I work as a " + this.job);
        // console.log("==============");
    }
};

// james' first job
james.sayJob();

// change james' job to "super programmer" here
james.job = "super programmer";

// james' second job
james.sayJob();
--------------------




Подмена Имени Переменной
========================
Вызвали значения свойства Переменной через другое имя
Очень Странно.
------------------------
var james = {
    job: "programmer",
    married: false
};

var aProperty = "job";

console.log(james[aProperty]);
-------------------------
> programmer
-------------------------



Typeof - Как узнать Тип объекта   / object / number / string / function /
====================
var anObj = { job: "I'm an object!" };
var aNumber = 42;
var aString = "I'm a string!";

console.log(typeof anObj);      // should print "object"
console.log(typeof aNumber);    // should print "number"
console.log(typeof aString);    // should print "string"
---------------------------


.hasOwnProperty('name')
Метод Который проверяет наличие Свойства в Объекте
======================
var myObj = {
    // finish myObj
    name: "Yurii",
    };

console.log( myObj.hasOwnProperty('name') ); // should print true
console.log( myObj.hasOwnProperty('nickname') ); // should print false
---------------------
var suitcase = {
    shirt: "Hawaiian"
};

if (suitcase.hasOwnProperty("shorts")===true) {
    console.log(suitcase["shorts"]);
    }
else {
    suitcase["shorts"] = 33;
    console.log(suitcase["shorts"])
    }
---------------------



for var in -  Конструкция
========================= 
var nyc = {
    fullName: "New York City",
    mayor: "Bill de Blasio",
    population: 8000000,
    boroughs: 5
};

for (var item in nyc) {
    console.log(item);
    };
----------------------  



First, remember that
====================
dog.species = dog["species"] = "bulldog";       // Вызов по имени Свойства


var x = "species";          // Подмена Имени Свойства Объекта

dog[x] = "bulldog";
---------------------



Класс (по ООП) это Конструктор Функции
=========================
function Person(name,age) {
  this.name = name;
  this.age = age;
}
------------------------




Class Prototype - Конструкция
=====================
На лету Меняем Конструкцию Прототипа Класса, все Инстансы подхватывают
---------------------
function Dog (breed) {
  this.breed = breed;
};

var buddy = new Dog("golden Retriever");    // В Инстансе нет, но Потом Сработает

Dog.prototype.bark = function() {       // Изменение Прототипа Класса
  console.log("Woof");
};
buddy.bark();

var snoopy = new Dog("Beagle");
/// this time it works!
snoopy.bark();          // В Инстансе Сработало
---------------------
function Cat(name, breed) {
    this.name = name;
    this.breed = breed;
}

var cheshire = new Cat("Cheshire Cat", "British Shorthair");
var gary = new Cat("Gary", "Domestic Shorthair");

Cat.prototype.meow = function(){        // Меняем Прототип Класса
    console.log("Meow!");
    };

cheshire.meow();            // Вызываем Переменные (Инстансы)
gary.meow();
---------------------
// create your Animal class here
function Animal(name, numLegs) {
    this.name = name;
    this.numLegs = numLegs;
    }

// create the sayName method for Animal
Animal.prototype.sayName = function() {
    console.log("Hi my name is " + this.name);
    };

var penguin = new Animal("Captain Cook", 2);
penguin.sayName();
---------------------



Class - Prototype -  new Class
=========================
Созданный Класс Пингвин наследует все Свойства Класса Животное
-------------------------
function Animal(name, numLegs) {
    this.name = name;
    this.numLegs = numLegs;
}
Animal.prototype.sayName = function() {
    console.log("Hi my name is " + this.name);
};

function Penguin(name) {
    this.name = name;
    this.numLegs = 2;
    };

Penguin.prototype = new Animal();           // Вот Конструкция Наследования
-------------------------




Упражнение - Класс - Инстанс Класса - Объект Инстанса
======================
Создаем Объект-Класс-Прототип Пингвин со Свойствами
Создаем Класс-Наследник Императорский (наследует Свойства и принимает Имя)
Создаем Объект Инстанса с Именем - Свойства все от Класса-Прототипа
----------------------
function Penguin(name) {
    this.name = name;
    this.numLegs = 2;
}

// create your Emperor class here and make it inherit from Penguin
function Emperor(name) {
    this.name = name;
};
Emperor.prototype = new Penguin();

// create an "emperor" object and print the number of legs it has
var emperor = new Emperor("Yurii");
console.log(emperor.numLegs);
console.log(emperor.name);
-------------------------



Упражнение - Класс-Прототип - Инстанс - Инстанс - объект инстанса
============================
объект Инстанса наследует все от Инстансев (2) так и от Класса-Прототипа 
----------------------------
// original classes
function Animal(name, numLegs) {
    this.name = name;
    this.numLegs = numLegs;
    this.isAlive = true;
}
function Penguin(name) {
    this.name = name;
    this.numLegs = 2;
}
function Emperor(name) {
    this.name = name;
    this.saying = "Waddle waddle";
}

// set up the prototype chain
Penguin.prototype = new Animal();
Emperor.prototype = new Penguin();

var myEmperor = new Emperor("Jules");

console.log(myEmperor.saying); // should print "Waddle waddle"
console.log(myEmperor.numLegs); // should print 2
console.log(myEmperor.isAlive); // should print true
console.log(myEmperor.name); // should print name
---------------------------
Waddle waddle
2
true
Jules
---------------------------




Локальные (Скрытые) переменные в Классах-Прототипах
===============================
инстансы и Объекты Локальные Переменные Класса не выдят
Эти локальные переменные без конструкции .this
-------------------------------
function Person(first,last,age) {
   this.firstname = first;
   this.lastname = last;
   this.age = age;
   var bankBalance = 7500;              // Скрытая Локальная Переменная
}

// create your Person 
var john = new Person("Yurii", "Ryndin", 40);

// try to print his bankBalance
console.log(john.bankBalance);  // не видно
console.log("============");
console.log(john.firstname);
---------------------------
undefined                   // не видно
============
Yurii
---------------------------



Упражнение - Достучать до Локальной Переменной Класса через встроенный Метод
===============================
Инстанс наследует как Свойства, 
так и метод Оперирования локальной Переменной Класса
-------------------------------
function Person(first,last,age) {
   this.firstname = first;
   this.lastname = last;
   this.age = age;
   var bankBalance = 7500;
  
   this.getBalance = function() {
      // your code should return the bankBalance
      return bankBalance;
   };
}

var john = new Person('John','Smith',30);
console.log(john.bankBalance);
console.log("=============#1")

var myBalance = john.getBalance();
console.log(myBalance);
-------------------------------
undefined
=============#1
7500
-------------------------------



Упражнение - В Классе-Прототипе 2 Метода
===============================
1) Локальный - Оперирует с Локальной Переменной
2) Глобальный (.this) - Оперирует с Локальным Методом как с Переменной
------------------------------ 
function Person(first,last,age) {
   this.firstname = first;
   this.lastname = last;
   this.age = age;
   var bankBalance = 7500;              // Локальная Переменная
  
   var returnBalance = function() {     // Локальный Метод
      return bankBalance;
   };
       
   // create the new function here      // Глобальный Метод
   this.askTeller = function() {
       return returnBalance;
    };
}

var john = new Person('John','Smith',30);
console.log(john.returnBalance);        // вызов Локального Метода - Ошибка
console.log("===============#1");
var myBalanceMethod = john.askTeller(); // вызов Глобального метода через Объект
var myBalance = myBalanceMethod();      // вызов Локального метода через Глобальный
console.log(myBalance);
console.log("===============#2");
-------------------------
> результат
undefined
===============#1
7500
===============#2
-------------------------



Упражнение - Вызов из (Объекта) Глобального Метода Класса с входным Параметром (как Пароль)
==============================
function Person(first,last,age) {
   this.firstname = first;
   this.lastname = last;
   this.age = age;
   var bankBalance = 7500;                  // Локальная переменная
  
   this.askTeller = function(pass) {        // Глобальный Метод
     if (pass == 1234) return bankBalance;
     else return "Wrong password.";
   };
}

var john = new Person('John','Smith',30);   // Объект Класса

var myBalance = john.askTeller(1234);       // Вызов Глобального Метода Класса
console.log(myBalance);
----------------------
> 7500
----------------------



Упражнение - Из Словаря Вытягивание по Имени Свойства(Ключа) и с Проверкой Типа Значений
========================
1) Вывод Имен Ключей Словаря
2) Вывод Значений Ключей Словаря
Для меня - Очень Важно!
-------------------------
var languages = {
    english: "Hello!",
    french: "Bonjour!",
    notALanguage: 4,
    spanish: "Hola!"
};

for (var item in languages) {       // Вывод только Имен Ключей из Объекта-Словаря
    console.log(item);
    }

console.log("============#1");
    
for (var item in languages) {
    if (typeof languages[item] === "string") { 
       console.log(languages[item]);                // Вывод Значений Ключей Словаря
    }
    else if (typeof languages[item] === "number") {
        console.log("============#2");
        console.log(languages[item] + " => " + item);   // Вывод и Значения и Имени Ключа
    };
}
--------------------------
> результат
english
french
notALanguage
spanish
============#1
Hello!
Bonjour!
============#2
4 => notALanguage
Hola!
--------------------------



Упражнение - Дополнение Класса-Прототипа Методом через .prototype
prototype -- Методы класса как бы
=================================
Метод Транслируется на все Инстансы Класса
------------------------
function Dog (breed) {
    this.breed = breed;
};

// add the sayHello method to the Dog class 
// so all dogs now can say hello
Dog.prototype.sayHello = function() {                       // Метод Класса
    console.log("Hello this is a " + this.breed + " dog")   // Метод вывода
    };

var yourDog = new Dog("golden retriever");      // Инстанс
yourDog.sayHello();                             // Метод Класса для Инстанса доступен

var myDog = new Dog("dachshund");
myDog.sayHello();
------------------------
>
Hello this is a golden retriever dog
Hello this is a dachshund dog
-------------------------

myDog.__proto__.sayHello()                      // чисто метод класса-прототипа
>
Hello this is a undefined dog




Object - prototype - typeof
===========================
похоже отражает типы Встроенных методов?
---------------------------
var prototypeType = typeof Object.prototype;
console.log(typeof prototypeType);

var hasOwn = Object.prototype.hasOwnProperty("hasOwnProperty");
console.log(typeof hasOwn);
---------------------------
>
string
boolean
---------------------------





Упражнение - Счетчик Скана товаров в Магазине
Функции как алгиритмы расчетов для параметоров объектов
----------------------------
Объект Регистор имеет:
1) счетчик стоимости Скан товаров
2) Метод Класса для Определения Цены Товара
3) Метод Класса для Добавления Стоимости в общий Счетчик
-----------------------------
var cashRegister = {
    total: 0,                               
    
    //insert the add method here            // создана функция - принимает значение
    add: function(itemCost) {
        this.total += itemCost;             // счетчик 
        },
    
    scan: function (item) {                 // приемник значений
        switch (item) { 
        case "eggs": 
            this.add(0.98); 
            break;
        case "milk": 
            this.add(1.23); 
            break;
        //Add other 2 items here
        case "magazine":
            this.add(4.99);
            break;
        case "chocolate":
            this.add(0.45);
            break;
        }
        return true;
    }
};

//Scan 2 eggs and 3 magazines
cashRegister.scan("eggs");
cashRegister.scan("eggs");
cashRegister.scan("magazine");
cashRegister.scan("magazine");
cashRegister.scan("magazine");

//Show the total bill
console.log('Your bill is '+ cashRegister.total);
------------------------------
>
Your bill is 16.93
------------------------------




Упражнение - Счетчик Стоимости Скана товаров в Магазине
Масив как контейнер функций и параметров
==============================
Встроенные Методы Класса принимают 2 параметра:
1) Наименование + Количество
2) Цена + Количество
------------------------------
var cashRegister = {
    total:0,
    add: function(itemCost, itemQnty){
        this.total += itemCost*itemQnty;
    },
    scan: function(item, qnty) {
        switch (item) {
        case "eggs": this.add(0.98, qnty); break;
        case "milk": this.add(1.23, qnty); break;
        case "magazine": this.add(4.99, qnty); break;
        case "chocolate": this.add(0.45, qnty); break;
        }
    }
};

// scan each item 4 times
cashRegister.scan("eggs", 4);
cashRegister.scan("milk", 4);
cashRegister.scan("magazine", 4);
cashRegister.scan("chocolate", 4);

//Show the total bill
console.log('Your bill is '+cashRegister.total);
-----------------------------
>
Your bill is 30.6
-----------------------------




Упражнение - Счетчик Общих покупок + Расчет последней Трансакции
===========================
var cashRegister = {
    total: 0,
    lastTransactionAmount: 0,
    //Dont forget to add your property
    add: function(itemCost) {
        this.total += itemCost;
        this.lastTransactionAmount = itemCost;
    },
    scan: function(item,quantity) {
        switch (item) {
        case "eggs": this.add(0.98 * quantity); break;
        case "milk": this.add(1.23 * quantity); break;
        case "magazine": this.add(4.99 * quantity); break;
        case "chocolate": this.add(0.45 * quantity); break;
        }
        return true;
    },
    //Add the voidLastTransaction Method here

    voidLastTransaction: function() {
        this.total -= this.lastTransactionAmount;
    }

};

cashRegister.scan('eggs',1);
cashRegister.scan('milk',1);
cashRegister.scan('magazine',1);
cashRegister.scan('chocolate',4);

//Void the last transaction and then add 3 instead
cashRegister.voidLastTransaction();
cashRegister.scan('chocolate',3);

//Show the total bill
console.log("Your Last transaction " + cashRegister.lastTransactionAmount)
console.log('Your bill is '+ cashRegister.total);
--------------------------
>
Your Last transaction 1.35
Your bill is 8.55
--------------------------




Задание - Окончание Курса!!
=========================
1) Класс для создания Перса со скидкой в Магазине
2) Счетчик стоимости покупки
3) Встроенный с Счетчик Метод Скана количества и Цен товаров
4) Встроенный метод удаления и Тотла Покупки стоимости последней трансакции (нет дублированию)
5) Встроенный метод применения Скидки к Тотлу покупки в зависимости от Объекта Персонажа 
6) встроенный метод toFixed(x) - Округление Числа до "х" знаков после запятой
---------------------------

function StaffMember(name,discountPercent){
    this.name = name;
    this.discountPercent = discountPercent;
}

var sally = new StaffMember("Sally",5);
var bob = new StaffMember("Bob",10);
// Create yourself again as 'me' with a staff discount of 20%
var me = new StaffMember("Yurii",20);


var cashRegister = {
    total: 0,
    lastTransactionAmount: 0,
    add: function(itemCost){
        this.total += (itemCost || 0);
        this.lastTransactionAmount = itemCost;
    },
    scan: function(item,quantity){
        switch (item){
        case "eggs": this.add(0.98 * quantity);
            break;
        case "milk": this.add(1.23 * quantity);
            break;
        case "magazine": this.add(4.99 * quantity);
            break;
        case "chocolate": this.add(0.45 * quantity); 
            break;
        }
        return true;
    },
    voidLastTransaction : function(){
        this.total -= this.lastTransactionAmount;
        this.lastTransactionAmount = 0;
    },
    // Create a new method applyStaffDiscount here
    applyStaffDiscount: function(pers) {
        this.total -= this.total*pers.discountPercent/100; 
        },
    
};

cashRegister.scan('eggs',1);        // Скан товара
cashRegister.scan('milk',1);
cashRegister.scan('magazine',3);
// Apply your staff discount by passing the 'me' object 
// to applyStaffDiscount
cashRegister.applyStaffDiscount(me);            // Объект персонажа

// Show the total bill
console.log('Your bill is '+ cashRegister.total.toFixed(2) + " Mstr " + me.name););
---------------------------
>
Your bill is 13.74 Mstr Yurii
---------------------------


Compleate !!!
Done.




