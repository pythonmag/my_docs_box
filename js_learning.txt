
Отличия Питон и ДжаваСкрипт
===========================
https://blog.glyphobet.net/essay/2557/



Ресурсы Мануалы JS  --   чистый язык
==================
	http://javascript.ru/tutorial/foundation        русский туториал

    http://www.w3schools.com/js/default.asp			лучший англо ресурс Учебник
------------------



ООП в JS / Наследование
=======================
PROTOTYPE

http://javascript.ru/tutorial/object/inheritance 
http://javascript.ru/tutorial/object/inheritance



JS AJAX
=======================
Теория
-----------
https://learn.javascript.ru/ajax




A tour of the differences between JavaScript and Python
=========================
https://blog.glyphobet.net/essay/2557/




Window      / основная иерархия
=================
window.document
window.location
window.navigator
window.screen
window.history



BOM
=========
screen:             робочий екран браузера;
location:           об’єкт, що відповідає за адресу поточної сторінки;
history:            історія навігації користувача в інтернеті;
window:             вікно браузера.



window.setTimeout
-----------------
window.setTimeout(foo, 2000)



window.setInterval
------------------
var i = 0;
setInterval(function(){
    console.log(i++);
     }, 700);



window.open()   / close()
---------------
var winn = window.open('http://i.ua')
winn.close()



window.location
---------------


js События в html документе (скрипты)
===================
    onclick 	    скрипт  	при клике
    ondblclick 	    скрипт  	при двойном клике
    onfocus 	    скрипт  	при получения фокуса
    onmousedown     скрипт  	при нажатии кнопки мышки
    onmousemove 	скрипт  	при движении курсора мышки
    onmouseout 	    скрипт  	когда курсор мышки покинет пределы   элемента
    onmouseover 	скрипт  	когда курсор мышки находится над элементом
    onmouseup 	    скрипт 	    когда кнопка мышки будет отпушена
    onkeydown 	    скрипт 	    при нажатии клавиши
    onkeypress 	    скрипт 	    при нажатии клавиши и последующего разжатия
    onkeyup 	    скрипт   	при разжатии клавиши
    onload 	        скрипт  	при загрузке в браузер документа



Уроки
==================
Простенький вводный Курс (Обрезанный)
---------------
Обучение JavaScript для начинающих. Часть 1. Введение в JavaScript
https://www.youtube.com/watch?v=fXi49EkrMPI&index=2&list=PLvItDmb0sZw8opJURj5eHdfdU5bnnhE5W



Обучение
===========================
Вся суть синтаксиса скобок js
=============================
и цикл if
---------------------
<script type="text/javascript">     ## вставлен в html как script
var x = 10;

if (x==10)
	{
	alert('x==10');
	alert('cool');
	}
else 
	{
	alert('x!==10');
	alert('not bed')
	}
## if / условие () / {;;} блок комманд / else / {;;} блок комманд

var message = (x==10) ? document.write("good massege") : document.write("bed massege");
## альтернативная запись как тернарный оператор 
</script>


==================
цикл switch / case
-----------------
https://www.w3schools.com/js/js_loop_for.asp
https://www.w3schools.com/js/js_switch.asp
https://www.w3schools.com/js/js_loop_while.asp
-----------------
<script type="text/javascript">
var x = '10';               ## значение строка
var y = 20;                 ## значение число

switch (x) {                ## Оператор "Какой из Кейсов из Тру" как в условии ()

	case (30):              ## значение кейса на сопоставление условию
		{
		document.write('111');      ## комманды если Тру
        ...
		}
		break;              ## выход из цикла - подстраховка

	case (20):
		{
		document.write('222');
		}
		break;	

	case '10':
		{
		document.write('333');
		}
		break;

    default:                ## по умолчанию - если все Кейсы не Тру
		{
		document.write('nothing');
		}
		break;
}
</script>


<script type="text/javascript">

var numm = prompt('Input number 22', '0')       ## ввод значения с экрана браузера	

if (numm == '22') {
	document.write('True string.</br><hr>');    ## блок комманд если Тру
	alert('True Alert');
}

else {
	document.write('False string.</br><hr>');   ## блок комманд если Фалс
	alert('False Alert');
}

document.write('Ending string');                ## выполениие без условия
</script>



=================
Массивы (простые)
-----------------
https://www.w3schools.com/js/js_arrays.asp
-----------------
<script type="text/javascript">

var mass = [1,2,3,4,5,6,7];             ## Массив / разноформатные значения

var mass1 = ['Sun', 'Man', 'Tus', 'Ths', 'Wen'];

document.write(mass, '</br>', '<hr>', mass1);   ## вывод многоэлементный
// document.write('');                          ## комментирование кода
// document.write('<hr>', mass1);

document.write('Ending string');

</script>



===========
Функции
-----------
https://www.w3schools.com/js/js_functions.asp
Обучение JavaScript для начинающих. Часть 4. Функции
https://www.youtube.com/watch?v=ZqA-ZsfOQjk
-----------
<script type="text/javascript">

function myFoo(name, age) {         ## aeyrwbz / Имя / параметры входные () / инструкции /
	document.write('My name is: ', name, '<br>');
	document.write('My age is: ', age, '<br>');	
	document.write('<hr>','Ending Foo', '<br>');
};

myFoo('Yurii', 40);                 ## Запуск(вызов) функции с передачей ей параметров

document.write('<hr>','Ending string');
</script>



=============
Объекты     / как Словарь в Python, но также вкладываются методы как Кастомные функции
-------------
https://www.w3schools.com/js/js_objects.asp
---------------
<script type="text/javascript">

var man = {name: 'Yurii',age: 40, job: 'programmer'}     ## Объект (как словарь)

document.write('name: ' + man['name'] + '<br>',     ## обращение к Параметрам Объекта
				' age: ' + man['name'] + '<br>',
				' job: ' + man['job'] + '<br>'
				)

document.write('<hr>' + 'Ending string Object' + '<br>' + '<hr>');

man['age'] = 35
man['name'] = 'Adray'                               ## переопределение параметров Объетка

document.write('name: ' + man['name'] + '<br>',     ## Опять вывод Параметров (изменились)
				' age: ' + man['name'] + '<br>',
				' job: ' + man['job'] + '<br>'
				)

document.write('<hr>' + 'Ending string Object' + '<br>' + '<hr>');

alert(man)
        ## [object Object]                                      -- выводит браузер
        ## Object { name="Adray",  age=35,  job="programmer"}   -- выводит дебагер 

</script>



=====================
Курс для более продвинутых (тоже обрезанный)
---------------------
Видеокурс JavaScript Advanced. Урок 1. Конструкторы и прототипы
https://www.youtube.com/watch?v=jXW5Z-MMYPA&index=2&list=PLvItDmb0sZw_-AAcqd6XeZxJMKdv55_mS



==================
Конструкторы
-------------------
Базовый Конструктор
-------------------
<script type="text/javascript">

var myObject = new Object();        ## Создается переменная как пустой объект-Конструктор

myObject.x = 10;                    ## Создаются/Переопределяются значения Параметров
myObject.y = 20;
myObject.rez = myObject.x * myObject.y;

document.write('my rez = ' + myObject.rez + '<br>');  
document.write(myObject + '<br>')

document.write('<hr>' + 'Ending string Object' + '<br>' + '<hr>');

</script>

результат на экране:
----------
my rez = 200
[object Object]
Ending string Object


Конструктор ДейтТайм объекта
---------------------
<script type="text/javascript">

var myDate = new Date();        ## без параметоров - значит объект на Текущий момент

document.write('my date = ' + myDate + '<br>');  

document.write('<hr>' + 'Ending string Object' + '<br>' + '<hr>');

</script>

результат на экране:
----------
my date = Sun Jul 16 2017 14:10:04 GMT+0300 (EEST)
Ending string Object



===================
Конструктор Функции
-------------------
не рекомендуется к использованию - не безопасен для иньекций
---------------------
<script type="text/javascript">

var myFoo = new Function('first', 'second', 'return (first+second);')
    // последнее выражение в Конструкторе - это Логика функции

var resoult = myFoo(10, 20)    ## создание Переменной из Конструктора Функции с параметрами
document.write(resoult)  

document.write('<hr>');

var resoult = myFoo(-20, 20)    ## создание еще одной переменной из Конструктора Функции
document.write(resoult)

</script>

результат на экране:
----------
30
0


======================
Кастомные Конструкторы Функций (типа Классов)
----------------------
Например как хранилища данных
----------------------
<script type="text/javascript">

function TestConst(x, y) {
	this.x = x;                             ## внутри Функциианипуляция данными через this
	this.y = y;
    this.summ = this.x + this.y             ## внутри все через this
	this.rez = function() {
		document.write('Summ = ' + this.summ + '<br>');     
        ## создан метод через аноноимную функцию в Конструкторе
}

var wan = new TestConst(10, 20);            ## переменная как Функция из Конструктора
var two = new TestConst(30, 40);            ## + сохраняет входные данных
var three = new TestConst(50, 60);

document.write(wan['x'] + '<br>');          ## вывод значений Атрибутов Инстанса
document.write(two['y'] + '<br>');

two.rez()           ## вызывается Метод в Инстансе Конструктора
three.rez()

</script>

результат на экране:
----------
10                  ## атрибут Инстанса 
40
Summ = 70           ## Метод Инстанса
Summ = 110




======================
Прототипы / Функции-конструкторы / инстансы -- связи
-----------------------
очень хорошо объяснено !!!
Лучшее видео о Прототипах / Конструкторах / Наследованиях /
-----------------------
ссылка на потом узучить 
Видеокурс JavaScript Advanced. Урок 1. Конструкторы и прототипы
https://www.youtube.com/watch?v=jXW5Z-MMYPA&index=2&list=PLvItDmb0sZw_-AAcqd6XeZxJMKdv55_mS
/ с 35 минуты

prototype / constructor / __proto__ / valueOf / toString / hasOwnProperty / typeOf
глобальные / локальные области видимости атрибутов и методов Объектов /
наследование через прототипы и их переопределение / 



====================
Работа с документами
--------------------
Видеокурс JavaScript Advanced. Урок 2. Работа с документами. (кратко)
https://www.youtube.com/watch?v=_TXrij55hhc&index=3&list=PLvItDmb0sZw_-AAcqd6XeZxJMKdv55_mS
--------------------
/ объект window / DOM - дерево / События - модель /

Способы подключения js кода
--------------------
1)
как скрипт в html
<script type="text/javascript">
    // js code;
</script>

2)
как внешняя ссылка
<script type="text/javascript" src='js/test.js'></script>

3)
как тело url запроса
<a href='javascript: js code'>Ссылка</>

4)
как обрабочик события через html атрибут
<input type='button' value='Do This' onclick='js code'>


=======================
Объект window. Тайминги
-----------------------
Видеокурс JavaScript Advanced. Урок 3. Объект window. Регулярные выражения.
https://www.youtube.com/watch?v=RyhD61lQtQw&index=4&list=PLvItDmb0sZw_-AAcqd6XeZxJMKdv55_mS



===================
JS и CSS
-------------------
Урок 4. JavaScript и CSS
https://www.youtube.com/watch?v=VcW9_LLCEK8&list=PLvItDmb0sZw_-AAcqd6XeZxJMKdv55_mS&index=5
http://htmlbook.ru/css

Методы подключения Стилей:
1)
извне / импорт внешнего css файла - ускоряет весь проет 
<link rel='stylesheet' type='text/css' href='styles.css'>

2)
глобально в файле / как блок стиля в файле
<style type='text/css'>
    p {color: red;}
</style>

3)
локально на элемент тег / как свойтсва тега
<p style="color: green; font-size: 25px;">Paragraph</p>



===========================
События и обработка событий
---------------------------
Урок 5. События и обработка событий (Часть 1)
https://www.youtube.com/watch?v=OpReSgy4sIM&list=PLvItDmb0sZw_-AAcqd6XeZxJMKdv55_mS&index=6

Способы отработки событий:  / DOM#0 / DOM#1 /
-------------------------
1)
как отрибут элемента тега
<p onclick="alert('Hello')">Text</>

2)
как вызов функции в атрибуте элемента
<p onclick="foo()">Text</>
<script>
    function foo() {
        alert('Hello');
    };
</script>

3)
внешний импорт (<p id="test">)
<script>
    var pa = document.getElementById("test");
    p.onclick = function(){}
</script>



======================
Формы и элементы формы
----------------------
Урок 7. Формы и элементы формы
https://www.youtube.com/watch?v=VR7Kkn_npqY&index=8&list=PLvItDmb0sZw_-AAcqd6XeZxJMKdv55_mS

<form action="<resource>">
    <input type="<text/checkbox/radio/button>" name="bu">
</form>

Доступ к формам:
---------------
1)
<form></form>
var fo1 = document.forms[0];         ## через массив форм по индексу 

2)
<form name='myForm'></form>
var fo2 = document.myForm;          ## через кастомное имя формы


<input type="" name="" value="" id="">
--------------------------------
type: button / checkbox / file / hidden / password / radio / text / submit /

name: для чтения данных на сервере  / (document.forms[0].<name>)

id: доступ к input по идентификатору    / (document.getElementById(<id.value>))

value: значения переменных для сервера



===========================
Cookies и сохранение данных на стороне клиента
---------------------------
Урок 8. Cookies и сохранение данных на стороне клиента
https://www.youtube.com/watch?v=q40cTfHq4WM&list=PLvItDmb0sZw_-AAcqd6XeZxJMKdv55_mS&index=9

document.cookie        ## доступ к массиву куккис в броузере

пример
---------------
function addCookie(){
    document.cookie = 'name=Yurii';         ## кукки идет в браузер
}
addCookie()


пример
----------------
> document.cookie
"djdtRedirectsPanel=on; csrftoken=No7ROqCmoeV6beN0seVsxid1jka7btMyaEmeCb3XDcCx3vwlIHA4mLFt4NaAkd2V; djdt=show"



====================
Урок 9. Работа с графикой на стороне клиента
------------------
https://www.youtube.com/watch?v=X49VEEr0Y_8&list=PLvItDmb0sZw_-AAcqd6XeZxJMKdv55_mS&index=10

можно генерировать и работать с изображениями на стороне клиента (не загружая сервер)
согласовывается с AJAX

SVG / VML / Canvas / SilverLight / Flash Player / 

Про методы загрузки фото и их замены / Про предзагрузку файлов в локальный Кеш браузера
В общем можно разобраться.



=======================
Урок 10. AJAX и HTTP протокол
-----------------------
https://www.youtube.com/watch?v=GnTuSHg9p5E&list=PLvItDmb0sZw_-AAcqd6XeZxJMKdv55_mS&index=11

Браузер и Сервер общаются через HTTP/S протокол / порты 80(HTTP) или 443(HTTPS)

обяснено HTTP Request / HTTP Response

отладчик fiddler2.com / паказывает структуры request/response





Django + JS
===========
1)
Как я создал Тест Страницу js+jquery на моем сайте
==========================

в файле вьюшки создал ссылку на шаблон:
---------------------
from django.shortcuts import render
def test_js(request):
    return render(request, 'students/test_js.html', {})


в файле urls создал паттерн
--------------------
# Test JS jquery code
    url(r'test_js/', test_js.test_js, name='test_js')

Итак учу JS по онлайн-учебнику и тут же тестю
---------------------
JavaScript изначально создавался для того, чтобы сделать web-странички «живыми». Программы
на этом языке называются скриптами. В браузере они подключаются напрямую к HTML и, как
только загружается страничка – тут же выполняются.

Во все основные браузеры встроен интерпретатор JavaScript, именно поэтому они могут
выполнять скрипты на странице. Но, разумеется, JavaScript можно использовать не только в
браузере. Это полноценный язык, программы на котором можно запускать и на сервере,


Что умеет JS
--------------
1) Создавать новые HTML-теги, удалять существующие, менять стили элементов, прятать,
    показывать элементы и т.п.
2) Реагировать на действия посетителя, обрабатывать клики мыши, перемещения курсора,
    нажатия на клавиатуру и т.п.
3) Посылать запросы на сервер и загружать данные без перезагрузки страницы (эта технология
    называется "AJAX").
4) Получать и устанавливать cookie, запрашивать данные, выводить сообщения…


В последние годы появилось много языков, которые добавляют различные возможности «поверх»
JavaScript, а для запуска в браузере – при помощи специальных инструментов «трансляторов»
превращаются в обычный JavaScript-код:
    
    1) CoffeeScript -– это «синтаксический сахар» поверх JavaScript. Он сосредоточен на
    большей ясности и краткости кода. Как правило, его особенно любят программисты на Ruby.
    
    2) TypeScript -- сосредоточен на добавлении строгой типизации данных. Он предназначен
    для упрощения разработки и поддержки больших систем. Его разрабатывает Microsoft.
    
    3) Dart -- интересен тем, что он не только транслируется в JavaScript, как и другие
    языки, но и имеет свою независимую среду выполнения, которая даёт ему ряд возможностей
    и доступна для встраивания в приложения (вне браузера). Он разрабатывается компанией
    Google.




developer.mozilla.org
Веб-технологии для разработчиков от mozilla
---------------------
    https://developer.mozilla.org/ru/docs/Web/JavaScript




=====================Начало Главы 1 "Основы JavaScript"==================================

<script>
==================
Программы на языке JavaScript можно вставить в любое место HTML при помощи тега SCRIPT
<script> ... </script>
Тег script содержит исполняемый код. Предыдущие стандарты HTML требовали обязательного
указания атрибута type, но сейчас он уже не нужен. Достаточно просто <script>.


внешний скрипт - указание источника
--------------
примеры:
<script src="/path/to/script.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.3.0/lodash.js"></script>


Если браузер видит тег <script>, то он по стандарту обязан сначала выполнить его, а потом показать оставшуюся часть страницы (html). Потому надо Стотреть куда вставить script - или в head (перед html) или в конце body (в конце html).


Асинхронная загрузка html / js  / async / defer
--------------------
Закгрузка на страницу происходит независимо html от js и кто первее
<script src="1.js" async></script>
<script src="2.js" async></script>

<script src="async.js" async></script>      // стаботает как только загрузится
<script src="defer.js" defer></script>      // подождет загрузки всего документа

Разница между async и defer: атрибут defer сохраняет относительную последовательность
скриптов, а async – нет. Кроме того, defer всегда ждёт, пока весь HTML-документ будет
готов, а async – нет.

Пример:
    <p>Важная информация теперь не ждёт, пока загрузится скрипт...</p>
    <script async src="https://js.cx/hello/ads.js?speed=0"></script>    // долго грузится
    <p>...Важная информация!</p>

внутренний script по умолчанию ведет себя как async, то есть как загрузился - сразу
выполнился 


;
===============

alert('hello Word');            // Последовательное выполение Команд
alert('hello Yurii');           // тут ; обязательно перед []
['name', 'java'].forEach(alert) //  список + Метод + Команда


Поэтому в JavaScript рекомендуется точки с запятой ставить. Сейчас это, фактически,
стандарт, которому следуют все большие проекты. !!!


Комментарии
=============
    // text         -- однострочные 
    /* code         -- многострочные
        text */


"use strict";
==============
Ставится в начали Скрипта
Переводит код (старый) в режим полной совместимости с новой директивой
Бывает что подключенная внешняя библиотека не поддержит "use strict".
А также IE9 не поддерживает.
Писать код с use strict следует лишь в том случае, если вы уверены, что описанных выше проблем не будет.


Переменные
===============
var name = 'Yurii ';            // var для объявлния переменной - обязательно!
var age = 40;
var job = ' programmer'

alert(name + age + job)         // Выведет конкатинацию Строки

var name = 'Yurii ';
var admin;
admin = name;           // Переопределение Переменной
alert(name)


Константы
=================
var COLOR_RED = "#F00";
var COLOR_GREEN = "#0F0";
var COLOR_BLUE = "#00F";

Договорились что Константы это переменные которые не подлежат изменению (в принципе можно)
И название Констанс явно указывают на свойства значения.


Название Переменных
===================
Правильные варианты:

var borderLeftWidth;        // стиль 'camalCase'
var border_left_width;      // как в Питоне

Смысл имени переменной – это «имя на коробке», по которому мы сможем максимально быстро
находить нужные нам данные.
Не нужно бояться переименовывать переменные, если вы придумали имя получше.
Современные редакторы позволяют делать это очень удобно и быстро. Это в конечном счете
сэкономит время потом.


6 Основных Типов Данных
=================

1) Числа
------------------
var n = 123;            // целые 
n = 12.345;             // дробные

alert( 1 / 0 );         // Infinity -- Ошибка "Бесконечность"

alert( "нечисло" * 2 ); // NaN -- ошибка, Некорректное вычисление


2) Строки
-----------------
var str = 'Yurii'       // тип кавычек - равнозначны
str = "Lena"


3) Булевый (логический) тип «boolean»
-----------------
var checked = true;     // например для чекбоксов
checked = false; 


4) Специальное значение «null»
------------------
var age = null;

Значение null не относится ни к одному из типов выше, а образует свой отдельный тип,
состоящий из единственного значения null. В JavaScript null не является «ссылкой на
несуществующий объект» или «нулевым указателем», как в некоторых других языках.
Это просто специальное значение, которое имеет смысл «ничего» или «значение неизвестно».


5) Специальное значение «undefined»
-----------------------
var x;
alert( x );             // выведет "undefined"

Значение undefined, как и null, образует свой собственный тип, состоящий из одного этого
значения. Оно имеет смысл «значение не присвоено».
Если переменная объявлена, но в неё ничего не записано, то её значение как раз и есть
undefined


6) Объекты «object»
-------------------
var user = {name: 'Yurii'};
Коллекция данных, типа словаря в Питоне


typeof 
===============
оператор типа

typeof function () {}        // function
typeof 'yurii'               // string
typeof null                  // object
typeof true                 // boolean
typeof false;                // boolean
typeof [23, 45];             // object
typeof {name: 'lena'};       // object
typeof undefined;            // undefined
typeof 23;                   // number
typeof 23.458;               // number
typeof 2/3;                  // NaN
alert(typeof NaN);           // number



alert(2+'0');           // '20'     // перевод в строку
alert(2+0)              // 2        // бинарное сложение


Операторы
===============

Присваивание
-------------
var a, b, c;
a = b = c = 2*3     // 6 все

остаток от деления %
-------------
7%2     // 1 - остаток


Инткермент(++) / Декремент(--)  
----------------
применяется только на переменных
var i = 5;
alert(++i);         // приращение на 1 => 6 и сохраняет
alert(--i);         // урезание на 1 => 5 и сохраняте

var i = 5;          
alert(i++);         // сначала выводит значение 5 а потом приращает (6)
alert(i--);         // сначала выводит знаяение 6 а потом урезает (5)


Побитовые операторы
-------------------
AND(и)          ( & )
OR(или)         ( | )
XOR(побитовое исключающее или)  ( ^ )
NOT(не)         ( ~ )
LEFT SHIFT(левый сдвиг)         ( << )
RIGHT SHIFT(правый сдвиг)       ( >> )
ZERO-FILL RIGHT SHIFT(правый сдвиг с заполнением нулями)    ( >>> )


Упрощенное присвоение
---------------------
var n = 2;
n += 5;             // теперь n=7 (работает как n = n + 5)
n *= 2;             // теперь n=14 (работает как n = n * 2)
alert( n ); // 14

    также работает на:  +,-,*,/,% и бинарных <<,>>,>>>,&,|,^.


Операторы Сравнения
-------------------
alert( "2" > "14" );        // true, неверно, ведь 2 не больше 14
      // сравнения кода симвлов строк

alert( +"2" > +"14" );      // false, теперь правильно, приведение к числам и сравнение

alert( '2' > 1 );           // true, сравнивается как 2 > 1
alert( '01' == 1 );         // true, сравнивается как 1 == 1
alert( false == 0 );        // true, false становится числом 0
alert( true == 1 );         // true, так как true становится числом 1.


=== Предпочтительно
-------------------
==  / !=        обычное сравнение (0 от false или 1 от true не отличимо)
или 
=== / !==       строгое сравнение (false это не 0)

Значения разных типов приводятся к числу при сравнении, за исключением 
строгого равенства === (!==).


null / undefined
----------------
undefined вообще нельзя сравнивать ! (нечто не определено)

При преобразовании в число null становится 0, а undefined становится NaN.

начения null и undefined равны == друг другу и не равны чему бы то ни было ещё

alert( null > 0 );      // false
alert( null == 0 );     // false
alert(null >= 0);       // true

Значения null и undefined равны == друг другу и не равны ничему другому. В других сравнениях
(с участием >,<) их лучше не использовать, так как они ведут себя не как 0.


32-х битные Двоичные числа
==========================
a = 0;  // 00000000000000000000000000000000
a = 1;  // 00000000000000000000000000000001     // всего 32 бита-индекса
a = 2;  // 00000000000000000000000000000010     // 0+2
a = 3;  // 00000000000000000000000000000011     // 1+2
a = 255;// 00000000000000000000000011111111     // 1+2+4+8+16+32+64+128


Например, вот число 314:
    00000000000000000000000100111010
Чтобы получить -314, первый шаг – обратить биты числа: заменить 0 на 1, а 1 на 0:
    11111111111111111111111011000101       

Побитовое И (AND)   / a & b	/   
    Ставит 1 на бит результата, для которого соответствующие биты операндов равны 1.

Побитовое ИЛИ (OR)  / a | b / 
	Ставит 1 на бит результата, для которого хотя бы один из соответствующих битов
    операндов равен 1.

Побитовое исключающее ИЛИ (XOR) / a ^ b  /	
    Ставит 1 на бит результата, для которого только один из соответствующих битов операндов
    равен 1 (но не оба).

Побитовое НЕ (NOT)  / ~a    /
    Заменяет каждый бит операнда на противоположный.

Побитовые операторы работают следующим образом:
----------------------------
1) Операнды преобразуются в 32-битные целые числа, представленные последовательностью битов.
    Дробная часть, если она есть, отбрасывается.
2) Для бинарных операторов – каждый бит в первом операнде рассматривается вместе с
    соответствующим битом второго операнда: первый бит с первым, второй со вторым и т.п.
    Оператор применяется к каждой паре бит, давая соответствующий бит результата.
3) Получившаяся в результате последовательность бит интерпретируется как обычное число.



parseInt    / toString
=======================
var a = parseInt('11100111', 2);
console.log(a);                 // 231  - из двоичного в десятичное число

var b = a.toString(2);
console.log(b);                 // 1110111  - из десятичного в двоичное число

var b = a.toString(8);
console.log(b);                 // 347  - из десятичного в восмеричное число и т.д.


Побитовые операции подробнее
============================
по ссылке:
http://learn.javascript.ru/bitwise-operators#побитовое-и
пока не интересно (это потом)

Побитовые операторы используются редко, но всё же используются.

Пример побитовых операцый / Код доступа:
-------------------------
Например, Гость может лишь просматривать статьи сайта, а Редактор – ещё и редактировать их,
и тому подобное.
Что-то в таком духе:
Пользователь	Просмотр статей	Изменение статей	Просмотр товаров	Изменение товаров
Управление правами
Гость   	Да	Нет	Да	Нет	Нет
Редактор	Да	Да	Да	Да	Нет
Админ	    Да	Да	Да	Да	Да
Если вместо «Да» поставить 1, а вместо «Нет» – 0, то каждый набор доступов описывается числом:

Пользователь	Просмотр статей	Изменение статей	Просмотр товаров	Изменение товаров	Управление правами	В 10-ной системе
Гость   	1	0	1	0	0	= 20
Редактор	1	1	1	1	0	= 30
Админ	    1	1	1	1	1	= 31
В последней колонке находится десятичное число, которое получится, если прочитать строку доступов в двоичном виде.
Например, доступ гостя 10100 = 20.


Округление по-побитному
-----------------------
alert(12.3 * 14.5 ^ 0);     // (=178) "12.3 умножить на 14.5 и округлить"
alert( ~~12.345 );          // 12   -- побитное НЕ
alert( 12.345 ^ 0 );        // 12   -- побитное ИЛИ



alert('Сообщение')
------------------
Выдает сообщение содержимого в отдельной панельном окне


prompt("ССообщение", defoult)
------------------
default - значение по умолчанию, лучше всегда указывать пусть и пустой строкой ''

var foo = prompt('Сколько тебе лет чувак', 40)      // предложит 40 в поле для ввода
alert(foo)

пример:
------------
var foo = prompt('Введите ваше Имя', 'John')
alert('Ваше имя: ' + foo)


confirm('Сообщение-Вопрос да/нет')
------------------
var foo = confirm('ты луюишь язык Питон ??')
alert(foo)      // выдаст true / false в завмсимости от выборя пользователя


alert выводит сообщение.
------------------
prompt выводит сообщение и ждёт, пока пользователь введёт текст, а затем возвращает
введённое значение или null, если ввод отменён (CANCEL/Esc).
------------------
confirm выводит сообщение и ждёт, пока пользователь нажмёт «OK» или «CANCEL» и возвращает
true/false.
------------------



if () {}
? оператор
===============
Логический контекст значений для if:    
    Число 0, пустая строка "",
    null и undefined, а также NaN являются false,
    Остальные значения – true.


var foo = prompt('Сколько букв в слове СМЕТАНА')

if (foo == 7) {
    alert('правильно 7')}
else {
    alert('неправильно')}


var foo = prompt('Выберите одно из 3 чисел: 11, 22 или 33');

if (foo == 11) {
    alert('ты выбрал 11')}

else if (foo == 22) {
    alert('ты выбрал 22')}

else if (foo == 33) {
    alert('ты выбрал 33')}


специальный оператор ?
======================
var age = prompt('возраст?', 18);
var message =   (age < 3) ? 'Здравствуй, малыш!' :      // если условие 1 то строка1
                (age < 18) ? 'Привет!' :                // если условие 2 то строка2
                (age < 100) ? 'Здравствуйте!' :         // если условие 3 то строка3
                              'Какой необычный возраст!';   // иначе строка 4
alert( message );

var company = prompt('Какая компания создала JavaScript?', '');
(company == 'Netscape') ? alert('Да, верно'):
                        alert('Неправильно');           // true или false


Классический пример / обрати внимание как кавычки
---------------------
var item = prompt('Введите Число');
if (item > 1) {al ='Number > 1'}
else if (item < 0) {al = 'Number < 0'}
else (al = 'number == 0');
alert(al)


Пример вложенного условия
сам разобрался
-------------------------
var item1 = prompt('Кто пришел?');
if (item1 == 'админ')
    {
    var item2 = prompt('Ваш пароль?');
    if (item2 == '1234') {al2 = 'Добро пожалывать!'}
    else {al2 = 'Пароль не верен'}
    alert(al2)
    }
else {al1 = 'Я вас не знаю'}
alert(al1)



ИЛИ     ||
====================
базовая Логика
--------------------
alert( true || true ); // true
alert( false || true ); // true
alert( true || false ); // true
alert( false || false ); // false

var work = prompt('Введите час в котором вы придете', '9');
if (work < 9 || work > 18) {
    alert('not working')}
else {alert('its working')};

Итак, оператор || вычисляет операнды слева направо до первого «истинного» и возвращает его, а если все ложные – то последнее значение.

var undef; // переменная не присвоена, т.е. равна undefined
var zero = 0;
var emptyStr = "";
var msg = "Привет!";
var result = undef || zero || emptyStr || msg || 0;
alert( result ); // выведет "Привет!" - первое значение, которое является true

alert( undefined || '' || false || 0 );     // выведет 0 (до последнего false)



И   &&
==================
Базовая логика 
------------------
alert( true && true ); // true
alert( false && true ); // false
alert( true && false ); // false
alert( false && false ); // false

Итак, оператор && вычисляет операнды слева направо до первого «ложного» и возвращает его, а если все истинные – то последнее значение.

alert( 1 && 2 && null && 3 );           // null     вернет первый false

alert( 1 && 2 && 3 );                   // 3        вернет последний true

var num = prompt('input number');
if (num >= 14 && num <= 90) {alert('Yes')}      // двойное И условие



! (НЕ)
=================
alert( !true );             // false
alert( !0 );                // true



Преобразование в Строку     / String()  / + 
=======================
alert( String(null) === "null" );           // true     то есть 2 строки равны

alert( true + "test" ); // "truetest"       // + преобразовывает в Строку (типа конкатинация)
alert( "123" + undefined ); // "123undefined"


Преобразование в Число    / Number()  / + 
=======================
var a = +"123";             // 123      (типа Конкатинация)
var a = Number("123");      // 123, тот же эффект
alert( +"   \n  123   \n  \n" );        
                // 123  - при Конкатинации все экранированные символы нафиг! 


Специальные значения преобразуются к числу так:
---------------------
Значение	    Преобразуется в...
undefined	    NaN
null	        0

null и undefined равны "==" между собой, но эти значения не равны никакому другому значению.


В JavaScript есть три преобразования:
======================
Строковое: String(value) – в строковом контексте или при сложении со строкой.
        Работает очевидным образом.
Численное: Number(value) – в численном контексте, включая унарный плюс +value.
        Происходит при сравнении разных типов, кроме строгого равенства.
Логическое: Boolean(value) – в логическом контексте, можно также сделать
        двойным НЕ: !!value.



Цикл while
=================
var count = 0;
while (count < 7) {
    console.log(count)
    count++             // тут все понятно итерация по циклу + приращение переменной на 1
    }


do ... while
=================
var count = 0;
do {                    // перевернутое написание кода цикла через do ... while
    console.log(count)
    count++
    }
while (count < 7)

Домашка:
------------
var str = prompt('Введите Число больше 100 или попрощу еще раз', '');

while (str <= 100) {
    str = prompt('Введите Число больше 100 или попрощу еще раз', '')
    }

alert('The End')




Цикл for
==================
базовая логика - важно !
------------------
for (начало; условие; шаг) {
  // ... тело цикла ...
}

for (var count = 0; count <= 7; count++) {       // аналогичный цикл с приращением
    console.log(count)
}



break - Прерывание выполения Цикла / Выход из цикла
=======================
var sum = 0;
while (true) {
    var num = +prompt('Введите Чило - все суммирует', '');
    if (!num) break;                // Если не ввели значение а нажата Отмена
    sum += num;
}
alert('Итого Сумма чисел:  ' + sum + ' :)')



continue - Переход на следующую итерацию Цикла без завершения Текущей
========================

var sum = 0;
while (true) {
    var num = +prompt('Введите Чило - все суммирует', '');
    if (!num) break;
    if (num%2 ==0) continue;        // Четные Числа в вычилении игнорируются
    sum += num;
}
alert('Итого Сумма чисел:  ' + sum + ' :)')



Метки для break/continue
========================
указывает точку куда выйти при останове
------------------------

x: for (var a = 2; a < 20; a++) {
    for (var b = 3; b <  30; b++) {
        var sum = a + b;
        if (sum > 15) break x;          
            // Если сумма превызило значение то выход из Обоих циклов (до метки)
        console.log('Sum = '+ sum);
    }
}
alert("The End")


Итог по циклам
==============
JavaScript поддерживает три вида циклов:
    while – проверка условия перед каждым выполнением.
    do..while – проверка условия после каждого выполнения.
    for – проверка условия перед каждым выполнением, а также дополнительные настройки.

Чтобы организовать бесконечный цикл, используют конструкцию while(true). При этом он, как
и любой другой цикл, может быть прерван директивой break.

Если на данной итерации цикла делать больше ничего не надо, но полностью прекращать цикл
не следует – используют директиву continue.

Обе этих директивы поддерживают «метки», которые ставятся перед циклом. 
Метки – единственный способ для break/continue повлиять на выполнение внешнего цикла.
Заметим, что метки не позволяют прыгнуть в произвольное место кода, в JavaScript нет
такой возможности.



switch      // Переключатель
================
var num = prompt('Введите число 10 или 20 или 30', '')

switch (+num) {                 // строку приводим числу
    case 10:                    // выбор по числу
        alert('Меньше чем 20');
        break;
    case 20:
        alert('Как раз то что надо - 20');
        break;
    case 30:
        alert('Больше чем 20');
        break;
    default:
        alert('Что то не то ввели');
}


объединение Кейсов
----------------------
var num = prompt('Введите число 10 или 20 или 30', '')

switch (+num) {
    case 20:
        alert('Как раз то что надо = 20');
        break;
    case 10:
    case 30:
        alert('Нет, Это число не 20');
        break;
    default:
        alert('Что то не то ввели');
}



Функции
===================
базовая логика
-------------------
function showMessage() {        // объявление функции + имя + аргументы
  alert( 'Привет всем присутствующим!' );
}
showMessage();                  // вызов функции + повторный вызов функции
showMessage();


Локальные Переменные    / Глобальные переменные
--------------------
var mess1 = prompt('Ваше Имя: ')        // Глобальная переменная
        // Глобалная переменная может быть переписана внутри функции - так и останется


function fooTest() {
    mess = 'Привет Мир'         // Локальная переменная / не доступна вне функции
    alert(mess + mess1)         // Глобальная переменная доступна внутри функции
}
fooTest()


Пример
---------------
function count() {
    for (var x=0; x<4; x++) {
        var y = x * 2;
    }
    alert(x);       // Даст 4 по итогу цикла
    alert(y);       // Даст 6 (3*2) по итогу цикла
}
count()
alert(x)            // Не сработает так как вне функции / локальная переменная



Входные параметры Функции
-------------------------
var from = prompt('Ваше Имя: ');

function myMessage(item) {
    mess = 'Вас Зовут ' + item;
    alert(mess);
}

myMessage(from)             // передается входной параметр при вызоые функции
myMessage('Никак')          // второй вызов функции - новый параметр входа



Возврат значения Функции
==================
function calcD(a,b,c) {
    var d = a*a + 4*b*c;
    return d;               // Завершает Функцию и возвращает результат
}

var test = calcD(1,2,3)
console.log(test)           //  25
var test1 = calcD(2,4,6)
console.log(test1)          //  100


Как назвать функцию
-------------------
Имя функции следует тем же правилам, что и имя переменной. 
Основное отличие – оно должно быть глаголом, т.к. функция – это действие.

Функции, которые начинаются с "show" – что-то показывают:

showMessage(..)     // префикс show, "показать" сообщение
Функции, начинающиеся с "get" – получают, и т.п.:
getAge(..)          // get, "получает" возраст

Функция должна делать только то, что явно подразумевается её названием. 
И это должно быть одно действие.
Если оно сложное и подразумевает поддействия – может быть имеет смысл выделить их в
отдельные функции? Зачастую это имеет смысл, чтобы лучше структурировать код.

function showMovie(age) {       // функция запускает видео
  if (!checkAge(age)) {         // функция возвращает проверку доступа по возрасту
    return;
  }
   alert( "Фильм не для всех" );
  // ...
}

Имена функций, которые используются очень часто, иногда делают сверхкороткими.
Например, во фреймворке jQuery есть функция $, во фреймворке Prototype – функция $$,


Главные моменты Функций:
=======================
 -- Передаваемые значения копируются в параметры функции и становятся локальными
    переменными.
 -- Параметры функции копируются в её локальные переменные.
 -- Можно объявить новые локальные переменые при помощи var.
 -- Значение возвращается оператором return ....
 -- Вызов return тут же прекращает функцию.
 -- Если return; вызван без значения, или функция завершилась без return,
    то её результат равен undefined.
 -  При обращении к необъявленной переменной функция будет искать внешнюю переменную
    с таким именем, но лучше, если функция использует только локальные переменные:



Функциональные Выражения   vs  Декларация Функции
=================================================

Пример
----------------
function sayHallo() {
    alert('Hallo Word!')
    }

alert(sayHallo)     // Выведет код функции так так скопировал код а не вызывал Функцию
                    // без скобок ()
var test = sayHallo
test()              // в новую переменную скопировали код Функции и вызвали как функцию

Функция - это всего лишь разновидность значения переменной!


------------------------
// Function Declaration     // Декларация Функции - есть имя функции
function sum(a, b) {
  return a + b;
}


Основное отличие между ними: функции, объявленные как Function Declaration, создаются
интерпретатором до выполнения кода.     // То есть могут быть вызваны до создания кода.
Это из-за того, что JavaScript перед запуском кода ищет в нём Function Declaration
(их легко найти: они не являются частью выражений и начинаются со слова function) и
обрабатывает их.


// Function Expression      // Функциональное Выражение - есть имя переменной
var sum = function(a, b) {
  return a + b;
}
------------------------


Условное Объявсление Функции
=============================
var age = prompt('Сколько вам лет?');
var sayHi = (age >= 18) ?
  function() { alert('Прошу Вас!');  } :        // если true - условное объявление функции
  function() { alert('До 18 нельзя'); };        // если false
sayHi();                                        // конструкция выполняется Быстрее!!

но так кажется понятнее:
-----------------------
var age = prompt('Сколько вам лет / до 18 или от 18 ?/');
var myAge;

if (age <=18) {
    myAge = function() {
    alert('Я еще малолетка')};
}
else {
    myAge = function() {
    alert('Я уже взрослый')};
}

myAge()
----------------------

Вариант вообще без функции  + множественное уловие ИЛИ
var age = prompt('Сколько вам лет?');
var sayHi = (age >= 18 || 15 || 10) ?
  alert('Прошу Вас!') :             // если true - условное объявление функции
  alert('До 18 нельзя');            // если false



new Function    --  типа lambda функция в python
====================

var foo = new Function('a,b,c', 'return a*b*c');    //  ('параметры', "код")
res = foo(2,3,4);
console.log(res);       //24


Комментарии по созаднию Функций
========================
Функции в JavaScript являются значениями.!!
Их можно присваивать, передавать, создавать в любом месте кода.

Если нет явной причины использовать Function Expression – предпочитайте
Function Declaration.
=======================!!!!!!!!!!!!!!!!!!!!!!


Сравните по читаемости:
// Function Expression
var f = function() { ... }
// Function Declaration
function f() { ... }

Function Declaration короче и лучше читается.
Дополнительный бонус – такие функции можно вызывать до того, как они объявлены.


Домашнее Задание:   // Рекурсии
-----------------
Совсем затупил с вычислением Факториала

function f(n) {
  return n ? n * f(n - 1) : 1;
};

alert( f(4) ); // 120

Понял логику )) 4 умножается на 3 которое уже умножено на 2 которе уже умножено на 1
рекурскивно, значит используются все стеки данных одного и того же объекта при разных входных параметрах  


и вычеслением чисел Фибоначчи
Надо потом разобраться, ссылка на подсказки:
    http://learn.javascript.ru/recursion#tasks



Named Function Expression
=========================
именованное функциональное выражение
Имя функционального выражения (foo) имеет особый смысл.
Оно доступно только изнутри самой функции.

var f = function foo(...) { /* тело функции */ };

(foo) - это ссылка на объект внутри функции, даэе если функция удалена, но она была
скопирована переменной, то через сссылку переменная сможет воспользоваться логикой

Пример расчета факториала от числа
-------------------------
getFactorial - сылка на объект функции который доступен рекурсивно только в пределах функции
, удобен внутри функции для логики, но Внешний вызов функции только через переменную
 
var f = function getFactorial (n) {
  return n ? n * getFactorial(n - 1) : 1;
};
f(5);           // 120


Разновидности Генераторов Функций
=================================

() - оператор группировки для создания отложеннго в дейтсвии Функционального выражения
function foo() { return 1; }        // undefined	

function foo() { return 1; }();     // Uncaught SyntaxError: Expected () to start arrow function, but got '}' instead of '=>'
(function foo() { return 1; }())    // 1
(function foo() { return 1; })()    // 1

+function foo() { return 1; }();
-function foo() { return 1; }();
--function foo() { return 1; }();

, function foo() { return 1; }();
Оператор запятая вычисляет значение каждого своего операнда (слева направо) и возвращает
значение последнего операнда.


=====================Конец Главы 1 "Основы JavaScript"==================================




Остановился тут:
http://learn.javascript.ru/function-declaration-expression#bad-conditional-declaration





Теория JQuery
==================
    краткое толковое объяснение за 1 час
    ---------------------------
    https://www.youtube.com/watch?v=KmTK8kub_gw

    в 95% случаев используется чистый jQuery
    JS ипользуются только общие правила, назначение переменных, основные события и пр.
    Проще библиотеку(файл) jQuery скачать файликом и поместить локально в проект.
    http://jquery.com -- все там

    jQuery - Библиотека-Надстройка для JS
    --------------------
    Обеспечивает совместимость кода JS с любыми баузерами.

    Пример jQuery
    ----------------------
    знак долара, це jQuery - функція пошуку елемента на сторінці
    за даним селектором

    $("div.test").add("p.quote").addClass("blue").slideDown("slow");
        или лучше
    jQuery("div.test").add("p.quote").addClass("blue").slideDown("slow");

	    1) нашли тег div с классом test
	    2) в него добавили тег параграфа с классом quote   (метод .add)
	    3) для параграфа добавили еще класс blue   (метод .addClass)
	    4) добавили эффект развертывания вниз медленно    (метод slideDown)
        Указанные к коде методы - это ве методы jQuery
        jQury - весь состоит из методов, их дофига, они легче чем чистый JS

    
    вот внешняя ссылка на Гугле
    ---------------------------
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>


    вот все библиотеки под jQuery / Angular / React / на Гугле -- там список
    ----------------------------
    https://developers.google.com/speed/libraries/#jquery



Библиотеки jQuery
=================
	ссылки на Скрипт и Ресурсы
    --------------------------
	http://www.w3schools.com/jquery/jquery_get_started.asp

	в этом ресурсе есть все, и сылки и выбор серверов, и стаб версии
    --------------------------
	http://jquery.com/download/#jquery-39-s-cdn-provided-by-maxcdn
	
	ссылки на скачку
    ----------------
	http://jquery.com/download/#jquery-2-x
	http://jquery.com/download/#jquery-1-x
	http://jqueryui.com/download/
===================


Ресурсы Мануалы jQuery
======================
    http://jquery.page2page.ru	-- Шпаргалка jQuery / все функции и селекторы jQuery
    http://api.jquery.com   -- Полная документация по jQuery

    https://developers.google.com/speed/libraries/#jquery   -- ссылки на ресурсы
    http://www.w3schools.com/jquery/default.asp     -- хороший мануал

    http://jquery.com/	
	http://jqueryui.com/
   
    
    http://anton.shevchuk.name/jquery-book 
    -------------------------
    реальная Книга по jQuery на русском  -- листать на сайте
        

    jQuery для начинающих Часть 1
    ----------------------   
    http://anton.shevchuk.name/javascript/jquery-for-beginners  --  №1
    

    jQuery + AJAX + (Google Search API || Yahoo Search API)
    -----------------------------------
    http://anton.shevchuk.name/javascript/jquery-and-google-search-api-or-yahoo-search-api-yahoo-search-api/	

    


Легкий Видео Курс по оcновам JS
========================
	Javascript-джедай #1 - Введение -- от Sorex
    ------------------------
	https://www.youtube.com/watch?v=H6G63NKRSi8&list=PL363QX7S8MfSxcHzvkNEqMYbOyhLeWwem	

    Курс от Казаха - понятный
    -------------------------	
	http://habrahabr.ru/company/hexlet/blog/205902/



Парсер (Интерпритатор // Структуратор) выражений JS
    ---------------------
	http://esprima.org/demo/parse.html#



Ресурсы Мануалы JS  --   чистый язык
==================
	http://javascript.ru/tutorial/foundation        русский туториал

    http://www.w3schools.com/js/default.asp			лучший англо ресурс Учебник
	
	http://learn.javascript.ru/						лучший ру ресурс Учебник


AngularJS
==================


Ссылка на библиотеку (как jQuery)
--------------------    
    https://developers.google.com/speed/libraries/#angularjs

    https://ajax.googleapis.com/ajax/libs/angularjs/1.5.8/angular.min.js

    https://angularjs.org   -- там инфо об всех библиотеках JS
==================    



Концепуции ООП JS
-----------------
	http://javascript.ru/tutorial/object/inheritance

Python vs JS
	змінні в Javascript оголошуються ключовим словом var; в Python їх оголошувати
	не потрібно взагалі;
	в Python є змінні булеанівські True i False, в Javascript - true i false;
	ключове слово, яке позначає порожнє значення у Python позначається як None; в Javascript
	маємо два позначення: undefined i null;
	в Javascript є лише тип списку[]; в Python також є незмінні списки кортежі();
	те, що в Python декларується як тип даних словник, в Javascript є об’єктом
	в мові Python функція декларується ключовим словом def; в Javascript - function;
	ключове слово в ООП мови Python - self в Javascript мові перетворюється у this;
	ООП в двох мовах кардинально різні; в Javascript є підхід так званих прототипів;


A tour of the differences between JavaScript and Python
-------------------------
Фундаментальная статья о Различиях и собенностях JS vs Python
	https://blog.glyphobet.net/essay/2557


Код на Javascript зазвичай вставляється на сторінку з допомогою спеціальних тегів “script”
в заголовку сторінки (тег “head”), або перед закриваючим тегом “body”.
Знайшовши даний тег на сторінці, браузер піде на сервер за даною йому адресою в тезі, 
отримає файл, відкриє і спробує запустити код всередині нього.


Javascript код зазвичай виконує три функції:
=======================
	1) слідкує за змінами на сторінці та діями користувача;	   (События Event)
	2) відправляє запити на сервер;								(AJAX)
	3) оновлює елементи на веб-сторінці.						(DOM HTML)


События за которыми следит и реагирует JS:
===================
	1) onchange: 	HTML елемент зазнав змін;
	2) onclick: 	користувач клацнув мишкою по елементу;
	3) onmouseover: 	курсор мишки наведено над елементом;
	4) onmouseout: 	курсор мишки забрано з елемента;
	5) onkeydown: 	користувач натиснув клавішу;
	6) onload: 	браузер закінчив завантажувати елемент; це може бути сторінка, фрейм,
		зовнішній файл чи зображення.


Мониторинг Событий - 2 способа:
------------------
	1) Атрибут в Тэг необходимого элемента
	2) внешне через Функцию JS addEventListener;
	    Пример:
	    через document ми доступаємось до API роботи із
	    елементами на сторінці; в даному прикладі ми шукаємо
	    елемент з id="my-link" і навішуємо йому обробник кліка;
	    var mylink = document.getElementById('my-link');
	    mylink.addEventListener('click',
		function(event) {
			alert('my-link clicked!');
		    }
	    );


DOM (Document Object Model, Об’єктна Модель Документа)
JS имеет доступ к HTML/DOM через Глобальную переменную <document> 
==========================
Коли браузер завантажує HTML код сторінки, він формує ієрархічне дерево об’єктів,
що відповідає HTML структурі документа.
/ Пример чистого JS:
	var apple = document.getElementById('apple');
	apple.style.display = 'none';	
	    через documet методом "Взять элемент по id=apple" изменили стил элемента на невидимый.


Элементы Браузера (не DOM) к которым есть доступ JS:
BOM (Browser Object Model, Об’єктна Модель Браузера).
=========================
	1) screen: 	робочий екран браузера;
	2) location: 	об’єкт, що відповідає за адресу поточної сторінки;
	3) history: 	історія навігації користувача в інтернеті;
	4) window: 	вікно браузера.



AJAX - Асинхронный Запрос на Сервер с помощью JS через файл XML (JSON, HTML, текст)
==================
Дослідвно AJAX розшифровується як Асинхронний Javascript та XML. Javascript - керує логікою
і робить запит на сервер, а XML - це формат передач даних. Хоча XML вже давно не є єдиним
форматом передачі даних. Окрім нього використовують JSON, HTML, Javascript код та простий текст.

JSON - це словник або список із даними.

Вот Хорошая Логика Javascript з хорошим AJAX підходом в работе:
	1) динамічно валідувати кожне поле форми ще до відправки на сервер;
	2) якщо дані некоректні, не постити форму, а вказати на помилки;
	3) якщо дані коректні, зробити запит на сервер із заповненими даними;
	4) в той час як іде запит потрібно заблокувати кнопки і поля на формі, щоб уникнути
		 подальших змін;
	5) також показати індикатор, що запит в процесі;
	6) коли прийшли дані від сервера - обробити їх і, якщо пост форми був успішно оброблений
		на сервері, показати повідомлення з результатом;
	7) також очистити форму;
	8) якщо не успішно - вказати на помилки і не очищати поля форми;
	9) в будь-якому випадку потрібно також заховати індикатор того, що запит в процесі,
		адже він уже закінчився;
	10) також знову активувати кнопки і поля форми.



Bootstrap Datepicker -- Виджет Календаря для Форм плагін 
====================
http://eonasdan.github.io/bootstrap-datetimepicker/
	$('#datetimepicker').data("DateTimePicker").FUNCTION()


jQuery Form Plugin -- Для динамизации Форм  
---------------------
	http://malsup.com/jquery/form/


jQuery Cookie	-- Для управления cookies в Браузере 
---------------------
Данный плагин позволить динамизовать Выпадайку объектов (их Селект) по id. которое сохранится в cookies
	http://plugins.jquery.com/cookie/



Методы Дебагинга кода JS jQuery
==================
1) в html коде: 
	<script>
	a = 5;
	b = 6;
	c = a + b;
	console.log(c);			// выведет строку с результатом
	</script> 

2) в html коде:
	<p id="demo"></p>		// выведет параграф с результатом
	<script>
	var x = 15 * 5;
	debugger;
	document.getElementById("demo").innerHTML = x;
	</script>

3) Firefox Firebug


Django имеет минимально необходимый набор для работы через AJAX
=======================
1) request.is_ajax():	метод на об’єкті запиту, який повертає True для запитів типу AJAX;
		даний метод працює на базі спеціального заголовка, який браузер відсилає на сервер
		у випадку запиту через Javascript код;
2) json:	Python бібліотека, з допомогою якої будемо перетворювали Python дані у JSON
		 формат перед відправкою на клієнт;
3) django.core.serializers.json:	 перетворювач даних з бази в JSON формат.
4) django.http.JsonResponse: 	об’єкт відповіді, що правильно і з правильними заголовками
		 надішле на клієнт JSON дані.

Django умеет и это хорошо - и пока этого достаточно:
-------------------------
	1) відрізняти звичайні запити від AJAX запитів;
	2) правильно форматувати AJAX відповіді;
	3) розбирати дані на сервері під час AJAX запиту.


Кастомные конструкции jQuery в проекте:
============================
Тестовый код для проверки срабатывания (и правильного подключения) Кода JS (файл <name>.js)
--------------------------------------
// функция на примере действий над чекбоксами
// функция jQuery($) выбирает/возвращает все объекты на странице с классом <.day-box>
// тегом<input> которые имею тип <checkbox>
// функция $ отслеживает событие <click>-нажатие кнопки и вызывает модальное окно<alert>
// с сообщением<test>

	function initJournal () {
		$('.day-box input[type='checkbox']').click(function(event){
		alert('test');
		})
	}


// Но функция инициализации<initJournal> срабатывает только при условии готовности структуры
// документа(DOM) на странице
	$(document).ready(finction(){
		initJournal();
	});



стр.422 учебника Код отправки ajax запроса на Сервер - позже по готовности описать тут
---------------------
$.ajax ...



Плагин jQuery Cookie
====================
Это билиотека для JS которая облегчает работу с cookie - позволяет управлять или, удалать, 
добавлять на стороне Клиента и Сервера

Библиотека скачивается как файл js. Расположу ее в static папке с js файлами.
-----------------------
http://plugins.jquery.com/cookie/

Итересует файл 
v1.4.1/jquery.cookie.js


Скачать можно по разному например просто архив потом распаковать потом перетянуть в папку или так:
$ wget https://raw.githubusercontent.com/carhartl/jquery-cookie/v1.4.1/jquery.cookie.js
// из репозитория создателя библиотеки


Документация и Файлы в репозитории Автора библиотеки
------------
https://github.com/carhartl/jquery-cookie#usage



итого в конце тега body в базовом шаблоне уже есть Библиотеки JS
-----------------------
<!--Scripts-->
    <!-- jQuery library -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js"></script>
    <!--jQuery Cookie Plugin-->
    <script src="{% static 'js/jquery.cookie.js' %}"></script>
    <!-- Latest compiled JavaScript -->
    <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
<!--End Scripts-->



Установка Node.js
====================
https://nodejs.org/en/			// заходим сверяем версию 7.4.0
Копируем ссылку на исходники	// правая кнопка на ссылке архива
wget https://nodejs.org/dist/v7.4.0/node-v7.4.0-linux-x64.tar.xz	// качаю архив
tar -xvf node-v7.4.0-linux-x64.tar.xz		// распаковываю архив
cd node*		// захожу в папку (ryndin@pc:~/node-v7.4.0-linux-x64$ )
./configure		// захожу
make
make install


