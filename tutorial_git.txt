GITHUB and GITLUB -- мои аккаунты есть
=================



Порядок комманд в новом репозитории на GITHUB
=======================
echo "# test" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/pythonmag/test.git
git push -u origin master


далее добавлятеся
------------------
git add *
git commit -m 'second commit'
git remote add origin https://github.com/pythonmag/test.git
git push -u origin master

И так далее.


git log
история Коммитов
=============
commit da25e13ca455d934e6cff6fc1767661430cc6d8a (HEAD -> master, origin/master)
Author: Yurii Ryndin <ryndin@i.ua>
Date:   Thu Mar 28 21:31:58 2019 +0200

    second commit

commit 02af0fb495ca19c995b4917d6d58b2271af4effe
Author: Yurii Ryndin <ryndin@i.ua>
Date:   Thu Mar 28 21:25:59 2019 +0200

    first commit


git config --list
настройки репозитория
=================

user.email=ryndin@i.ua
user.name=Yurii Ryndin
alias.history=log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short
alias.go=checkout
push.default=matching
core.excludesfile=/home/ryndin/.gitignore_global
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
remote.origin.url=https://github.com/pythonmag/udemy_django.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master



*************************************************



GIT концептуальная статья от Виталия
==========================
http://www.vitaliypodoba.com/2014/06/git-basics/
если присмотреться внимательнее то в данной статье практически все есть для работы



https://githowto.com/ru
=======================
Основной интерактивный учебник про GIT



Удачная модель Ветвления для Git
(хороший умный человек порекомендовал)
===============
https://habrahabr.ru/post/106912/


.gitignore
==========
создание Файла
# Created by 
https://www.gitignore.io/api/django,python,pycharm


Наглядное Видео Слайды по GIT
Основные комманды
=================
https://www.youtube.com/watch?v=3a2x1iJFJWc
https://www.youtube.com/watch?v=JTE2Fn_sCZs
# чуть работы в репозитории github
https://www.youtube.com/watch?v=oPpnCh7InLY



практика
========
ryndin@pc:~$ sudo apt-get install git

    Чтение списков пакетов… Готово
    Построение дерева зависимостей       
    Чтение информации о состоянии… Готово
    Уже установлен пакет git самой новой версии (1:2.7.4-0ubuntu1).


глобальные настройки:
--------------------
ryndin@ubu:~/my_docs$ git config --global user.email "ryndin@i.ua"
ryndin@ubu:~/my_docs$ git config --global user.name "Yurii Ryndin"

проверка:
ryndin@ubu:~/my_docs$ git config --get user.name
Yurii Ryndin
ryndin@ubu:~/my_docs$ git config --get user.email
ryndin@i.ua



ryndin@pc:~$ git config

    использование: git config [<опции>]


ryndin@pc:~$ git config --list

    user.name=Yurii Ryndin
    user.email=ryndin@i.ua
    push.default=matching

    // это глобальные настройки для компа
    также можно задавать локальные настройки для локальной папки .git


ryndin@pc:~$ git config --get user.name
    Yurii Ryndin

ryndin@pc:~$ git config --get user.email
    ryndin@i.ua


git config --global user.name "Your Name"
git config --global user.email "your_email@whatever.com"

    // так задаются глобальные значения переменных



файлы гитигнор на все случаю жизни
==================================
https://www.gitignore.io/
https://github.com/github/gitignore


создание папки проекта
-----------------
ryndin@pc:~$ mkdir gitwork
ryndin@pc:~$ cd gitwork/
ryndin@pc:~/gitwork$ ls
ryndin@pc:~/gitwork$ touch hello.html
ryndin@pc:~/gitwork$ gedit hello


локальный гит репозиторий
-----------------
ryndin@pc:~/gitwork$ git init
Инициализирован пустой репозиторий Git в /home/ryndin/gitwork/.git/


создание локального стейджинга/индекса/запись об изменении
-----------------
ryndin@pc:~/gitwork$ git add .
    . всю папку

ryndin@pc:~/gitwork$ git add hello.html
    или по имени файла


добавление файла в локальный репозиторий / хранилище
-----------------
ryndin@pc:~/gitwork$ git commit -m 'Firest Commit'

    [master (корневой коммит) b2d96ab] Firest Commit
    1 file changed, 2 insertions(+)
    create mode 100644 hello.html


проверка статуса    / делать почаще
----------------
ryndin@pc:~/gitwork$ git status
    На ветке master
    нечего коммитить, нет изменений в рабочем каталоге


(если в рабочей папке изминили файл)
возврат состояния файла их репозитория в рабочую папку (если не было add)
-----------------------
ryndin@pc:~/gitwork$ git checkout hello.html


отмена создания стейджинга / индекса
(после reset (то есть ситуация до add) можно делать возврат версии checkout)
--------------------------
ryndin@pc:~/gitwork$ git reset

    Непроиндексированные изменения после сброса:
    M	hello.html


история коммитов (пока только 1 - начальный)
в коммите важны первые 7 цифер для работы
(commit b2d96ab)
=================
ryndin@pc:~/gitwork$ git log

    commit b2d96abe6861f51ff36741492420f39a1ce5a107
    Author: Yurii Ryndin <ryndin@i.ua>
    Date:   Wed Apr 19 19:52:21 2017 +0300
    Firest Commit

ryndin@pc:~/gitwork$ git commit -m 'add <h1> teg'

    [master 9155cfb] add <h1> teg
    1 file changed, 1 insertion(+), 1 deletion(-)

уже 2 коммита
--------------
ryndin@pc:~/gitwork$ git log
    commit 9155cfba9d8083891c0bcceb26b65d9f651e88a0
    Author: Yurii Ryndin <ryndin@i.ua>
    Date:   Wed Apr 19 20:18:12 2017 +0300
    add <h1> teg

    commit b2d96abe6861f51ff36741492420f39a1ce5a107
    Author: Yurii Ryndin <ryndin@i.ua>
    Date:   Wed Apr 19 19:52:21 2017 +0300
    Firest Commit
    

отображения в статусе
---------------------
1) изменения в индексе (после add .) 
2) изменения в файле (еще не было add)
---------------------
1) изменения в индексе отменяются как reset
2) изменения в файле отменяются как инфо из репозитория checkout
---------------------
ryndin@pc:~/gitwork$ git status
    На ветке master
    Изменения, которые будут включены в коммит:
    (используйте «git reset HEAD <файл>…», чтобы убрать из индекса)
    изменено:      hello.html

    Изменения, которые не в индексе для коммита:
      (используйте «git add <файл>…», чтобы добавить файл в индекс)
      (используйте «git checkout -- <файл>…», чтобы отменить изменения
       в рабочем каталоге)
    изменено:      hello.html


Если сделать коммит по войдет в репозиторий то, что уже было добавлено в индекс
или git commit -a



Коммит всех изменений файлов (commit -a) / и даже мимо индекса (без add)
----------------------------
ryndin@pc:~/gitwork$ git commit -am 'add commit all'
    [master 5e71b3c] add commit all
    1 file changed, 2 insertions(+), 1 deletion(-)


История коммитов (кратко в линию)
----------------
ryndin@pc:~/gitwork$ git log --pretty=oneline
    5e71b3cfd1977ec44f0ee8f10927e29d094a2278 add commit all
    adbba7e093f62af6c601a62ff7457402cfe35be4 add standart html teg
    9155cfba9d8083891c0bcceb26b65d9f651e88a0 add <h1> teg
    b2d96abe6861f51ff36741492420f39a1ce5a107 Firest Commit


Полная хелпа по Логу / Отображению истории
--------------------
ryndin@pc:~/gitwork$ git log --help


Форматированя лога под Себя (те самые 7 цифер хеша коммита - укороченный хеш)
----------------------------
ryndin@pc:~/gitwork$ git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short
    * 5e71b3c 2017-04-19 | add commit all (HEAD -> master) [Yurii Ryndin]
    * adbba7e 2017-04-19 | add standart html teg [Yurii Ryndin]
    * 9155cfb 2017-04-19 | add <h1> teg [Yurii Ryndin]
    * b2d96ab 2017-04-19 | Firest Commit [Yurii Ryndin]

Так рождаются Алиасы !


Создание Шортката / Алиаса для Лога
------------------
ryndin@pc:~$ ls -la
-rw-rw-r--  1 ryndin ryndin      76 Авг 14  2016 .gitconfig
        // в корневой папке копма находим глобальный файл настроек .gitconfig 

открытие файла конфигурации
--------------
ryndin@pc:~$ gedit .gitconfig 
    [user]
    	name = Yurii Ryndin
    	email = ryndin@i.ua
    [push]
	    default = matching

добавление алиаса в файл глобальной конфигруации (.gitconfig)
-----------------
[alias]
    history = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
    go = checkout


Применение Шортката / Алиаса Лога
-------------------
ryndin@pc:~/gitwork$ git history
    * 5e71b3c 2017-04-19 | add commit all (HEAD -> master) [Yurii Ryndin]
    * adbba7e 2017-04-19 | add standart html teg [Yurii Ryndin]
    * 9155cfb 2017-04-19 | add <h1> teg [Yurii Ryndin]
    * b2d96ab 2017-04-19 | Firest Commit [Yurii Ryndin]


1) Шорткат Лога -- взяли хеш коммита
2) сделал Чекаут через Шорткат go на Коммит по выбранному Хешу (с 4го на 2й) :)
---------------------
1)
ryndin@pc:~/gitwork$ git history
    * 5e71b3c 2017-04-19 | add commit all (HEAD -> master) [Yurii Ryndin]
    * adbba7e 2017-04-19 | add standart html teg [Yurii Ryndin]
    * 9155cfb 2017-04-19 | add <h1> teg [Yurii Ryndin]
    * b2d96ab 2017-04-19 | Firest Commit [Yurii Ryndin]

2)
ryndin@pc:~/gitwork$ git go 9155cfb
    Note: checking out '9155cfb'.

    You are in 'detached HEAD' state. You can look around, make experimental
    changes and commit them, and you can discard any commits you make in this
    state without impacting any branches by performing another checkout.

    If you want to create a new branch to retain commits you create, you may
    do so (now or later) by using -b with the checkout command again. Example:

      git checkout -b <new-branch-name>

    HEAD сейчас на 9155cfb... add <h1> teg
---------------------


Код под псевдонимом (например версия1)
-------------------
ryndin@pc:~/gitwork$ git tag v1

ryndin@pc:~/gitwork$ git status
    HEAD отделен на 5e71b3c
    нечего коммитить, нет изменений в рабочем каталоге


Откат на версию Родиделя кода под псевдонимом (можно откат на ^^... уровней)
------------------------
ryndin@pc:~/gitwork$ git go v1^
    Предыдущая позиция HEAD была 5e71b3c... add commit all
    HEAD сейчас на adbba7e... add standart html teg
ryndin@pc:~/gitwork$ git status
    HEAD отделен на adbba7e
    нечего коммитить, нет изменений в рабочем каталоге

ryndin@pc:~/gitwork$ git go v1^^
    Предыдущая позиция HEAD была adbba7e... add standart html teg
    HEAD сейчас на 9155cfb... add <h1> teg
ryndin@pc:~/gitwork$ git status
    HEAD отделен на 9155cfb
    нечего коммитить, нет изменений в рабочем каталоге


Список Псевдонимов / Версий кода
------------------
ryndin@pc:~/gitwork$ git tag
    v1
    v2

ryndin@pc:~/gitwork$ git history --all
(видны версии под псевдонимами / версиями)
    * 5e71b3c 2017-04-19 | add commit all (tag: v1, master) [Yurii Ryndin]
    * adbba7e 2017-04-19 | add standart html teg [Yurii Ryndin]
    * 9155cfb 2017-04-19 | add <h1> teg (HEAD, tag: v2) [Yurii Ryndin]      ** текущая
    * b2d96ab 2017-04-19 | Firest Commit [Yurii Ryndin]


Откат для файла который еще не в индексе / Откат из Репозитория
-----------------------
checkout / alias <go>
-----------------------
ryndin@pc:~/gitwork$ git go hello.html
    он же
ryndin@pc:~/gitwork$ git checkout hello.html


Отчистка / Откат Индекса (до Коммита)
------------------------
ryndin@pc:~/gitwork$ git reset HEAD <name>.html
------------------------
ryndin@pc:~/gitwork$ git status
    HEAD отделен на 5e71b3c
    Изменения, которые будут включены в коммит:
      (используйте «git reset HEAD <файл>…», чтобы убрать из индекса)
    	изменено:      hello.html

ryndin@pc:~/gitwork$ git reset HEAD hello.html
    Непроиндексированные изменения после сброса:
    M	hello.html


Сброс последнего Индекса / Коммита
------------------------
git reset --hard v1
------------------------
ryndin@pc:~/gitwork$ git go b7a1f84     ** коммит под удаление / мы на нем
    M	hello.html
    HEAD сейчас на b7a1f84... its bed commit

ryndin@pc:~/gitwork$ git reset --hard v1
(сброс до кода по псевдонимом)
    HEAD сейчас на 5e71b3c add commit all
ryndin@pc:~/gitwork$ git history
    * 5e71b3c 2017-04-19 | add commit all (HEAD, tag: v1, master) [Yurii Ryndin]
    * adbba7e 2017-04-19 | add standart html teg [Yurii Ryndin]
    * 9155cfb 2017-04-19 | add <h1> teg (tag: v2) [Yurii Ryndin]
    * b2d96ab 2017-04-19 | Firest Commit [Yurii Ryndin]

ryndin@pc:~/gitwork$ git reset --hard adbba7e
(сброс до кода по хешу)
    HEAD сейчас на adbba7e add standart html teg
ryndin@pc:~/gitwork$ git history
    * adbba7e 2017-04-19 | add standart html teg (HEAD) [Yurii Ryndin]
    * 9155cfb 2017-04-19 | add <h1> teg (tag: v2) [Yurii Ryndin]
    * b2d96ab 2017-04-19 | Firest Commit [Yurii Ryndin]


Но, даже удаленные коммиты соханяются и доступны Командой
--------------------------
(log --all)
ryndin@pc:~/gitwork$ git history --all
* 5e71b3c 2017-04-19 | add commit all (tag: v1, master) [Yurii Ryndin]
* adbba7e 2017-04-19 | add standart html teg (HEAD) [Yurii Ryndin]
* 9155cfb 2017-04-19 | add <h1> teg (tag: v2) [Yurii Ryndin]
* b2d96ab 2017-04-19 | Firest Commit [Yurii Ryndin]


Правка Коммита (на лету) / Без нового коммита
------------------------
1)
ryndin@pc:~/gitwork$ git add .
ryndin@pc:~/gitwork$ git commit -m 'add my name'
ryndin@pc:~/gitwork$ git commit -m 'add my name'
    [отделенный HEAD 1750e80] add my name
     1 file changed, 2 insertions(+), 1 deletion(-)
ryndin@pc:~/gitwork$ git history
    * 1750e80 2017-04-19 | add my name (HEAD) [Yurii Ryndin]
    * adbba7e 2017-04-19 | add standart html teg [Yurii Ryndin]
    * 9155cfb 2017-04-19 | add <h1> teg (tag: v2) [Yurii Ryndin]
    * b2d96ab 2017-04-19 | Firest Commit [Yurii Ryndin]

2) добавление
(-a чтобы сразу и add и commit / --amend - правка в рамках коммита / но новый хеш)
ryndin@pc:~/gitwork$ git commit --amend -am 'add my name and my age'
    [отделенный HEAD 7356802] add my name and my age
    Date: Wed Apr 19 22:50:54 2017 +0300
    1 file changed, 2 insertions(+), 1 deletion(-)
ryndin@pc:~/gitwork$ git history
* 7356802 2017-04-19 | add my name and my age (HEAD) [Yurii Ryndin]
* adbba7e 2017-04-19 | add standart html teg [Yurii Ryndin]
* 9155cfb 2017-04-19 | add <h1> teg (tag: v2) [Yurii Ryndin]
* b2d96ab 2017-04-19 | Firest Commit [Yurii Ryndin]

3) видно как коммит правился
ryndin@pc:~/gitwork$ git history --all
* 7356802 2017-04-19 | add my name and my age (HEAD) [Yurii Ryndin]
| * 5e71b3c 2017-04-19 | add commit all (tag: v1, master) [Yurii Ryndin]
|/  
* adbba7e 2017-04-19 | add standart html teg [Yurii Ryndin]
* 9155cfb 2017-04-19 | add <h1> teg (tag: v2) [Yurii Ryndin]
* b2d96ab 2017-04-19 | Firest Commit [Yurii Ryndin]


перемещение файла в пределах дирректории / репозитория
-----------------
ryndin@pc:~/gitwork$ ls
    hello.html

ryndin@pc:~/gitwork$ mkdir libb
ryndin@pc:~/gitwork$ git mv hello.html libb     ** сочетание гит и коммандной строки

ryndin@pc:~/gitwork$ ls
    libb
ryndin@pc:~/gitwork$ cd libb/
ryndin@pc:~/gitwork/libb$ ls
    hello.html

ryndin@pc:~/gitwork/libb$ cd ..
ryndin@pc:~/gitwork$ ls
    libb

ryndin@pc:~/gitwork$ git status
    HEAD отделен начиная с 5e71b3c
    Изменения, которые будут включены в коммит:
    (используйте «git reset HEAD <файл>…», чтобы убрать из индекса)
    переименовано: hello.html -> libb/hello.html

git commit -m "Moved hello.html to lib"

перемещая файлы с помощью git, мы информируем git о 2 вещах
    Что файл hello.html был удален.
    Что файл lib/hello.html был создан.
    Оба эти факта сразу же проиндексированы и готовы к коммиту.  (add уже случился)

аналогичная логика
------------------
mkdir lib               ** создали дирректорию
mv hello.html lib       ** переместили файл
git add lib/hello.html  ** в гит добавили файл/дирректорию
git rm hello.html       ** из гит удалили файл
git commit -m "Moved hello.html to lib"


Добавление нового файла в Дирректорию / Репозиторий
------------------------
ryndin@pc:~/gitwork$ git status
    HEAD отделен начиная с 5e71b3c
    Неотслеживаемые файлы:
    (используйте «git add <файл>…», чтобы добавить в то, что будет включено в коммит)
    index.html
    ничего не добавлено в коммит, но есть неотслеживаемые файлы (используйте «git add», чтобы отслеживать их)

ryndin@pc:~/gitwork$ git add .
ryndin@pc:~/gitwork$ git commit -m 'add index.html'
    [отделенный HEAD da54147] add index.html
     1 file changed, 9 insertions(+)
     create mode 100644 index.html

ryndin@pc:~/gitwork$ git history
* da54147 2017-04-20 | add index.html (HEAD) [Yurii Ryndin]
* a556e59 2017-04-20 | Moved hello.html to libb [Yurii Ryndin]
* 7356802 2017-04-19 | add my name and my age [Yurii Ryndin]
* adbba7e 2017-04-19 | add standart html teg [Yurii Ryndin]
* 9155cfb 2017-04-19 | add <h1> teg (tag: v2) [Yurii Ryndin]
* b2d96ab 2017-04-19 | Firest Commit [Yurii Ryndin]


Просмотр структуры Дирректории
-------------------
ryndin@pc:~/gitwork$ ls -C
    index.html  libb
ryndin@pc:~/gitwork$ ls -C .git
    branches  COMMIT_EDITMSG  config  description  HEAD  hooks  index  info  logs  objects  ORIG_HEAD  refs

ryndin@pc:~/gitwork$ ls -C .git/objects
    0a  17  34  35  36  45  54  59  5c  5e  60  6c  6f  73  8e  91  9f  a5  ad  b2  b7  c8  da  df  f0  info  pac
ryndin@pc:~/gitwork$ ls -C .git/objects/60
    af3c4e924efd3f39db203e88a0b8273e4e785e      ** зашифрованные данные
В файлах папки .git есть узнаваемые данные о настроках / коммитах / ветках / хешах / статусах и пр.
Подробнее об поиске и просмотре файлов в .git:
    https://githowto.com/ru/git_internals_working_directly_with_git_objects

 

Создание Ветки / Бренчи кода
===============
Пора сделать наш hello world более выразительным. Так как это может занять некоторое время,
лучше переместить эти изменения в отдельную ветку, чтобы изолировать их от изменений в
ветке master.


все 3 комманды идентичны:
------------------------
1)
ryndin@pc:~/gitwork$ git go -b style            ** алиас(go) + шорткат(-b)
    Переключено на новую ветку «style»
2)
ryndin@pc:~/gitwork$ git branch style           
    fatal: Ветка с именем «style» уже существует.
3)
ryndin@pc:~/gitwork$ git checkout -b style
    fatal: Ветка с именем «style» уже существует.

ryndin@pc:~/gitwork$ git status
    На ветке style              ** видно что новая ветка
    нечего коммитить, нет изменений в рабочем каталоге


для теста создам в новой ветке 3 коммита / для практики
----------------
ryndin@pc:~/gitwork$ touch libb/style.css

ryndin@pc:~/gitwork$ git status

    На ветке style
    Неотслеживаемые файлы:
      (используйте «git add <файл>…», чтобы добавить в то, что будет включено в коммит)
    дibb/style.css
    ничего не добавлено в коммит, но есть неотслеживаемые файлы (используйте «git add», чтобы отслеживать их)
ryndin@pc:~/gitwork$ git add .

ryndin@pc:~/gitwork$ git commit -m 'in new branch add style.css'

    [style b881302] in new branch add style.css
    1 file changed, 3 insertions(+)
    create mode 100644 libb/style.css

ryndin@pc:~/gitwork$ git status

    На ветке style                  ** на новой ветке
    нечего коммитить, нет изменений в рабочем каталоге
... и еще 2 коммита сделаю

ryndin@pc:~/gitwork$ git history
    * a3bfcb8 2017-04-20 | 3 commit in new branch (HEAD -> style) [Yurii Ryndin]
    * c3e6b23 2017-04-20 | 2 commit in new branch [Yurii Ryndin]
    * b881302 2017-04-20 | in new branch add style.css [Yurii Ryndin]    ** новая ветка
    * da54147 2017-04-20 | add index.html [Yurii Ryndin]
    * a556e59 2017-04-20 | Moved hello.html to libb [Yurii Ryndin]
    * 7356802 2017-04-19 | add my name and my age [Yurii Ryndin]
    * adbba7e 2017-04-19 | add standart html teg [Yurii Ryndin]
    * 9155cfb 2017-04-19 | add <h1> teg (tag: v2) [Yurii Ryndin]
    * b2d96ab 2017-04-19 | Firest Commit [Yurii Ryndin]
 

Навигация по Веткам
-------------------
1) создам псевдоним / метку для ветки
--------------------

ryndin@pc:~/gitwork$ git tag branch2

ryndin@pc:~/gitwork$ git history --all

    * a3bfcb8 2017-04-20 | 3 commit in new branch (HEAD -> style, tag: branch2) [Yurii Ryndin]
    * c3e6b23 2017-04-20 | 2 commit in new branch [Yurii Ryndin]
    * b881302 2017-04-20 | in new branch add style.css [Yurii Ryndin]
    * da54147 2017-04-20 | add index.html [Yurii Ryndin]
    * a556e59 2017-04-20 | Moved hello.html to libb [Yurii Ryndin]
    * 7356802 2017-04-19 | add my name and my age [Yurii Ryndin]
    | * 5e71b3c 2017-04-19 | add commit all (tag: v1, master) [Yurii Ryndin]
    |/  
    * adbba7e 2017-04-19 | add standart html teg [Yurii Ryndin]
    * 9155cfb 2017-04-19 | add <h1> teg (tag: v2) [Yurii Ryndin]
    * b2d96ab 2017-04-19 | Firest Commit [Yurii Ryndin]



Переключение на другую ветку
======================
ryndin@pc:~/gitwork$ git checkout master
    Переключено на ветку «master»
    или

ryndin@pc:~/gitwork$ git go master      ** [alias] go = checkout 
    Уже на «master»

ryndin@pc:~/gitwork$ git go style
    Переключено на ветку «style»

ryndin@pc:~/gitwork$ git checkout master
    Переключено на ветку «master»

ryndin@pc:~/gitwork$ git status
    На ветке master
    нечего коммитить, нет изменений в рабочем каталоге

для теста - изменения в ветке master
---------------------
ryndin@pc:~/gitwork$ touch README

ryndin@pc:~/gitwork$ ls

    hello.html  README

ryndin@pc:~/gitwork$ git status

    На ветке master
    Неотслеживаемые файлы:
      (используйте «git add <файл>…», чтобы добавить в то, что будет включено в коммит)
    README
    ничего не добавлено в коммит, но есть неотслеживаемые файлы (используйте «git add», чтобы отслеживать их)

ryndin@pc:~/gitwork$ git add README

ryndin@pc:~/gitwork$ git commit -m 'add README to branch master'

    [master 0d228b8] add README to branch master
    1 file changed, 2 insertions(+)
    create mode 100644 README

ryndin@pc:~/gitwork$ git tag        ** напомню себе как увидеть метки/псевдонимы
    branch2
    v1
    v2


Слияние веток / Вливание ветки в ветку /
+ Устранение конфликтов
==============
ryndin@pc:~/gitwork$ git go style
    Переключено на ветку «style»

ryndin@pc:~/gitwork$ git merge master

    Автослияние libb/hello.html
    КОНФЛИКТ (содержимое): Конфликт слияния в libb/hello.html
    Не удалось провести автоматическое слияние; исправьте конфликты и сделайте коммит результата.

вот сам конфликт (код в libb/hello.html):
----------------
    <!DOCTYPE html>
    <html>
    <head>
    	<title></title>
    	<!-- my name is Yurii / my age == 40 -->
    </head>
    <body>
    	<h1>Hello, Yurii</h1>
    	<h2>Hello, Mars</h2>
    </body>
    <<<<<<< HEAD:libb/hello.html
    </html>
    =======
    >>>>>>> master:hello.html       ** то есть в ветке master файл не в этой папке
    </html>


Пошагово Вливание ветки style to master
------------------------
1)  ** на ветке style

ryndin@pc:~/gitwork$ git go style

    Переключено на ветку «style»

2)  ** конфликт вливания

ryndin@pc:~/gitwork$ git merge master

    Автослияние libb/hello.html
    КОНФЛИКТ (содержимое): Конфликт слияния в libb/hello.html
    Не удалось провести автоматическое слияние; исправьте конфликты и сделайте коммит результата.

3)  ** ошибка вливания

ryndin@pc:~/gitwork$ git merge master

    error: merge is not possible because you have unmerged files.
    подсказка: Исправьте их в рабочем каталоге, затем запустите «git add/rm <файл>»,
    подсказка: чтобы пометить исправление и сделайте коммит.
    fatal: Exiting because of an unresolved conflict.

4)  ** отличия


ryndin@pc:~/gitwork$ git diff

diff --cc libb/hello.html
index 9371f7e,348de6b..0000000
deleted file mode 100644,100644
--- a/libb/hello.html
+++ /dev/null

5)  ** статус проблем

ryndin@pc:~/gitwork$ git status

    На ветке style
    У вас есть не слитые пути.
    (разрешите конфликты, затем запустите «git commit»)
    Изменения, которые будут включены в коммит:
    новый файл:    README
    Не слитые пути:
    (используйте «git add <файл>…», чтобы пометить разрешение конфликта)
    оба измены:     libb/hello.html
    Неотслеживаемые файлы:
    (используйте «git add <файл>…», чтобы добавить в то, что будет включено в коммит)
    	hello.html

6)  ** как рекомендуют исправляю

ryndin@pc:~/gitwork$ git add .

ryndin@pc:~/gitwork$ git status

    На ветке style
    Все конфликты исправлены, но вы все еще в процессе слияния.
      (используйте «git commit», чтобы завершить слияние)
    Изменения, которые будут включены в коммит:
    	новый файл:    README
	    переименовано: libb/hello.html -> hello.html

7)  ** делаю коммит как рекомендуют

ryndin@pc:~/gitwork$ git merge master

    fatal: Вы не завершили слияние (присутствует файл MERGE_HEAD).
    Выполните коммит ваших изменений, перед слиянием.

ryndin@pc:~/gitwork$ git commit -m 'fix error of merge branch'

    [style 0e8aac0] fix error of merge branch

8)  ** наконец произошло вливание ветки style в ветку master

ryndin@pc:~/gitwork$ git merge master

    Already up-to-date.

Рекомендуют инструменты для Слияний Веток
-----------------------
    http://stackoverflow.com/questions/137102/whats-the-best-visual-merge-tool-for-git


Откат/Сброс ветки style
-----------------
ryndin@pc:~/gitwork$ git history

    *   0e8aac0 2017-04-20 | fix error of merge branch (HEAD -> style) [Yurii Ryndin]
    |\  
    | * 0d228b8 2017-04-20 | add README to branch master (master) [Yurii Ryndin]
    | * 5e71b3c 2017-04-19 | add commit all (tag: v1) [Yurii Ryndin]
    * | a3bfcb8 2017-04-20 | 3 commit in new branch (tag: branch2) [Yurii Ryndin]
    * | c3e6b23 2017-04-20 | 2 commit in new branch [Yurii Ryndin]
    * | b881302 2017-04-20 | in new branch add style.css [Yurii Ryndin]
    * | da54147 2017-04-20 | add index.html [Yurii Ryndin]
    * | a556e59 2017-04-20 | Moved hello.html to libb [Yurii Ryndin]
    * | 7356802 2017-04-19 | add my name and my age [Yurii Ryndin]
    |/  
    * adbba7e 2017-04-19 | add standart html teg [Yurii Ryndin]
    * 9155cfb 2017-04-19 | add <h1> teg (tag: v2) [Yurii Ryndin]
    * b2d96ab 2017-04-19 | Firest Commit [Yurii Ryndin]

ryndin@pc:~/gitwork$ git reset --hard  a3bfcb8

(последние изменения на ветке style до слияния)
(в рабочем списке слияний уже не будет если только не --all)
    HEAD сейчас на a3bfcb8 3 commit in new branch

ryndin@pc:~/gitwork$ git status

    На ветке style
    нечего коммитить, нет изменений в рабочем каталоге


Откат /Сброс ветки master
------------------
ryndin@pc:~/gitwork$ git go master

    Переключено на ветку «master»

ryndin@pc:~/gitwork$ git history

    (только те коммиты, которые в ветке master)
    * 0d228b8 2017-04-20 | add README to branch master (HEAD -> master) [Yurii Ryndin]
    * 5e71b3c 2017-04-19 | add commit all (tag: v1) [Yurii Ryndin]
    * adbba7e 2017-04-19 | add standart html teg [Yurii Ryndin]
    * 9155cfb 2017-04-19 | add <h1> teg (tag: v2) [Yurii Ryndin]
    * b2d96ab 2017-04-19 | Firest Commit [Yurii Ryndin]

ryndin@pc:~/gitwork$ git reset --hard 5e71b3c 

    (упражнение в том чтобы сбросить ветку до момента конфликта веток)
    HEAD сейчас на 5e71b3c add commit all


Перебазирование / вместо Слияния/Вливания
rebase / вместо merge
=================
ryndin@pc:~/gitwork$ git checkout style

    Переключено на ветку «style»

ryndin@pc:~/gitwork$ git rebase master      ** master перебазировать в style

    Сначала перематываем указатель текущего коммита, чтобы применить ваши изменения поверх него…
    Применение: add my name and my age
    Использую индекс для реконструкции базового дерева…
    M	hello.html
    Откат к применению изменений к базовому коммиту с помощью трехходового слияния…
    Автослияние hello.html
    КОНФЛИКТ (содержимое): Конфликт слияния в hello.html
    error: Не удалось слить изменения.
    Ошибка применения изменений на 0001 add my name and my age
    Копию изменений, которые не удалось применить, вы можете найти в: .git/rebase-apply/patch

    Когда вы разрешите этот конфликт, запустите «git rebase --continue».
    Если вы хотите пропустить этот патч, то запустите «git rebase --skip».
    Чтобы перейти на оригинальную ветку и остановить перемещение, запустите «git rebase --abort».


ryndin@pc:~/gitwork$ git checkout adbba7e

   ** откатил на коммит без конфликтов в ветках
    Note: checking out 'adbba7e'.

    You are in 'detached HEAD' state. You can look around, make experimental
    changes and commit them, and you can discard any commits you make in this
    state without impacting any branches by performing another checkout.
    If you want to create a new branch to retain commits you create, you may
    do so (now or later) by using -b with the checkout command again. Example:
    git checkout -b <new-branch-name>
    HEAD сейчас на adbba7e... add standart html teg

ryndin@pc:~/gitwork$ git rebase master

    ** перебазирования в style прошло успешно
    Сначала перематываем указатель текущего коммита, чтобы применить ваши изменения поверх него…
    Перемотана вперед HEAD до master.
---------------------
Когда использовать перебазирование, а когда слияние?
    Не используйте перебазирование/перебазирование (rebase):
    ------------------------------
    1)
    Если ветка является публичной и расшаренной. Переписывание общих веток будет мешать работе других членов команды.
    2)    
    Когда важна точная история коммитов ветки (так как команда rebase переписывает историю коммитов).
    3)
    Учитывая приведенные выше рекомендации, я предпочитаю использовать rebase для кратковременных, локальных веток, а слияние для веток в публичном репозитории.


Вливание style в master
-----------------------
ryndin@pc:~/gitwork$ git go style

    Предыдущая позиция HEAD была 5e71b3c... add commit all
    Переключено на ветку «style»

ryndin@pc:~/gitwork$ git merge master

    Автослияние libb/hello.html
    КОНФЛИКТ (содержимое): Конфликт слияния в libb/hello.html
    Не удалось провести автоматическое слияние; исправьте конфликты и сделайте коммит результата.

ryndin@pc:~/gitwork$ git merge master

    error: merge is not possible because you have unmerged files.
    подсказка: Исправьте их в рабочем каталоге, затем запустите «git add/rm <файл>»,
    подсказка: чтобы пометить исправление и сделайте коммит.
    fatal: Exiting because of an unresolved conflict.

ryndin@pc:~/gitwork$ git add .

ryndin@pc:~/gitwork$ git merge master

    fatal: Вы не завершили слияние (присутствует файл MERGE_HEAD).
    Выполните коммит ваших изменений, перед слиянием.

ryndin@pc:~/gitwork$ git commit -m 'fix error befor merge style to master'

    [style 2382212] fix error befor merge style to master

ryndin@pc:~/gitwork$ git merge master

    Already up-to-date.
    (вроде вливать оказалосьт не чего итак все есть)



Коммандная работа / Несколько Репозиториев / Удаленные репозитории
========================================== !!

ryndin@pc:~/gitwork$ cd ..

ryndin@pc:~$ git clone gitwork gitwork_clone

    Клонирование в «gitwork_clone»…
    готово.

Появится 2 идентичных дирректории:
    ~/gitwork 
    ~/gitwork_clone

ryndin@pc:~$ cd gitwork_clone/

ryndin@pc:~/gitwork_clone$ git history      ** origin - указывает что удаленный клон это

    *   2382212 2017-04-20 | fix error befor merge style to master (HEAD -> style, origin/style, origin/HEAD) [Yurii Ryndin]
    |\  
    | * 5e71b3c 2017-04-19 | add commit all (tag: v1, origin/master) [Yurii Ryndin]
    * | a3bfcb8 2017-04-20 | 3 commit in new branch (tag: branch2) [Yurii Ryndin]
    * | c3e6b23 2017-04-20 | 2 commit in new branch [Yurii Ryndin]
    * | b881302 2017-04-20 | in new branch add style.css [Yurii Ryndin]
    * | da54147 2017-04-20 | add index.html [Yurii Ryndin]
    * | a556e59 2017-04-20 | Moved hello.html to libb [Yurii Ryndin]
    * | 7356802 2017-04-19 | add my name and my age [Yurii Ryndin]
    |/  
    * adbba7e 2017-04-19 | add standart html teg [Yurii Ryndin]
    * 9155cfb 2017-04-19 | add <h1> teg (tag: v2) [Yurii Ryndin]
    * b2d96ab 2017-04-19 | Firest Commit [Yurii Ryndin]
    (зашел в клонированную дирректорию и увидет, что вся история коммитов тоже есть)

ryndin@pc:~/gitwork_clone$ git status       ** origin

    На ветке style
    Ваша ветка обновлена в соответствии с «origin/style».
    нечего коммитить, нет изменений в рабочем каталоге
    (но есть индекс origin что указывает что этот клон по сути удаленный как бы)

ryndin@pc:~/gitwork_clone$ git remote

    origin
    (дословно6 удаленный репозиторий origin)


ryndin@pc:~/gitwork_clone$ git remote show origin

    (вся инфа о внешнем репозитории)
    * внешний репозиторий origin
      URL для извлечения: /home/ryndin/gitwork
      URL для отправки: /home/ryndin/gitwork
      HEAD ветка: style
      Внешние ветки:
        master отслеживается
        style  отслеживается
      Локальная ветка, настроенная для «git pull»:
        style будет слита с внешней веткой style
      Локальная ссылка, настроенная для «git push»:
        style будет отправлена в style (уже актуальна)



Ветки Локальные / и Удаленно расположенные
----------------
ryndin@pc:~/gitwork_clone$ git branch
    * style

ryndin@pc:~/gitwork_clone$ git go master

    Ветка master отслеживает внешнюю ветку master из origin.
    Переключено на новую ветку «master»

ryndin@pc:~/gitwork_clone$ git branch

    * master
      style

ryndin@pc:~/gitwork_clone$ git branch -a

    (2 локальных и 3 удаленно распол ветки)
    * master
      style
      remotes/origin/HEAD -> origin/style
      remotes/origin/master
      remotes/origin/style



Синхронизация Удаленного (оригинального) и Локального (клонированного) Репо
(на примере 2 дирректорий в компе)
========================
ryndin@pc:~/gitwork_clone$ cd ../gitwork

    переход в начальный / оригинальный / типа удаленный репозиторий

ryndin@pc:~/gitwork$ git add .

ryndin@pc:~/gitwork$ git status

    На ветке style
    Изменения, которые будут включены в коммит:
      (используйте «git reset HEAD <файл>…», чтобы убрать из индекса)
    новый файл:    README

ryndin@pc:~/gitwork$ git commit -m 'add README in origin repo'

    [style c607955] add README in origin repo
     1 file changed, 1 insertion(+)
     create mode 100644 README

ryndin@pc:~/gitwork$ cd ../gitwork_clone/

    (перешол в локальный/клон репозиторий)
    
ryndin@pc:~/gitwork_clone$ git fetch

    (команда Извлечения Коммитов из удаленного Репозитория / видно под --all)
    remote: Подсчет объектов: 3, готово.
    remote: Сжатие объектов: 100% (2/2), готово.
    remote: Total 3 (delta 0), reused 0 (delta 0)
    Распаковка объектов: 100% (3/3), готово.
    Из /home/ryndin/gitwork
    2382212..c607955  style      -> origin/style

ryndin@pc:~/gitwork_clone$ git go master

    Переключено на ветку «master»
    Ваша ветка обновлена в соответствии с «origin/master».

ryndin@pc:~/gitwork_clone$ git history --all

    * c607955 2017-04-20 | add README in origin repo (origin/style, origin/HEAD) [Yurii Ryndin]
    *   2382212 2017-04-20 | fix error befor merge style to master (style) [Yurii Ryndin]
    |\  
    | * 5e71b3c 2017-04-19 | add commit all (HEAD -> master, tag: v1, origin/master) [Yurii Ryndin]
    * | a3bfcb8 2017-04-20 | 3 commit in new branch (tag: branch2) [Yurii Ryndin]
    * | c3e6b23 2017-04-20 | 2 commit in new branch [Yurii Ryndin]
    * | b881302 2017-04-20 | in new branch add style.css [Yurii Ryndin]
    * | da54147 2017-04-20 | add index.html [Yurii Ryndin]
    * | a556e59 2017-04-20 | Moved hello.html to libb [Yurii Ryndin]
    * | 7356802 2017-04-19 | add my name and my age [Yurii Ryndin]
    |/  
    * adbba7e 2017-04-19 | add standart html teg [Yurii Ryndin]
    * 9155cfb 2017-04-19 | add <h1> teg (tag: v2) [Yurii Ryndin]
    * b2d96ab 2017-04-19 | Firest Commit [Yurii Ryndin]

ryndin@pc:~/gitwork_clone$ git go style

    Переключено на ветку «style»
    Ваша ветка отстает от «origin/style» на 1 коммит и может быть перемотана вперед.
      (используйте «git pull», чтобы обновить вашу локальную ветку)
       (предлагает сделать коммит из удаленного на локальный репо по ветке style)

!! нового файла README пока в локальном Репозитории Нет / он создан в Удаленном Репо

ryndin@pc:~/gitwork_clone$ git merge origin/master

(вливание из удаленного репо в локальный по ветке master)
    Already up-to-date.

ryndin@pc:~/gitwork_clone$ git merge origin/style

(вливание из удаленного репо в локальный по ветке style)
    Обновление 2382212..c607955
    Fast-forward
     README | 1 +
     1 file changed, 1 insertion(+)
     create mode 100644 README

!!!!!!!!!!!!!!!!!!
git pull  == git fetch && git merge origin/master

git pull  == git fetch && git merge origin/style
!!!!!!!!!!!!!!!!!!


Создание Удаленного Чистого Репозитория / repo.git
===========================
(этот принцип работы Github хранилища)

ryndin@pc:~/gitwork$ cd ..

ryndin@pc:~$ git clone --bare gitwork gitwork.git

    Клонирование в голый репозиторий «gitwork.git»…
    готово.

ryndin@pc:~$ cd gitwork.git/

(это папка с чистым кодом)

ryndin@pc:~/gitwork.git$ ls

    branches  config  description  HEAD  hooks  info  objects  packed-refs  refs


Эмитация синхронизации удаленного и локального Репозиториев
-----------------------
ryndin@pc:~/gitwork_clone$ cd ../gitwork

(типа удаленный репозиторий / новый файл README)

ryndin@pc:~/gitwork$ ls

    hello.html  README

ryndin@pc:~/gitwork$ git add .

ryndin@pc:~/gitwork$ git commit -m 'add new file'

    [master 38409a1] add new file
     1 file changed, 1 insertion(+)
     create mode 100644 README

ryndin@pc:~/gitwork$ git push shared master

(закидка в чичтый Репозиторий -- Типа как Github)
    Подсчет объектов: 3, готово.
    Delta compression using up to 2 threads.
    Сжатие объектов: 100% (2/2), готово.
    Запись объектов: 100% (3/3), 275 bytes | 0 bytes/s, готово.
    Total 3 (delta 0), reused 0 (delta 0)
    To ../gitwork.git
    5e71b3c..38409a1  master -> master

ryndin@pc:~/gitwork$ cd ../gitwork_clone/

(переход в локальный / клон репозиторий)

ryndin@pc:~/gitwork_clone$ ls

    hello.html

ryndin@pc:~/gitwork_clone$ git remote add shared master

(2 одинаковых каманды - относительно удаленного чистого репозитория)
    fatal: внешний репозиторий shared уже существует

ryndin@pc:~/gitwork_clone$ git remote add shared ../gitwork.git/

    fatal: внешний репозиторий shared уже существует

ryndin@pc:~/gitwork_clone$ git branch --track shared maste
r
    Ветка shared отслеживает локальную ветку master.

ryndin@pc:~/gitwork_clone$ git pull

(и Наконец то ! синхронизация из удаленного внешнего репо в Локальный / Клон репо)
    remote: Подсчет объектов: 3, готово.
    remote: Сжатие объектов: 100% (2/2), готово.
    remote: Total 3 (delta 0), reused 0 (delta 0)
    Распаковка объектов: 100% (3/3), готово.
    Из /home/ryndin/gitwork
    5e71b3c..38409a1  master     -> origin/master
    Обновление 5e71b3c..38409a1
    Fast-forward
    README | 1 +
    1 file changed, 1 insertion(+)
    create mode 100644 README


Запуск git сервера / + Клонирование как с сервера Github
=========================================================
ryndin@pc:~/gitwork_clone$ cd ..

1)
ryndin@pc:~$ git daemon --verbose --export-all --base-path=.

(запуск сервера git на локальной машине)
(wrom the ~ dir)
    [7809] Ready to rumble
    (запустил git сервер)

2)
ryndin@pc:~$ git clone git://localhost/gitwork.git gitwork_net

(команда клонирования - стандартная)
(набрать в другой командной строке чтобы не выключить сервер)
    Клонирование в «gitwork_net»…
    remote: Подсчет объектов: 44, готово.
    remote: Сжатие объектов: 100% (31/31), готово.
    Получение объектов: 100% (44/44), готово.
    Определение изменений: 100% (5/5), готово.
    remote: Total 44 (delta 5), reused 0 (delta 0)
    Проверка соединения… готово.
   
4)
(произошли такие команды на сервере)
    [7886] Connection from 127.0.0.1:33116
    [7886] Extended attributes (16 bytes) exist <host=localhost>
    [7886] Request upload-pack for '/gitwork.git'
    [7851] [7886] Disconnected


Это Все по курсу изучения GIT !! :))  20 арпеля 2017 года.
=============================






**********************************






Старая документация / На заре моего обучения
(тоже много интересного)
====================

GITHUB
Системоа Контролю Версій (VCS)
-------------------------------

Git ----------------->> github.com          // pythonmag
Mercurial ----------->> bitbucket.com       // pythonmag


Мануалы по GIT
==============================
подробнейшее руководство
    http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/ru/ 

простой мануал осн команды
    http://rogerdudler.github.io/git-guide/index.ru.html    


учебник подробный на украинском / русском
    https://git-scm.com/book/uk/v2            
    https://git-scm.com/book/ru/v2           


от виталия подобы
    http://www.vitaliypodoba.com/2014/06/git-basics/        


Обзорный сборщик ссылок на статьи
    https://proglib.io/p/git-guide/         


Пошаговый Мануал
    https://githowto.com/ru


Видеокурс по ГИТ
    https://www.youtube.com/playlist?list=PLIU76b8Cjem5B3sufBJ_KFTpKkMEvaTQR

    https://www.codecademy.com/learn/learn-git

    https://try.github.io/levels/1/challenges/1

    https://www.codeschool.com/courses/try-git
==============================

Ви працюєте у своїй Робочій Папці (workspace), потім закидаєте ваші зміни у так званий 
Перевалочний Пункт (index або staging), звідки кладете код у ваш Локальний Репозиторій 
(local repository), і вже при потребі, у Віддалені Репозиторії (remote repository), 
щоб інші також мали доступ до ваших змін.

Команды:

$ sudo apt-get install git-core

    // устанавливаем git на Ubuntu - одной строкой
 	
$ git config --global user.name "Ryndin Yurii"

    настройка имени

$ git config --global user.email "mymail@gmail.com"

    настройка емейла глобально то есть для всех репозиториев


Создание файла /.gitignore/ - файл создается на гитхабе после создания репозитория и файла Ридми,
 там есть веточка "создать новый файл" (название/содержание)
*.pyc
*~
*.egg-info
*.mo
*.egg
./idea/


Установка и настройка Git
====================================
// Установка пакета на комп Глобально

    $ sudo apt install git
	
// Можно но не обязательно (но желательно) установить Глобальные настройки
	(Для всех Репозиториев) Юзера и моего Емейла						// config --global

	$ git config --global user.name "Yurii Ryndin"
	$ git config --global user.email "ryndin@i.ua"


// Можно глянуть основные команды
// Основыне команды показыват основный функционал - как памятка и руководство
    ryndin@pc:~$ git
    usage: git [--version] [--help] [-C <path>] [-c name=value]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

   clone      Клонирование репозитория в новый каталог
   init       Создание пустого репозитория Git или реинициализация существующего

    работа с текущими изменениями (смотрите также: git help everyday)
   add        Добавление содержимого файла в индекс
   mv         Перемещение или переименование файла, каталога или символьной ссылки
   reset      Сброс текущего состояния HEAD на указанное состояние
   rm         Удаление файлов из рабочего каталога и индекса

    просмотр истории и текущего состояния (смотрите также: git help revisions)
   bisect     Использовать двоичный поиск изменения, которое вносит ошибку
   grep       Вывод строк, соответствующих шаблону
   log        Вывод истории коммитов
   show       Вывод различных типов объектов
   status     Вывод состояния рабочего каталога

    выращивание, отметка и настройка вашей общей истории
   branch     Вывод списка, создание или удаление веток
   checkout   Переключение веток или восстановление файлов в рабочем каталоге
   commit     Запись изменений в репозиторий
   diff       Вывод разницы между коммитами, коммитом и рабочим каталогом и т.д.
   merge      Объединение одной или нескольких историй разработки вместе
   rebase     Перемещение локальных коммитов над обновленной вышестоящей веткой
   tag        Создание, вывод списка, удаление или проверка метки, подписанной с помощью GPG

    совместная работа (смотрите также: git help workflows)
   fetch      Загрузка объектов и ссылок из другого репозитория
   pull       Извлечение изменений и объединение с другим репозиторием или локальной веткой
   push       Обновление внешних ссылок и связанных объектов

    «git help -а» и «git help -g» выводит список доступных подкоманд и
    некоторые руководства по темам. Запустите «git help <команда>» или
    «git help <термин>», чтобы прочесть о конкретных подкоманде или теме.


// Можно глянуть все настройки конфигурации / или Изменить конфигурацию 
ryndin@pc:~$ git config
    использование: git config [<опции>]

    Размещение файла конфигурации
    --global              использовать глобальный файл конфигурации
    --system              использовать системный файл конфигурации
    --local               использовать файл конфигурации репозитория
    -f, --file <файл>     использовать указанный файл конфигурации
    --blob <идент-двоичн-объекта>
                          прочитать настройки из указанного двоичного объекта

    Действие
    --get                 получить значение: имя [шаблон-значений]
    --get-all             получить все значения: ключ [шаблон-значений]
    --get-regexp          получить значения по шаблону: шаблон-имен [шаблон-значений]
    --get-urlmatch        получить значение, специфичное для URL: раздел[.переменная] URL
    --replace-all         заменить все соответствующие переменные: имя значение [шаблон-
    значений]
    --add                 добавить новую переменную: имя значение
    --unset               удалить переменную: имя [шаблон-значений]
    --unset-all           удалить все совпадающие: имя [шаблон-значений]
    --rename-section      переименовать раздел: старое-имя новое-имя
    --remove-section      удалить раздел: имя
    -l, --list            показать весь список
    -e, --edit            открыть в редакторе
    --get-color           найти настроенный цвет: раздел [по-умолчанию]
    --get-colorbool       проверить, существует ли настроенный цвет: раздел [stdout-есть-tty]

    Тип
    --bool                значение — это «true» (правда) или «false» (ложь)
    --int                 значение — это десятичное число
    --bool-or-int         значение — это --bool или --int
    --path                значение — это путь (к файлу или каталогу)

    Другое
    -z, --null            завершать значения НУЛЕВЫМ байтом
    --name-only           показывать только имена переменных
    --includes            учитывать директивы include (включения файлов) при запросе


// Можно посмотреть текущие установки

    ryndin@pc:~$ git config --list

        user.name=Yurii Ryndin
        user.email=ryndin@i.ua
        push.default=matching



Ключ SSH
===================

// Также чтобы можно было не только скачивать Репозитории из github.com, но и закидывать
	туда свои репозитории и обновлять их необходимо Сгенерировать свой Ключ SSH и 
	закинуть его Публичну часть в свой Аккаунт на github.com.
	ссылка как это сделать:

	http://webhamster.ru/site/page/index/articles/comp/171 				// SSH key
		
 	// Настройка SSH-ключей
	Перед тем, как регистрироваться на GitHub, следует вначале сгенерировать
	SSH-ключ шифрования. Этот ключ необходим, чтобы быстро устанавливать соединение
	с GitHub, не вводя пароля. Без такого ключа GitHub просто не будет работать.
	
	// Внимание!
	В момент генерации ключа будет запрошен пароль. Это пароль доступа к закрытому ключу,
	который хранится только на вашей машине и нигде больше. Этот пароль задается для
	максимальной секьюрности, хотя можно обойтись и без него. Нужно знать, что задав
	пароль к закрытому ключу, нужно будет при каждом соединении с сервером GitHub
	вводить данный пароль. Таким образом, при задании пароля, всё удобство пользования
	ключами шифрования пропадает.
	
	// Настройка SSH-ключей в Linux
	В операционной системе Linux вначале нужно заглянуть в каталог ~/.ssh.

	Если там есть файлы id_rsa и id_rsa.pub то это и есть SSH-ключи.
	Если такого каталога или таких файлов нет, то ключи нужно сгенерировать. Даем команду:
		
	$ ssh-keygen -t rsa -C 'ryndin@i.ua'								// ssh-keygen
	
	// В процессе генерации ключа у вас спросят куда положить файлы, в ответ просто
	нажимаем Enter. 
    При запросе пароля просто нажимаем Enter. После генерации,
	в каталоге ~/.ssh должны появиться файлы id_rsa и id_rsa.pub, они нам пригодятся 
	в дальнейшем.

		// Результат:
		ryndin@pc:~/MyManuals$ ssh-keygen -t rsa -C 'ryndin@i.ua'

			Generating public/private rsa key pair.
			Enter file in which to save the key (/home/ryndin/.ssh/id_rsa): 
			Created directory '/home/ryndin/.ssh'.
			Enter passphrase (empty for no passphrase): 
			Enter same passphrase again: 
			Your identification has been saved in /home/ryndin/.ssh/id_rsa.
			Your public key has been saved in /home/ryndin/.ssh/id_rsa.pub.
			The key fingerprint is:
			1f:db:11:d2:5a:cf:74:88:1a:18:58:c4:56:56:e7:c5 ryndin@i.ua
			The key's randomart image is:
			+--[ RSA 2048]----+
			|       =+.o.. ...|
			|      . o+ . + oE|
			|       .. o = + .|
			|           * = . |
			|        S + . o  |
			|         . + .   |
			|          o .    |
			|                 |
			|                 |
			+-----------------+

	// Установка SSH-ключа в GitHub

	Сразу после регистрации необходимо прописать в системе GutHub свой публичный ключ
	шифрования (открытый SSH-ключ). Для добавления ключа, надо в правом верхнем углу 
	нажать "Account Settings":
	В открывшемся окне нужно кликнуть на пункт меню "SSH Public Keys", и нажать 
	"Add Another Public Key". Появится два поля - название ключа (Title) и содержимое
	ключа (Key).
	В поле Title можно написать название компьютера, на котором сгенерирован публичный
	ключ. Можно писать по-русски. 
    В поле Key надо вставить содержимое файла id_rsa.pub.
	Помните, в каком каталоге они находятся? Переходим в этот каталог, открываем любым 
	текстовым редактором файл id_rsa.pub (именно с расширением .pub, не перепутайте).
	Выделяем весь текст, копируем, и вставляем на странице GitHub в поле Key.
	После добавления ключа, компьютер может соединяться с GitHub через программу git, 
	и никаких ошибок не должно возникать.


ПОРЯДОК СОЗДАНИЯ ПУБЛИЧНОГО КЛЮЧА SSH:
=====================================
1)
 cd ~/.ssh  -------------- открыли папку в которой обычно хронятся ключи ssh
	ls  ---------------- посмотрели содержимое папки, 
                    Ищите здесь файл id_dsa или id_rsa и соответсвующий ему файл с расширением .pub. 

	Файл с расширением .pub — это ваш открытый ключ, а второй файл — ваш закрытый (секретный) ключ.

2)
ryndin@ryndin-pk:~/.ssh$ ssh-keygen  ---- создаем ключ (в папке ~/.ssh, которую открыли)

3)
 Generating public/private rsa key pair.
Enter file in which to save the key (/home/ryndin/.ssh/id_rsa): 
            --------- таким образом консоль показывает где создаст файл с ключом (просто жмем Ентер)

4)
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/ryndin/.ssh/id_rsa.
Your public key has been saved in /home/ryndin/.ssh/id_rsa.pub.  
        ---------- таким образом консоль 2 раза спрашивает пароль (просто жмем Энтер) и показывает 
                    где сохранился ключ.

5)
cat ~/.ssh/id_rsa.pub ---------------- таким образом можно попросить консоль распечатать ключ  ssh

вот мой ключ // ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDtWDpOJc0ALxsei9JdwCfdW0yXlIjHsOOjBsQBvyrQYMyWubf2ipD0CG2xPIGICS0u6rwDfIGrJPy/6pZDH3UZNswFJJbbx2UI9L+HfRUCqh579ygUUXXhNpuuarlCHl9PSCEoAMfmRl9Mc1AbVfJBzT1u4CsSzPXP9gO1TTqUoNHAwH8KVGK/VkpMdeBErVB0zo92VrD1gYx/ePSUfASFwgffFiOxrcW3LkJM77b80oawG+FHFlppof/92gyQ0r0lS1CkIIDVpAY+Yt/nToAIxPs/b/... ryndin@ryndin-pk //

6)
за тем на github.com в своем аккаунте в размеле settings вставляем данный публичный ключ ssh - теперь компьтер связан с аккаунтом в гитхабе



// Обычно после первого Коммита Гит-киент попросит идентифицировать Пользователя

// Сказано что идентифицировать надо Юзера (user.name) и его Емеил (user.email)

// Можно Идентифицировать или Глобально для Всех Гитов (--global) или лтдельно для данного
	Гита (нет --глобал) - я сделал для отдельного Гита
	*** Please tell me who you are.
	Run
	
git config --global user.email "you@example.com"

git config --global user.name "Your Name"

	to set your account's default identity.
	Omit --global to set the identity only in this repository.
	fatal: unable to auto-detect email address (got 'ryndin@pc.(none)')
	
ryndin@pc:~/MyManuals$ git config user.name 'ryndin@i.ua'	

ryndin@pc:~/MyManuals$ git config user.email 'ryndin@i.ua'


// Можно посмотреть историю моих Коммитов (Журнал сообщений иммено Коммитов в ЛокалРепозит)

	$ git log														// git log

	commit 3852b4db1634463d0bb4d267edb7b3f9cd02ace1
	Author: Try Git <try_git@github.com>
	Date:   Sat Oct 10 08:30:00 2020 -0500
	Add all the octocat txt files
	commit b652edfd888cd3d5e7fcb857d0dabc5a0fcb5e28
	Author: Try Git <try_git@github.com>
	Date:   Sat Oct 10 08:30:00 2020 -0500
	Added cute octocat story
	Success!


// Теперь Внимание! Добавляем к Нашему локальному Репозиторию(master) 
	Путь к Удаленному Репозиторию(origin) в хранилище Github.com

	$ git remote add origin https://github.com/try-git/try_git.git		
																// git remote add origin

// Теперь можно закинуть Локальный репозиторий на Удаленный репозиторий origin на
	сервисе github.com
	Ветка по умолчанию называется master/
	-u Говорит менеджеру git чтобы он запомнил параметры Пуша <-u origin master>
	и в дальнейшем можно будет писать просто <git push> 	
	
	$ git push -u origin master									// git push origin master

	Branch master set up to track remote branch master from origin.
	Success!


// В моем примере по размещению Моих Мануалов на github.com происходило следующее:
	 
	ryndin@pc:~/MyManuals$ git push -u origin master

	    Username for 'https://github.com': ryndin@i.ua 		// Мой юзер был Локальным
	    Password for 'https://ryndin@i.ua@github.com': 		// Пароль доступа на github.com
	
	Counting objects: 5, done.
	Delta compression using up to 2 threads.
	Compressing objects: 100% (5/5), done.
	Writing objects: 100% (5/5), 15.33 KiB | 0 bytes/s, done.
	Total 5 (delta 0), reused 0 (delta 0)
	To https://github.com/pythonmag/myManuals.git
 	* [new branch]      master -> master
	Branch master set up to track remote branch master from origin.


//.gitignore														// .gitignore

	В локальной папке где мой Репозиторвий .git и мои файлы Создаю файл .gitignore
	В котором указываю расширения файлов которые не нудны для Коммитов
	Напрмер для python Проекта:
		*.pyc
		*~
		*.egg-info
		*.mo
		*.egg
		*.txt~

// Предположим прошло время, К удаленному Репозиторию внесли изменения другие Разрабы
	Код на Удаенном репозитории Модифицирован. Закиним Этот Код в мой Локальный Репозиторий.
	
	$ git pull origin master        								// git pull 

	// дословно Вытянуть из Ориджина по ветке Матсер
	
	$ git pull origin master

	    Updating 3852b4d..3e70b0f
	    Fast-forward
 	    yellow_octocat.txt |    1 +
 	    1 file changed, 1 insertion(+)
 	    create mode 100644 yellow_octocat.txt	// В локальном Репозитории создался файл


// Differences -- Отличия
	Консоль покажет отличия по тексту кода между Локальным Репозиторием и последним 
	Коммитом из Стейджинга(Индекса)	
	
	$ git diff		// $ git diff HEAD							// git diff

	// пример добавления в Индекс Файла и как Посмотреть отлиция до Эдда	
		$ git add octofamily/octodog.txt
    		Success!
    	$ git diff --staged 									// git diff --staged
    		diff --git a/octofamily/octodog.txt b/octofamily/octodog.txt
    		new file mode 100644
    		index 0000000..cfbc74a
    		--- /dev/null
    		+++ b/octofamily/octodog.txt
    		@@ -0,0 +1 @@
    		+[mwoof
    		Success!


// После добавления в Индекс (add) можно удалить из Индекса( reset)

	$ git reset octofamily/octodog.txt									// git recet


// Из Локального Репозитория вернуть версию Файла в рабочую Директорию с заменой

	$ git checkout -- removed_file.txt								// git checkout --
	


РАБОТА С ВЕТКАМИ:
===========================
// Идея в том что создается отдельная ветка разработки на время ее тестирования,
	и когда она готова то Объединяется с веткой master и пушится на удаленный сервер


// Создам новую ветку в Индексе
	
    $ git branch clean_up									// git branch <name>

	
// Инициируем работу с новой веткой	

    $ git checkout clean_up									// git checkout <branch>

		Switched to branch 'clean_up'
		Success!


// Посмотрим ее статус -- мы на Ветке
	
    $ git status											// git status (branch)

		# On branch clean_up
		nothing to commit (working directory clean)
		// Нечего коммитить - рабочая директория пуста

	
// Удалим из Ветки (Индекса) файлы:

	$ git rm '*.txt'				    					 // git rm <files>(ветка)

		rm 'blue_octocat.txt'
		rm 'octocat.txt'
		rm 'octofamily/baby_octocat.txt'
		rm 'octofamily/momma_octocat.txt'
		rm 'red_octocat.txt'
		// удалились все файлы


// Закинем Коммит по Ветке в которй удалили все файлы из Индекса

	$ git commit -m 'Remove all files'						  // git commit -m ""(ветка)

	[clean_up 63540fe] Remove all the cats		// указана ветка clean_up
	5 files changed, 5 deletions(-)				
	// по этой ветке в Локальном Репозитории удалены все файлы 
	delete mode 100644 blue_octocat.txt
	delete mode 100644 octocat.txt
	delete mode 100644 octofamily/baby_octocat.txt
	delete mode 100644 octofamily/momma_octocat.txt
	delete mode 100644 red_octocat.txt	


// Перескок на работу с основной веткой (master)

	$ git checkout master									//	git checkout master

		Switched to branch 'master'


// Говорим Гиту Поглотить/Слиться(merge) с Веткой clean_up 

	$ git merge clean_up									// git merge <branch>

	
// Логика кода такая: Поскольку в Ветке все файлы были как удаленные
		То после слияния и в Ветке Мастер фсе файлы как удаленные.		
	Updating 3852b4d..ec6888b
		Fast-forward
		blue_octocat.txt | 1 -
		octocat.txt | 1 -
		octofamily/baby_octocat.txt | 1 -
		octofamily/momma_octocat.txt | 1 -
		red_octocat.txt | 1 -
		5 files changed, 5 deletions(-)
		delete mode 100644 blue_octocat.txt
		delete mode 100644 octocat.txt
		delete mode 100644 octofamily/baby_octocat.txt
		delete mode 100644 octofamily/momma_octocat.txt
		delete mode 100644 red_octocat.txt

	
// Удаление Ветки <clean_up>
 
	$ git branch -d clean_up									// git branch -d (-f)

    	Deleted branch clean_up (was ec6888b).

		
// Примечание: Если ветка не была Слита с Мастером то такое удаление Ветки не сработает
		Надо указать принудительное удаление(--force)

	$ git branch -d -f(--force) clean_up	

	// В заключение push
	$ git push													// git push (final)

	To https://github.com/try-git/try_git.git
	3e70b0f..de559c4 master -> master

    git checkout -- removed_file.txt 

// Из Локального Репозитория вернуть версию Файла в рабочую Директорию с заменой




Перезалить Проект на Github - чистая установка 
(после удаления и перезаявки реапозитория на gjithub)
==========================================

1) 
Удаляем папку .git в папке проекта

2) 
Теперь заново инициализируем репозиторий:
    git init

3)
Добавляем все файлы в рабочей области и делаем коммит.
    git add .                                           (добавление содержимого в Индекс)
    git commit -m'начал с нуля'                         (добавление в Локальный Репозиторий)

Когда все готово

4)
Подключаем удаленный репозиторий и заливаем на него изменения:
    git remote add origin <url>                     (cвязь с внешним репозиторием)
    git push -u origin --all                        (передача данных - должно уйти по ветке master)





ПОРЯДОК ВЫПОЛНЕНИЯ КОМАНД В GIT:
================================
1) cd my_depozit -------------- сначала в консоли заходим в рабочую папку

2) pwd ----------- убедиться что находимся в той рабочей папке в которой надо

3) git init --------------- инициация созадния репозитория в папке где находишься 

4) git add . /or/  git add file ----------------- добавляешь в локальный стейдж (индекс, staging area) файл или папку

5) git commit  -------- по умолчанию добавляет все из стейджинга в локальный репозиторий, т.е. делает слепок внутреннего репозитория и сдвигает на него указатель текущей ветки.

git commit -a ------- делает коммит всего содержимого рабочей папки избегая add в стейджинг(индекс)

git commit -m '...' ------ посзовяет присать меседж/комментарий коммита 

git commit -a -m '...' ----------- все вместе, в итоге в локальный репозиторий.

6) ------------- делаем все необходимое со своим аккаунтом на github.com 

7) git remote add origin git@github.com:pythonmag/test.git ------------- добавляем удаленый репозиторый из github(remote), он там генерируется, в локальный репозиторий(origin)

8) git push origin master // git push -------- синхронизируем (закидываем) локальный репозиторий (origin) с внешним на github на дефолтну ветку master

9) git pull origin master // git pull ---------- возвращаем (синхронизируем) обычно при начале работы, с внешнего репозитория на локальный (путь уже известен)

10) git status --------------- показывает состояние файлов в рабочей папке и в индексе, какие файлы изменены, но не добавлены в индекс; какие ожидают коммита в индексе.

11) git diff                     // показывает разницу между рабочей папкой и индексом (стейджингом)
	git diff --staged     // показывает разницу между индексом (стейджингом) и последним коммитом (локальным)
	git diff --cached     // показывает что добавилось в стейджинге (индексе)
	git diff master branchB // показывает разницу между любыми двумя коммитами (например мастер и бренчБ)


12) $ git add test.txt      // новые файлы обязательно сначало надо закинут в индекс

13) $ git rm removed_file.txt       // обязательно!!! если удадили файл в рабочей папке,
                                     то обязательно надо удалить из репозитория, иначе он там останется

14) $ git checkout -- removed_file.txt  // вот так можно из локального репозитория восстановить содержимое рабочей папки как в репозитории

15) git remote -v                      // показывает репозитории
    ryndin@pc:~/MyManuals$ git remote -v
    -- origin	https://github.com/pythonmag/myManuals.git (fetch)
    -- origin	https://github.com/pythonmag/myManuals.git (push)


$ git brunch -av -------------------- показывает ветки репозиторием - локалбную и удаленную и название последнего коммита

$ git log		---- показывает историю коммитов

$ git log -p 	----показывает расширенную историю коммитов


$ git status - показывает последние изменения по файлам

$ git diff - показывает последние изменения в файлах прям построчно !!

$ git status ------------->>






