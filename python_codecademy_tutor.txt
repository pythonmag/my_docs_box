КодАкадеми - Курс    
-----------------
https://www.codecademy.com/learn/python


Three ways to create strings
	'Alpha'
	"Bravo"
	str(3)

String methods
	len("Charlie")
	"Delta".upper()
	"Echo".lower()

Printing a string
	print "Foxtrot"

	g = "Golf"
	h = "Hotel"
	print "%s, %s" % (g, h)

""" Eto tozhe kommentariy
    no mnogostrochnyi
    """

# переназначение переменной
meal = meal + meal*tax

Экранирование
'This isn\'t flying, this is falling with style!'

Выборка по индексу
fifth_letter = "MONTY"[4]
print fifth_letter

пробелы
print "Spam " +"and " +"eggs"

print "The value of pi is around " + str(3.14)

конкатинация и % %
string_1 = "Camelot"
string_2 = "place"
print "Let's not go to %s. 'Tis a silly %s." % (string_1, string_2)

print "The %s who %s %s!" % ("Knights", "say", "Ni")

from datetime import datetime

from datetime import datetime		# вызываем класс из библиотеки о дате и времени
now = datetime.now()			# а тут вызываем функцию
print now			
current_year = now.year			# а тут уже вызаваем метод функции
current_month = now.month	
current_day = now.day

# вывод атрибутов функции в нужном нам формате
from datetime import datetime
now = datetime.now()
print '%s/%s/%s' % (now.year, now.month, now.day)
также есть методы:
now.minute
now.second

answer = raw_input("Type left or right and hit 'Enter'.").lower()	# 
или
answer = input("Type left or right and hit 'Enter'.").lower()

Правила True / False:
True and False is False		# математическая логика - and/приоритет false
False and True is False
False and False is False

True or True is True		# математическая логика - or/приоритет true
True or False is True
False or True is True
False or False is False

Not True is False
Not False is True

Приоритеты булевых операторов:
1)    not is evaluated first;		# приоритет felse
2)   and is evaluated next;		# приоритет felse
3)    or is evaluated last.		# приоритет true

Условный оператор if / else
def using_control_once():
    if 2==2:
        return "Success #1"
print using_control_once()

if 8 > 9:
    print "I don't printed!"
else:
    print "I get printed!"

<iframe width="560" height="315" src="https://www.youtube.com/embed/efvd78j7xUY" frameborder="0" allowfullscreen></iframe>

Конструкция проверки внесенного значения:
original = raw_input ("Enter a word:  ")
if len(original) > 0 and original.isalpha():	# false если нет длинны переменной и не знаки 							алфавита (а например цифры)
    print original
else:
    print "empty"


Игра PYG на валидацию, наследование, срезы:
pyg = 'ay'
original = raw_input('Enter a word:')
if len(original) > 0 and original.isalpha():
    print original
else:
    print 'empty'
word = original.lower()
first = word[0]
new_word = word[1:]+first+pyg		# вариант среза сразу
# new_word=new_word[1:len(new_word)]  	# вариант среза потом
print new_word


%s	# to string block
%f	# to float block
%d	# to data block (будь що)


Начало функция и наследование переменных:
def tax(bill):
    """Adds 8% tax to a restaurant bill."""
    bill *= 1.08
    print "With tax: %f" % (bill)
    return bill		# повтороно выводит новое значение после цикла
meal_cost = 100
meal_with_tax = tax(meal_cost)	# функции переназначаем переменную



def square(n):
    """Returns the square of a number."""
    squared = n**2				# возведение числа в степерь
    print "%d squared is %d." % (n, squared)	# вывод результата
    return squared
# Call the square function on line 9! Make sure to
# include the number 10 between the parentheses.
square (10)					# назначение переменной для просчета



Два аргумента функции:
def power(base, exponent):  """Add your parameters here!"""
    result = base**exponent
    print "%d to the power of %d is %d." % (base, exponent, result)
power(37,4)  """Add your arguments here!"""




Как вызвать несколько аргументов функции: 	#*args
def biggest_number(*args):
    print max(args)			# max
    return max(args)
def smallest_number(*args):
    print min(args)			# min
    return min(args)
def distance_from_zero(arg):
    print abs(arg)			# absolut
    return abs(arg)
biggest_number(-10, -5, 5, 10)		# задакм агрументы функциям
smallest_number(-10, -5, 5, 10)
distance_from_zero(-10)



print type (25)		# <'int'>	- покажет такие типы
print type (4.55)	# <'float'>
print type ('good')	# <'string'>


""" Пример расчета стоимоти тур поездки"""
def plane_ride_cost(city):
    if city == "Charlotte":
        return int(183)
    if city == "Tampa":
        return int(220)
    if city == "Pittsburgh":
        return int(222)
    if city == "Los Angeles":
        return int(475)

def rental_car_cost (days):
    total_cost = 40*days

    if days >= 7:
        total_cost -= 50
    elif days >= 3:
        total_cost -= 20
    return total_cost 

def hotel_cost(night):
    hotel_cost=140*night
    return hotel_cost

 
def trip_cost(city, days, spending_money):
    return hotel_cost(days) + plane_ride_cost(city) + rental_car_cost (days) + spending_money

print trip_cost ("Los Angeles", 5, 600)



# Списки, их формирование, срезы их них по ключам (индексам)
zoo_animals = ["pangolin", "cassowary", "sloth", "fox"]
if len(zoo_animals) > 3:
	print "The first animal at the zoo is the " + zoo_animals[0]
	print "The second animal at the zoo is the " + zoo_animals[1]
	print "The third animal at the zoo is the " + zoo_animals[2]
	print "The fourth animal at the zoo is the " + zoo_animals[3]

# задаем новые значения переменным списка по индексу
zoo_animals[2] = "hyena"
zoo_animals[3] = "cat"
print "--------------"
print zoo_animals



# добавление элементов списка
suitcase = [] 
suitcase.append("sunglasses")
suitcase.append ("scot")
suitcase.append ("visky")
suitcase.append ("vodka")
list_length = len(suitcase)	# переменная наследует длинну (количество) элементов списка
print "There are %d items in the suitcase." % (list_length)
print "------------------"
print suitcase
print "------------------"
print suitcase.index("visky")	# 2

# Найти номер индекста элемента Списка
animals = ["ant", "bat", "cat"]
print animals.index("bat")

# Так добавляем элемент списка по конкретному индексу (месту)
animals=[]
animals.insert(1, "dog")	# номер индекса может наследовать от переменной
print animals


# Оператор for удобно работает со списками
my_list = [1,9,3,8,5,7]
for item in my_list:		# так изящно указывается на все элементы в списке
	print (2*item),


animals = ["cat", "ant", "bat"]
animals.sort()		# в любом случае сортирует и сохраняет элементы списка по алфовиту
print animals	



# операторы  /for/in/.append()/.sort()
start_list = [5, 3, 1, 2, 4]
square_list = []
for item in start_list:		# задание для всех элементов списка под псевдонимом number
    square_list.append (item**2)
				# создает новый список беря и изменяя элементы списка
square_list.sort()		# сортирует элементы списка в новом списке
print square_list		# печать нового списка


# Словари теже списки но с ключами элементов: 
residents = {'Puffin' : 104, 'Sloth' : 105, 'Burmese Python' : 106}
print residents['Puffin']


menu = {}
menu['Chicken Alfredo'] = 14.50
print menu['Chicken Alfredo']
print "----------"
menu ['burger'] = 10.50
print "There are %d items on this menu" % (len(menu))		# may be %s %d %f
print "----------"
print "There are " + str(len(menu)) + " items on the menu."	# or
print "----------"
print menu

menu['salat'] = 6.6		# просто замена значения элемента библиотеки с указ ключем
del menu['burger']		# удаление элемента библиотеки menu (ключ/и значение)
print "----------"
print menu


# удаление элемента из списка
backpack = ['xylophone', 'dagger', 'tent', 'bread loaf']
backpack.remove ('dagger')
print backpack


# заключение по словарям и спискам
inventory = {'gold' : 500,'pouch' : ['flint', 'twine', 'gemstone'], 'backpack' : ['xylophone','dagger', 'bedroll','bread loaf']}				# создали библиотеку

inventory['burlap bag'] = ['apple', 'small ruby', 'three-toed sloth']	# добавили список
print inventory

inventory['pouch'].sort()	# отсортировали список 'pouch' в бибилиотеке 
print inventory['pouch']	# распечалали список 'pouch' 

inventory['gold']=500+150	# изменили значание элемента библиотеки (одинарный)
inventory['backpack'].remove('dagger')	# удалили элемент 'dagger' списка 'backpack' библиотеки
print inventory
print inventory['pouch'][2] # печать второго элемента списка 'pouch' библиотеки inventory

результат: {'backpack': ['xylophone', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 650}


# Контрольная
names = ["Adam","Alex","Mariah","Martine","Columbus"]
for name in names:
    print name

webster = {
	"Aardvark" : "A star of a popular children's cartoon show.",
    	"Baa" : "The sound a goat makes.",
    	"Carpet": "Goes on the floor.",
    	"Dab": "A small amount."
	}
for key in webster:		# вводим условную переменную типа ключ
	print webster[key]	# выводим значения элементов по всем ключам из библиотеки



# Работа Счетчика
def fizz_count (x):
    count = 0					# начало счетчика
    for item in x:
        if item == "fizz":
            count = count + 1			# счетчик
    return count				# обязательный конечный элемент работы цикла/ориентир
list_fizz_1 = ["fizz", "fizz", "fizz", "fizz"]	# база
fizz = fizz_count (list_fizz_1)			# логика принимает базу и передает в переменную
print fizz

list_fizz_2 = ["ooo", "fizz", "fizz", "fizz"]
fizz = fizz_count (list_fizz_2)
print fizz


prices = {"banana": 4, "apple": 2, "orange": 1.5, "pear": 3}
stock = {"banana": 6, "apple": 0, "orange": 32, "pear": 15}
for name in prices:			# вся логика выполняется по ключам //
    print name
    print "price: %s" % prices [name]
    print "stock: %s" % stock [name]
    print "--------------"


# логика счетчика с использование двух баз умножений, и сложений
prices = {			# начало одной базы
    "banana" : 4,
    "apple"  : 2,
    "orange" : 1.5,
    "pear"   : 3,
}
stock = {			# начало второй базы
    "banana" : 6,
    "apple"  : 0,
    "orange" : 32,
    "pear"   : 15,
}

total = 0			# начало счетчика (суммы значений по товарам)

for key in prices:		# логика для одного значения из базы
    print key
    print "price: %s" % prices[key]
    print "stock: %s" % stock[key]
    total_1 = prices[key]*stock[key]
    print "Total %s dollar" % total_1
    print
    total = total + total_1	# счетчик
        
print
print total			# вывод результата счетчика
print " .. is total of all"
print 4*6+2*0+1.5*32+3*15	# проверка // значение 117



lloyd = {			# создаем базы данных по трем студентам - оценки по разделам
    "name": "Lloyd",
    "homework": [90.0, 97.0, 75.0, 92.0],
    "quizzes": [88.0, 40.0, 94.0],
    "tests": [75.0, 90.0]
	}
alice = {
    "name": "Alice",
    "homework": [100.0, 92.0, 98.0, 100.0],
    "quizzes": [82.0, 83.0, 91.0],
    "tests": [89.0, 97.0]
	}
tyler = {
    "name": "Tyler",
    "homework": [0.0, 87.0, 75.0, 22.0],
    "quizzes": [0.0, 75.0, 78.0],
    "tests": [100.0, 100.0]
	}

# Add your function below!

def average (numbers):		# создаем логику расчета среднего значения
    total = sum (numbers)	# сумма
    total = float (total)	# сисло с точкой
    total = total / len (numbers)	# расчет среднего
    return total

# add 6/9
student = [lloyd, alice, tyler]		# связка трех баз данных для расчета

def get_average (student):		# принимаем в новую переменную все сущности
    homework = average(student["homework"])
    quizzes = average(student["quizzes"])
    tests = average(student["tests"])
    return 0.1 * homework + 0.3 * quizzes + 0.6 * tests  # доп логика по расчету общей средней

# add 7/9
def get_letter_grade (score):	# логика расчета индекса по общей средней 
    if score >= 90:
        return "A"
    elif score >= 80:
        return "B"
    elif score >= 70:
        return "C"
    elif score >= 60:
        return "D"
    else:
        return "F"
score = get_average (lloyd)	# ввод параметров по аргументу баз данных
print get_letter_grade (score)

# add 8/9
def get_class_average (students):
    results = []		# формируем пустой список средних значений студентов
    for item in students:
        studentAvg = get_average (item)		# логика
        results.append (studentAvg)		# наполнение списка
    return average (results)

students = [lloyd,alice,tyler]		# указание параметров для логики
print get_class_average (students)
print get_letter_grade (get_class_average (students))


# Доступ к Спискам
n = [1, 3, 5]
# Do your multiplication here
n[1] = n[1]*5		# меняем значение элемента (2го) списка путем его умножения и сохранения
print n			# [1, 15, 5]


n = [1, 3, 5]
# Append the number 4 here
n.append(4)		#  добавили элемент в список
print n			# [1, 3, 5, 4]


# Удаление элементов списка
n = [1, 3, 5]
# Remove the first item in the list here
n.pop(0)	# удаление по индексу то есть первого элемента
print n		# [3, 5]

то же самое:
n = [1, 3, 5]
# Remove the first item in the list here
del(n[0])	# удаление по индексу то есть первого элемента
print n		# [3, 5]

а вот удаление по значению:
n = [1, 3, 5]
# Remove the first item in the list here
n.remove(1)	# удаляет именно это значение (по значению)
print n		# [3, 5]


## Все отдельно!
number = 5		# задаем базу

def my_function(x):	# задаем логику расчета
    return x * 3

print my_function(number)	# направляем базу к расчету


# Суммирование по двум агрументам
m = 5
n = 13
# Add add_function here!
def add_function(x,y):
    c=x+y		# или просто / return x+y
    return c
print add_function(m, n)


# Меняем элемент списка путем логики
def list_function(x):		# это логика
    x[1] = x[1] + 3
    return x

n = [3, 5, 7]
print list_function(n)		# [3, 8, 7] это подключаем базу


# добавляем и элемент в список и возвращаем список
n = [3, 5, 7]
# Add your function here
def list_extender(lst):
   lst.append(9)
   return lst
print list_extender(n)


# выводит по одному элементу ранжируя их
n = [3, 5, 7]
def print_list (x):
    for i in range(0, len(x)):
        print x[i]
print print_list (n)


n = [3, 5, 7]

def double_list(x):		# меняем значения базы под переменной (как умноженую на 2)
    for i in range(0, len(x)):
        x[i] = x[i] * 2
# Don't forget to return your new list!
    return x

print double_list(n)


# правила range: // создает списки - это шорткат
    range(stop)
    range(start, stop)
    range(start, stop, step)
range(6) # => [0,1,2,3,4,5]
range(1,6) # => [1,2,3,4,5]
range(1,6,3) # => [1,4]


def my_function(x):			# изменили список по логике
    for i in range(0, len(x)):
        x[i] = x[i] * 2
    return x

print my_function(range(3))		# создали список от 0 до 3 не включая



# конструкция складывает числа списка
n = [3, 5, 7,25]

def total(numbers):
    resoult = 0
    for item in numbers:
        resoult = resoult + item
    return resoult

print total(n)


# конструкция складывает строки (string)
n = ["Michael ", "Lieberman"]
# Add your function here
def join_strings(words):
    result=""
    for item in words:
        result = result + item
    return result

print join_strings(n)


# конструкция формирования списка из двух списков / через каскадный вызов и обработку параметров
n = [[1, 2, 3], [4, 5, 6, 7, 8, 9]]
# Add your function here
def flatten(lists):
    results=[]
    for item in lists:
        for num in item:
            results.append(num)
    return results

print flatten(n)


letters = ['a', 'b', 'c', 'd']
print " ".join(letters)		#
print "---".join(letters)	# добавляет символы после каждого значения списка (список не изменяется) - печатает как строку без скобок и кавычек.
print letters



Battleship! Контрольная - временные записи

from random import randint		# вызываем генератор случайных чисел

board = []

for x in range(5):
    board.append(["O"] * 5)		# создаем список из 4 списков (поле боя)

def print_board(board):
    for row in board:
        print " ".join(row)		# при выводе на экран формат с пробелами без скобок

print "Let's play Battleship!"
print_board(board)

def random_row(board):
    return randint(0, len(board) - 1)

def random_col(board):
    return randint(0, len(board[0]) - 1)

ship_row = random_row(board)
ship_col = random_col(board)
print ship_row
print ship_col

# Everything from here on should go in your for loop!
# Be sure to indent four spaces!
guess_row = int(raw_input("Guess Row:"))
guess_col = int(raw_input("Guess Col:"))

if guess_row == ship_row and guess_col == ship_col:
    print "Congratulations! You sunk my battleship!"
else:
    if (guess_row < 0 or guess_row > 4) or (guess_col < 0 or guess_col > 4):
        print "Oops, that's not even in the ocean."
    elif(board[guess_row][guess_col] == "X"):
        print "You guessed that one already."
    else:
        print "You missed my battleship!"
        board[guess_row][guess_col] = "X"
    
    for turn in range(4):
        print "Turn", turn+1
        if turn == 3:
            print "Game Over"
            break
    
    print_board(board)
# В общем цикл учета количества попыток в игре не работает, не доделано, ну не важно. 


Раздел обучения: Циклы
count = 0

if count < 10:
    print "Hello, I am an if statement and count is", count
    
while count < 10:			# в циуле вайл счетчик нужен как никогда
    print "Hello, I am a while and count is", count
    count += 1


choice = raw_input('Enjoying the course? (y/n)')

while choice != 'y' and choice != 'n' :  	# работа цикла пока не введу y or n
    
    # Fill in the condition (before the colon)
    choice = raw_input("Sorry, I didn't catch that. Enter again: ")



count = 0

while count < 10: 	# простой счетчик
    print count
    count += 1
    


count = 0

while True:		# по умолчанию while всегда True
    print count
    count += 1
    if count >= 10:
        break



import random		# импорт модуля случайных чисел

print "Lucky Numbers! 3 numbers will be generated."
print "If one of them is a '5', you lose!"

count = 0		# начало счетчика
while count < 3:			# формирует список (по счетчику) из 3х чисел
    num = random.randint(1, 6)		# генерирует 5 случайных чисел
    print num
    if num == 5:
        print "Sorry, you lose!"
        break				# выход из всей логики
    count += 1				# счетчик
else:
    print "You win!"			#  логика в том что если нет 5 в 3х числах -то победа



# суть игры/логики: есть три попытки чтобы угадать сгенерированное 1 раз случайное число
from random import randint

# Generates a number from 1 through 10 inclusive
random_number = randint(1, 10)

guesses_left = 3
# Start your game!
while guesses_left > 0:
    guess = int(raw_input("Guess a number between 1 - 10"))
    if guess == random_number:
        print "You win!"
        break
    guesses_left -=1

else:
    print "You lose"



# Вот это я понял, Мы наполняем базу тремя элементами, используем цикл ввода имено трех значений путем рандж(3), принт в конце для проверки
hobbies = []

# Add your code below!
for item in range(3): 
    hobby = str(raw_input("Vvedite Vashe Hobby:  "))
    hobbies.append(hobby)
    print (hobbies)



word = "Marble"
for char in word:
    print char, 		# Очень интересный момент, без запятой распечатает каждый символ значение на отбельной строке, с запятой - распечатает все символы на одной строке



# В фразе А меняется на Х и все остальное печатается без изменений 
phrase = "A bird in the hand..."

# Add your for loop
for char in phrase:
    if char == "A" or char == "a":
        print "X",
    else:
        print char,

#Don't delete this print statement!
print			# X   b i r d   i n   t h e   h X n d . . .




d = {'a': 'apple', 'b': 'berry', 'c': 'cherry'}

for key in d:
    # Your code here!
    print key, d[key]		# печатет сначала ключи, а затем значения по ключам



# enumerate дает первой переменной индекс элемента списка (с 0)
choices = ['pizza', 'pasta', 'salad', 'nachos']

print 'Your choices are:'
for index, item in enumerate(choices):		
    print index+1, item				# индекс всегда с 0 так что меняем на 1


# я пока не понял что это...
list_a = [3, 9, 17, 15, 19]
list_b = [2, 4, 8, 10, 30, 40, 50, 60, 70, 80, 90]

for a, b in zip(list_a, list_b):
    # Add your code here!
    if a > b:
        print a
    else:
        print b


# for/else тут выполняется однозначное условие до брик, то есть проверяется элемент и однозначно печатаются элементы, потому потом можно использовать элс если плохого элемента не будет 
 
fruits = ['banana', 'apple', 'orange', 'tomato', 'pear', 'grape']

print 'You have...'
for f in fruits:
    if f == 'tomato':
        print 'A tomato is not a fruit!' # (It actually is.)
        break
    print 'A', f
else:
    print 'A fine selection of fruits!'


#  Контрольное задание// Сделал сам, если Дог есть но принт и брик если нет то элс :)
pet = []

for item in range(3):
    pet_one = raw_input("print your 3 favorit pet: ")
    pet.append(pet_one)
print pet

for item in pet:
    if item == 'dog':
        print "And i like dog too" 
        break

else:
    print "So, And where is a dog ??"


#  алгоритм сложения массива чисел
def digit_sum(n):
    x = str(n)
    y = 0
    for i in x:
        y += int(i)
    return y


#  алгоритм вычисление факториала числа то есть // 5: 5*4*3*2*1 
def factorial(x):
    n = x
    total = 1
    while n > 0:
        total *= n
        n -= 1
    return total
   
factorial (5)

# алгоритм выдает тру если х простое число (не составное) но в промежутке от 2 до х, который вносит оператор - т.е. делится без остатка только на само себя
def is_prime(x):
    if x < 2:
        return False
    else:
        n = 2
        while n < x:
            if x % n == 0:
                return False
                break
            n = n + 1
        else:
            return True


# алгоритм показывает как написать строку задом наперед
def reverse(text):
    new_string = ""		# создаем новую пучстую строку
    string_length = len(text) - 1	# узнаем количество символов в строке
    for char in text:				# цикл
        new_string += text[string_length]	# заносим последний символ в новую строку
        string_length -= 1			# сдвиг по символам назад
    print new_string
    return new_string

reverse("Python!")


# алгоритм - создает новую строку и наполняет ее символами, только не глпасными (2 варианта)
def anti_vowel(text):
    new_string = ""
    string_length = len(text) - 1
    for char in text:

        # if char == "a" or char == "A" or char == "e" or char == "E" or char == "i" or char == "I" or char == "o" or char == "O" or char == "u" or char == "U":

        if char in 'aeiouAEIOU':

            new_string += ""
        else:
            new_string += char
        print new_string
    return new_string
 

# алгоритм - считает очки по буквам, которые есть в слове (параметре) функции
score = {"a": 1, "c": 3, "b": 3, "e": 1, "d": 2, "g": 2, 
         "f": 4, "i": 1, "h": 4, "k": 5, "j": 8, "m": 3, 
         "l": 1, "o": 1, "n": 1, "q": 10, "p": 3, "s": 1, 
         "r": 1, "u": 1, "t": 1, "w": 4, "v": 4, "y": 4, 
         "x": 8, "z": 10}
         
def scrabble_score(word):
    points = 0
    for char in word.lower():
        points += score[char]
    return points
    print points



def censor(text, word):
    s=text.split()
    for i in range(len(s)):
        if s[i]==word:
            s[i]= asterik(word)
    return " ".join(s)

def asterik(word):
    t="*"
    s=""
    for c in word:
        s+=t
    return s 


# алгоритм считает сколько раз итем находится в первой переменной, и выдает счетчик
def count (sequence, item):
    
    if type(sequence) == str:
        sequence = sequence.split(" ")
     
    counter = 0
    
    for i in sequence:
        if i == item:
            counter += 1
    return counter


# алгоритм создает новый список из чисел первого спимска. только четных
def purify(x):
    y = []
    
    for i in x:
        if i % 2 == 0:
            y.append(i)
    return y


# алгоритм перемножениея всех элементов списка(переменной)
def product(x):
    resoult = 1
    for item in x:
        resoult *=item
    return resoult


# алгоритм создания нового списка без повторяющихся элементов (из старого)
def remove_duplicates(x):
    new_list = []
    for item in x:
        if item not in new_list:
            new_list.append(item)
    return new_list
    print new_list


# алгоритм - контрольная но нихера не понял
Write a function called median that takes a list as an input and returns the median value of the list.

For example: median([1,1,2]) should return 1.

    The list can be of any size and the numbers are not guaranteed to be in any particular order.
    If the list contains an even number of elements, your function should return the average of the middle two.

//
def median(numbers):
    numbers = sorted(numbers)
    if len(numbers) % 2 != 0:
        return numbers[(len(numbers)/2)]
    else:
        return (numbers[(len(numbers)/2)-1] + numbers[(len(numbers)/2)]) / 2.0
//
def median(nums) :
    new_list = sorted(nums)
    if len(new_list) > 1 :
        if len(new_list) % 2 == 0:
            i = (len(new_list)/2) - 1
            med = (new_list[i] + new_list[i+1])/2.0
            return med
        else :
            i = (len(new_list) / 2) 
            med = new_list[i]

        return med
    else :
        return new_list[0]



Новый урок PRINT
# Алгоритм печатания элементов списка один за одним
grades = [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5]

def print_grades(x):
    for item in grades:
        print item

print_grades(grades)


# Суммирование всех элементов + расчет среднего
grades = [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5]

def grades_sum(score):
    total = 0
    for item in score:
        total += item
    print total
    print
    return total
    
def grades_average(grades):
    average = grades_sum(grades)/float(len(grades))
    print average
    print
    return average
    
print ('Summa: ' + str(grades_sum(grades)))
print ('Average: ' + str(grades_average(grades))) 


# Алгоритм расчета сум, средних. и дисперсий (вариаций от числа среднего)
grades = [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5]

def print_grades(grades):
    for grade in grades:
        print grade

def grades_sum(grades):
    total = 0
    for grade in grades: 
        total += grade
    return total
    
def grades_average(grades):
    sum_of_grades = grades_sum(grades)
    average = sum_of_grades / float(len(grades))
    return average

def grades_variance(scores):
    average = grades_average(scores)
    variance = 0
    for score in scores:
        variance +=((average-score)**2)
    return variance/len(scores)
            
print grades_variance(grades)  



# Контрольная 9/9
grades = [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5]

def print_grades(grades):
    for grade in grades:
        print grade

def grades_sum(grades):
    total = 0
    for grade in grades: 
        total += grade
    return total
    
def grades_average(grades):
    sum_of_grades = grades_sum(grades)
    average = sum_of_grades / float(len(grades))
    return average

# def grades_variance(scores):
#     average = grades_average(grades)
#     variance = 0
#     for score in scores:
#         variance +=(average-score)**2
#         variance1 = variance/len(scores)
#     return variance1
# print grades_variance(grades)

def grades_variance(scores):
    average = grades_average(scores)
    variance = 0
    for score in scores:
        variance += ((average - score) ** 2)
        total_variance = variance / len(scores)
    return total_variance
print grades_variance(grades)
        

# def grades_std_deviation(variance):
#     return variance**0.5
#     variance = grades_variance(grades)
#     print grades_std_deviation(variance)

def grades_std_deviation(variance):
    return variance ** 0.5
    variance = grades_variance(grades)
    print grades_std_deviation(variance)
    
            
print print_grades(grades)
print grades_sum(grades)
print grades_average(grades)
print grades_variance(grades)
print grades_std_deviation(grades_variance(grades))


# Работа с билиотеками

# алгоритм печати элементов словаря
my_dict = {'One': 1, 'Thoo': 2, 'Three': 3}
print my_dict.items()


# алгоритм печати ключей и значений словаря
my_dict = {'One': 1, 'Thoo': 2, 'Three': 3}
print my_dict.keys()
print my_dict.values()


for number in range(5):
    print number	# Алгоритм: печать чисел от 0 до 4 (5 штук)

d = { "name": "Eric", "age": 26 }
for key in d:		# алгоритм цикла
    print key, d[key]	# алгоритм: печать сначала ключа / зачем значения по ключу

for letter in "Eric":	# алгоритм цикла
    print letter 	# алгоритм печати элементов(букв) строки



my_dict = {'One': 1, 'Thoo': 2, 'Three': 3}
print my_dict.keys()
print my_dict.values()

for item in my_dict:
    print str(item), "", str(my_dict[item])
    # or print str(item) + "" + str(my_dict[item])


# list comprehension
List comprehensions are a powerful way to generate lists using the for/in and if keywords we've learned.

# печатает список элементов  логике создания списка - только четные
evens_to_50 = [i for i in range(51) if i % 2 == 0]
print evens_to_50

# примеры логики создания списков
new_list = [x for x in range(1,6)]
# => [1, 2, 3, 4, 5]
doubles = [x*2 for x in range(1,6)]
# => [2, 4, 6, 8, 10]
doubles_by_3 = [x*2 for x in range(1,6) if (x*2)%3 == 0]
# => [6]
even_squares = [(x**2) for x in range(1,11) if x%2 == 0]
print even_squares
# => [4, 16, 36, 64, 100]
c = ['C' for x in range(5) if x < 3]
print c
# =>['C', 'C', 'C']

cubes_by_four = [(x**3) for x in range(1,11) if (x**3) % 4 == 0 ]
print cubes_by_four


# Слайсинг // Срез списка [начало:конец(не включая):шаг] 
l = [i ** 2 for i in range(1, 11)]
# Should be [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
print l[2:9:2]


to_five = ['A', 'B', 'C', 'D', 'E']

print to_five[3:]
# prints ['D', 'E'] 

print to_five[:2]
# prints ['A', 'B']

print to_five[::2]
# print ['A', 'C', 'E']


my_list = range(1, 11) # List of numbers 1 - 10

# Add your code below!
print my_list[::2]

#  алгоритм формирования обратного списка
my_list = range(1, 11)
backwards = my_list[::-1]
print my_list
print
print backwards
# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

to_one_hundred = range(101)
# Add your code below!
backwards_by_tens = to_one_hundred[::-10]
print backwards_by_tens
# [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0]


# Анонимная функция
my_list = range(16)
print filter(lambda x: x % 3 == 0, my_list)	# так объявляется анонимная функция и ее логика


languages = ["HTML", "JavaScript", "Python", "Ruby"]
print filter(lambda x: x[0] == 'P', languages)
# => ['Python']


# алгоритм вытягивания из списка чисел в диапозоне значений
squares = [x**2 for x in range(1,11)]
print squares
print
print filter (lambda x: x > 30 and x <= 70, squares)


#  печатание всего содержимого библиотеки
movies = {
	"Monty Python and the Holy Grail": "Great",
	"Monty Python's Life of Brian": "Good",
	"Monty Python's Meaning of Life": "Okay"
}
print movies.items()



threes_and_fives = [x for x in range(1, 16) if x%3 == 0 or x%5 == 0]
print threes_and_fives


# Алгоритм6 сначала переворачиваем фразу, затем удаляем каждый 2й символ
garbled = "!XeXgXaXsXsXeXmX XtXeXrXcXeXsX XeXhXtX XmXaX XI"
arbled = garbled[::-1] 
print arbled
message = arbled[0:len(arbled):2]
print message
# IX XaXmX XtXhXeX XsXeXcXrXeXtX XmXeXsXsXaXgXeX!
# I am the secret message!


# Алгоритм фильтр от ненужного элемента
garbled = "IXXX aXXmX aXXXnXoXXXXXtXhXeXXXXrX sXXXXeXcXXXrXeXt mXXeXsXXXsXaXXXXXXgXeX!XX"
message = filter(lambda x: x !='X', garbled)
print message
# I am another secret message!


БИТОВЫЕ ОПЕРАТОРЫ
print 5 >> 4  # Right Shift
print 5 << 1  # Left Shift
print 8 & 5   # Bitwise AND
print 9 | 4   # Bitwise OR
print 12 ^ 42 # Bitwise XOR
print ~88     # Bitwise NOT	# пока не понятно

print 0b1,    #1
print 0b10,   #2
print 0b11,   #3
print 0b100,  #4
print 0b101,  #5
print 0b110,  #6
print 0b111   #7
print "******"
print 0b1 + 0b11    # 1+3 = 4 (0b100)
print 0b11 * 0b11   # 3*3 = 9 (0b1001)


# Печать в двоичной системе
>>>print 0b1
1
>>> print 0b10
2
>>> print 0b11
3
>>> print 0b100
4
>>> print 0b101
5
>>> print 0b110
6
>>> print 0b111
7
>>> print 0b1000
8
>>> print 0b1001
9
>>> print 0b1010
10
>>> print 0b1011
11
>>> print 0b1100
12
>>> print 0b1110
14
>>> print 0b1111
15

# Принцып формирования рядов двоичной системы
2**0 = 1
2**1 = 2
2**2 = 4
2**3 = 8
2**4 = 16
2**5 = 32
2**6 = 64
2**7 = 128
2**8 = 256
2**9 = 512
2**10 = 1024

one = 0b1
two = 0b10
three = 0b11
four = 0b100
five = 0b101
six = 0b110
seven = 0b111
eight = 0b1000
nine = 0b1001
ten = 0b1010
eleven = 0b1011
twelve = 0b1100


bin()	# base 2
oct()	# base 8
hex()	# base 16


# Алгоритм перевода списка цифр в бинарные
number = [1,2,3,4,5]
for item in number:
    print bin(item)


# Алгоритм перевода бинарный чисел с укзанием разрядности
>>> print int("0b11001001",2)
201
>>> print int("11001001",2)
201


# Алгоритм сдвига бинарных чисел
shift_right = 0b1100
shift_left = 0b1

# Your code here!
shift_right = shift_right >> 2
shift_left = shift_left << 2

print bin(shift_right)		# 0b11
print bin(shift_left)		# 0b100


# Оператор & 
0 & 0 = 0
0 & 1 = 0
1 & 0 = 0
1 & 1 = 1

     a:   00101010   42
     b:   00001111   15       
===================
 a & b:   00001010   10

0b111 (7) & 0b1010 (10) = 0b10 (2)


# Вот Интересно
print bin(0b1110 & 0b101)	# 0b100
print 0b1110 & 0b101		# 4


# Оператор |
0 | 0 = 0
0 | 1 = 1 
1 | 0 = 1
1 | 1 = 1

    a:  00101010  42
    b:  00001111  15       
================
a | b:  00101111  47

110 (6) | 1010 (10) = 1110 (14)

print bin(0b1110 | 0b101)	# 0b1111


# Оператор XOR (^) 
0 ^ 0 = 0
0 ^ 1 = 1
1 ^ 0 = 1
1 ^ 1 = 0

    a:  00101010   42
    b:  00001111   15       
================
a ^ b:  00100101   37

111 (7) ^ 1010 (10) = 1101 (13)

print bin(0b1110 ^ 0b101)	# 0b1011


# Оператор ~  добавляет 1 и меняет знак
print ~1	# -2
print ~2	# -3
print ~3	# -4
print ~42	# -43
print ~123	# -124


# Не пойму прикола - что эта маск дает
a = 0b11101110
mask = 0b11111111
res = a ^ mask
print bin(res)
	и это:
a = 0b10111011
mask = 0b100
desired = a | mask
print bin(desired)
	и это:
def check_bit4(input):
    mask = 0b1000
    desired = input & mask
    if desired > 0:
        return "on"
    else:
        return "off"

def flip_bit(number,n):
    m=0b1 << (n-1) 
    result = number ^ m 
    return bin(result)



КЛАССЫ

class Fruit(object):	# Инициирум клас с набором логики по трем функциям
    """A class that makes various tasty fruits."""
    def __init__(self, name, color, flavor, poisonous): # Функция инициализации параметров(объектов)
        self.name = name
        self.color = color
        self.flavor = flavor
        self.poisonous = poisonous

    def description(self):	# Функция печатания трех параметров from self
        print "I'm a %s %s and I taste %s." % (self.color, self.name, self.flavor)

    def is_edible(self):	# еще функция печатания из селф
        if not self.poisonous:
            print "Yep! I'm edible."
        else:
            print "Don't eat me! I am super poisonous."

lemon = Fruit("lemon", "yellow", "sour", False)	 # Наполняем класс значениями объектов(параметров)

lemon.description()	# Задаем на выполнение функцию под заданные значения 
lemon.is_edible()	# Задаем на выполнение функцию под заданные значения



class Animal(object):
    pass		# Просто создание нового пустого класса


class Animal(object):
    def __init__(self):	# Инициируем пустое место для параматров(объектов) в классе
        pass



class Animal(object):
    def __init__(self, name):	# Создаем параметр нейм в привязке через селф
        self.name = name



class Square(object):
  def __init__(self):
    self.sides = 4	# Создали Клас и задали в нем параметр

my_shape = Square()
print my_shape.sides	# Наследовали переменной параметры Класса и вызвали параметр !!!



class Animal(object):
    def __init__(self, name):
        self.name = name	# Создаем конструкция для первого параметра

zebra = Animal("Jeffrey")	# задаем значение первому(единственному параметру Класса)
print zebra.name		# вызываем значение параметра



# Class definition
class Animal(object):
    """Makes cute animals."""
    # For initializing our instance objects
    def __init__(self, name, age, is_hungry):	# Наполняем класс объектами (3 штуки)
        self.name = name
        self.age = age
        self.is_hungry = is_hungry

zebra = Animal("Jeffrey", 2, True)	# Создаем связку переменная/(значение параметров из класса)
giraffe = Animal("Bruce", 1, False)
panda = Animal("Chad", 7, True)

print zebra.name, zebra.age, zebra.is_hungry	# Вызываем значения переменной
print giraffe.name, giraffe.age, giraffe.is_hungry
print panda.name, panda.age, panda.is_hungry



class Animal(object):
    """Makes cute animals."""
    is_alive = True		# !!! Внутриклассовая переменная, задает параметр (3й) для всех объектов(параметров) класса
    def __init__(self, name, age):
        self.name = name
        self.age = age

zebra = Animal("Jeffrey", 2)
giraffe = Animal("Bruce", 1)
panda = Animal("Chad", 7)

print zebra.name, zebra.age, zebra.is_alive	# Вызывается 3 параметра переменных
print giraffe.name, giraffe.age, giraffe.is_alive
print panda.name, panda.age, panda.is_alive



class Animal(object):
    """Makes cute animals."""
    is_alive = True
    def __init__(self, name, age):
        self.name = name
        self.age = age
        
    # Add your method here!
    def description(self):
        print "Its Animal make name: %s and age: %s" % \
        (self.name, self.age)
        
hippo = Animal('Claus', 15)
hippo.description()



class Animal(object):
    """Makes cute animals."""
    is_alive = True
    health = "good"		# Переменная вне метода но ко всему классу
    def __init__(self, name, age):
        self.name = name
        self.age = age
        
    # Add your method here!
    def description(self):
        print self.name
        print self.age
        print self.is_alive	# Наследует параметр локальной переменной вне метода но внутри класса(3я и 4я)
        print self.health
                
hippo = Animal('Kaa', 34)	# задаем 2 первых параметра
sloth = Animal('Charley', 50)
ocelot = Animal('Moby Dick', 100)

hippo.description()		# вывод всего метода
print
print hippo.health		# выдод одного параметра внутри класса но вне метода
print "----------"
sloth.description()
print
print sloth.health
print "----------"
ocelot.description()
print
print ocelot.health
print "----------"
Animal.description(hippo)	# А еще можно так



class ShoppingCart(object):
    """Creates shopping cart objects
    for users of our fine website."""
    items_in_cart = {}			# инициировань новый словарь, набор ключ/данные
    
    def __init__(self, customer_name):
        self.customer_name = customer_name

    def add_item(self, product, price):		# метод 1 - добавление
        """Add product to the cart."""
        if not product in self.items_in_cart:
            self.items_in_cart[product] = price
            print product + " added."
        else:
            print product + " is already in the cart."

    def remove_item(self, product):		# метод 2 - удаление
        """Remove product from the cart."""
        if product in self.items_in_cart:
            del self.items_in_cart[product]
            print product + " removed."
        else:
            print product + " is not in the cart."

my_cart = ShoppingCart("Ryndin")	# инициируем Кустомер_найм
my_cart.add_item("Sitro", 5.40)		# Вызываем метод и наполдьняем словарь парой данных


# Наследование Класссов
class Customer(object):
    """Produces objects that represent customers."""
    def __init__(self, customer_id):
        self.customer_id = customer_id

    def display_cart(self):
        print "I'm a string that stands in for the contents of your shopping cart!"

class ReturningCustomer(Customer):		# Класс Ретурн наследовал от класса Кустомера
    """For customers of the repeat variety."""
    def display_order_history(self):
        print "I'm a string that stands in for your order history!"

monty_python = ReturningCustomer("ID: 12345")	# Задаем параметры для через неследованый Класс
monty_python.display_cart()			# Выполняем метод через наследованный класс
print
monty_python.display_order_history()


# Переопределение 
class Employee(object):
    def __init__(self, name):
        self.name = name
    def greet(self, other):
        print "Hello, %s" % other.name

class CEO(Employee):
    def greet(self, other):
        print "Get back to work, %s!" % other.name

ceo = CEO("Emily")		# задали имя для второго класса
emp = Employee("Steve")		# задали имя для первого класса
emp.greet(ceo)			# выполнили метод первого класса перезадав имя(на второе)
# Hello, Emily
ceo.greet(emp)			# выполнили метод второго класса перезадав имя(на первое)
# Get back to work, Steve!



class Employee(object):
    """Models real-life employees!"""
    def __init__(self, employee_name):
        self.employee_name = employee_name

    def calculate_wage(self, hours):
        self.hours = hours
        return hours * 20.00

class PartTimeEmployee(Employee):

    def calculate_wage(self, hours):
        self.hours = hours
        return hours * 12.00
    
    def full_time_wage(self, hours):
        return super(PartTimeEmployee, self).calculate_wage(hours)
        
milton =PartTimeEmployee("Milli")
print milton.full_time_wage(10) # resoult 10*20=200



# Контрольная
class Triangle(object):
    def __init__(self, angle1, angle2, angle3):
        self.angle1 = angle1
        self.angle2 = angle2
        self.angle3 = angle3
    
    number_of_sides = 3
    
    def check_angles(self):
        if (self.angle1+self.angle2+self.angle3) == 180:
            return True
        else:
            return False
    
my_triangle = Triangle(90,30,60)	
print my_triangle.number_of_sides	# =3
print my_triangle.check_angles()	# True
print "==============="
my_triangle = Triangle(90,30,90)
print my_triangle.number_of_sides 	# =3
print my_triangle.check_angles()	# False


# Контрольная Классы
class Triangle(object):
    def __init__(self, angle1, angle2, angle3):
        self.angle1 = angle1
        self.angle2 = angle2
        self.angle3 = angle3
    
    number_of_sides = 3
    
    def check_angles(self):
        if (self.angle1+self.angle2+self.angle3) == 180:
            return True
        else:
            return False
            
class Equilateral(Triangle):
    
    angle = 60
    
    def __init__(self):
        self.angle1 = self.angle
        self.angle2 = self.angle
        self.angle3 = self.angle

    def print_angles(self):
        print "Angles: %s %s %s" % (self.angle1, self.angle2, self.angle3)
    
x = Equilateral()
print x.print_angles()		# 60 60 60



class Car(object):
    def __init__(self, model, color, mpg):
        self.model = model
        self.color = color
        self.mpg = mpg
    
    condition = "new"
    
my_car = Car("DeLorean", "silver", 88)
print my_car.model, my_car.color, my_car.mpg 




class Square(object):
  def __init__(self, side):
    self.side = side

  def perimeter(self):
    return self.side * 4



class Car(object):
    condition = "new"
    def __init__(self, model, color, mpg):
        self.model = model
        self.color = color
        self.mpg   = mpg
        
    def display_car(self):
        print "This is a %s %s with %s MPG." % \
        (self.color, self.model, self.mpg)

my_car = Car("DeLorean", "silver", 88)
print my_car.condition
print my_car.model
print my_car.color
print my_car.mpg
print "-----------------"
print my_car.display_car()



class Car(object):
    condition = "new"
    
    def __init__(self, model, color, mpg):
        self.model = model
        self.color = color
        self.mpg   = mpg
        
    def display_car(self):
        print "This is a %s %s with %s MPG." % \
        (self.color, self.model, self.mpg)
        
    def drive_car(self):
        self.condition = "used"

my_car = Car("DeLorean", "silver", 88)

print my_car.condition  	# "new"
my_car.drive_car()
print my_car.condition 		# "used"




class Car(object):
    condition = "new"
    
    def __init__(self, model, color, mpg):
        self.model = model
        self.color = color
        self.mpg   = mpg
        
    def display_car(self):
        print "This is a %s %s with %s MPG." % \
        (self.color, self.model, self.mpg)
        
    def drive_car(self):
        self.condition = "used"
        
class ElectricCar(Car):
        
    def __init__(self, model, color, mpg, battery_type):
        Car.__init__(self, model, color, mpg)		# Наследуем 3 параметра от Родителя
	# или 
	# super(ElectricCar, self).__init__(model, color, mpg)
        self.battery_type = battery_type		# Вводим 1 новый параметр 
        

print "----------------------"
my_car = ElectricCar("Mers", "red", 100, "molten salt") # Заполняем все 4 параметра


# !!! Контрольная
class Car(object):
    
    condition = "new"
    
    def __init__(self, model, color, mpg):
        self.model = model
        self.color = color
        self.mpg   = mpg
        
    def display_car(self):
        print "This is a %s %s with %s MPG." % \
        (self.color, self.model, self.mpg)
        
    def drive_car(self):
        self.condition = "used"
        
class ElectricCar(Car):
        
    def __init__(self, model, color, mpg, battery_type):
        super(ElectricCar, self).__init__(model, color, mpg)
        self.battery_type = battery_type
        
    def drive_car(self):
        self.condition = "like new"

my_car = ElectricCar("Mers", "red", 100, "molten salt") 	# сначала вызываем переменную

print my_car.condition		# "new"
my_car.drive_car()				# Затем активирем метод для переменной 
print my_car.condition		# "like new"



# Новый метод __repr__ указывает формат отображения объектов(параметров)
class Point3D(object):
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
    
    def __repr__(self):
        return "(%d, %d, %d)" % (self.x, self.y, self.z)
        
my_point = Point3D(1, 2, 3)
print my_point		# (1, 2, 3)



# Изучить метод __str__


# INPUT/OUTPUT
my_list = [i**2 for i in range(1,11)]	# Создаем список из числе в степени 2
# Generates a list of squares of the numbers 1 - 10

f = open("output.txt", "w")		# открываем файл (через переменную) в режиме "писать"

for item in my_list:
    f.write(str(item) + "\n")		# записываем данные в файл (построчно)

f.close()				# закрываем файл через закрытие переменной



my_file = open("output.txt", "r+")	# открытие файла в режиме "рид анд врайт"



# Контрольная
my_list = [i**2 for i in range(1,11)]

my_file = open("output.txt", "r+")

# Add your code below!
for item in my_list:
    my_file.write(str(item) + "\n")
    
my_file.close()



print my_file.read()		# "читание" файла



my_file = open("output.txt", "r")	# Открываем файл в режиме чтения
print my_file.read()			# Печатаем содержимое файла
my_file.close()				# Закрываем файл (обязательно в итоге)




my_file = open("text.txt", "wr+")

print my_file.readline()	# печатание построчно?
print my_file.readline()
print my_file.readline()

my_file.close()


# Конструкция открытия/изменения/чтения закрытия файлов - обязательно должен быть закрыт
# Open the file for reading
read_file = open("text.txt", "r")

# Use a second file handler to open the file for writing
write_file = open("text.txt", "w")
# Write to the file
write_file.write("Not closing files is VERY BAD.")

write_file.close()

# Try to read from the file
print read_file.read()
read_file.close()



__enter__() and __exit__(). 		# выучить эти методы



# Такая конструкция автоматически закрывает файл после изменений (не надо .clise())
with open("text.txt", "w") as textfile:
	textfile.write("Success!")



with open("text.txt", "wr+") as my_file:
    my_file.write("123456")
        
if not my_file.closed:		# оператор проверки закрыт ли файл
    my_file.close()
    
print my_file.closed		# "True"




